{
  "$schema": "https://raw.githubusercontent.com/schemastore/schemastore/master/src/schemas/json/sarif-2.1.0-rtm.5.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "QDPY",
          "fullName": "Qodana for Python",
          "version": "213.7331.203",
          "rules": [],
          "taxa": [
            {
              "id": "EditorConfig",
              "name": "EditorConfig"
            },
            {
              "id": "Jupyter",
              "name": "Jupyter"
            },
            {
              "id": "Python",
              "name": "Python"
            },
            {
              "id": "XML",
              "name": "XML"
            },
            {
              "id": "JSON and JSON5",
              "name": "JSON and JSON5"
            },
            {
              "id": "RegExp",
              "name": "RegExp"
            },
            {
              "id": "Properties files",
              "name": "Properties files"
            },
            {
              "id": "Django",
              "name": "Django"
            },
            {
              "id": "HTML",
              "name": "HTML"
            },
            {
              "id": "General",
              "name": "General"
            },
            {
              "id": "Structural search",
              "name": "Structural search"
            },
            {
              "id": "RELAX NG",
              "name": "RELAX NG"
            },
            {
              "id": "Pyramid",
              "name": "Pyramid"
            },
            {
              "id": "Proofreading",
              "name": "Proofreading"
            },
            {
              "id": "Internationalization",
              "name": "Internationalization"
            },
            {
              "id": "Version control",
              "name": "Version control"
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        },
        "extensions": [
          {
            "name": "org.editorconfig.editorconfigjetbrains",
            "version": "213.7331",
            "rules": [
              {
                "id": "EditorConfigCharClassRedundancy",
                "shortDescription": {
                  "text": "Unnecessary character class"
                },
                "fullDescription": {
                  "text": "Reports character classes that consist of a single character. Such classes can be simplified to a character, for example '[a]'→'a'.",
                  "markdown": "Reports character classes that consist of a single character. Such classes can be simplified to a character, for example `[a]`→`a`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigDeprecatedDescriptor",
                "shortDescription": {
                  "text": "Deprecated property"
                },
                "fullDescription": {
                  "text": "Reports EditorConfig properties that are no longer supported.",
                  "markdown": "Reports EditorConfig properties that are no longer supported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigRootDeclarationUniqueness",
                "shortDescription": {
                  "text": "Extra top-level declaration"
                },
                "fullDescription": {
                  "text": "Reports multiple top-level declarations. There can be only one optional “root=true” top-level declaration in the EditorConfig file. Using multiple top-level declarations is not allowed.",
                  "markdown": "Reports multiple top-level declarations. There can be only one optional \"root=true\" top-level declaration in the EditorConfig file. Using multiple top-level declarations is not allowed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigNumerousWildcards",
                "shortDescription": {
                  "text": "Too many wildcards"
                },
                "fullDescription": {
                  "text": "Reports sections that contain too many wildcards. Using a lot of wildcards may lead to performance issues.",
                  "markdown": "Reports sections that contain too many wildcards. Using a lot of wildcards may lead to performance issues."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigWildcardRedundancy",
                "shortDescription": {
                  "text": "Redundant wildcard"
                },
                "fullDescription": {
                  "text": "Reports wildcards that become redundant when the “**” wildcard is used in the same section. The “**” wildcard defines a broader set of files than any other wildcard. That is why, any other wildcard used in the same section has no affect and can be removed.",
                  "markdown": "Reports wildcards that become redundant when the \"\\*\\*\" wildcard is used in the same section.\n\n\nThe \"\\*\\*\" wildcard defines a broader set of files than any other wildcard.\nThat is why, any other wildcard used in the same section has no affect and can be removed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigPartialOverride",
                "shortDescription": {
                  "text": "Overlapping sections"
                },
                "fullDescription": {
                  "text": "Reports subsets of files specified in the current section that overlap with other subsets in other sections. For example: '[{foo,bar}]' and '[{foo,bas}]' both contain “foo”.",
                  "markdown": "Reports subsets of files specified in the current section that overlap with other subsets in other sections. For example: `[{foo,bar}]` and `[{foo,bas}]` both contain \"foo\"."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigEmptySection",
                "shortDescription": {
                  "text": "Empty section"
                },
                "fullDescription": {
                  "text": "Reports sections that do not contain any EditorConfig properties.",
                  "markdown": "Reports sections that do not contain any EditorConfig properties."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigHeaderUniqueness",
                "shortDescription": {
                  "text": "EditorConfig section is not unique"
                },
                "fullDescription": {
                  "text": "Reports sections that define the same file pattern as other sections.",
                  "markdown": "Reports sections that define the same file pattern as other sections."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigShadowingOption",
                "shortDescription": {
                  "text": "Overriding property"
                },
                "fullDescription": {
                  "text": "Reports properties that override the same properties defined earlier in the file. For example: '[*.java]\nindent_size=4\n[{*.java,*.js}]\nindent_size=2' The second section includes the same files as '[*.java]' but also sets indent_size to value 2. Thus the first declaration 'indent_size=4'will be ignored.",
                  "markdown": "Reports properties that override the same properties defined earlier in the file.\n\nFor example:\n\n\n    [*.java]\n    indent_size=4\n    [{*.java,*.js}]\n    indent_size=2\n\nThe second section includes the same files as `[*.java]` but also sets indent_size to value 2. Thus the first declaration `indent_size=4`will be ignored."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigListAcceptability",
                "shortDescription": {
                  "text": "Unexpected value list"
                },
                "fullDescription": {
                  "text": "Reports lists of values that are used in properties in which lists are not supported. In this case, only a single value can be specified.",
                  "markdown": "Reports lists of values that are used in properties in which lists are not supported. In this case, only a single value can be specified."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigShadowedOption",
                "shortDescription": {
                  "text": "Overridden property"
                },
                "fullDescription": {
                  "text": "Reports properties that are already defined in other sections. For example: '[*.java]\nindent_size=4\n[{*.java,*.js}]\nindent_size=2' The second section includes all '*.java' files too but it also redefines indent_size. As a result the value 2 will be used for files matching '*.java'.",
                  "markdown": "Reports properties that are already defined in other sections.\n\nFor example:\n\n\n    [*.java]\n    indent_size=4\n    [{*.java,*.js}]\n    indent_size=2\n\nThe second section includes all `*.java` files too but it also redefines indent_size. As a result the value 2 will be used for files matching `*.java`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigEmptyHeader",
                "shortDescription": {
                  "text": "Empty header"
                },
                "fullDescription": {
                  "text": "Reports sections with an empty header. Section header must contain file path globs in the format similar to one supported by 'gitignore'.",
                  "markdown": "Reports sections with an empty header. Section header must contain file path globs in the format similar to one supported by `gitignore`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigValueCorrectness",
                "shortDescription": {
                  "text": "Invalid property value"
                },
                "fullDescription": {
                  "text": "Reports property values that do not meet value restrictions. For example, some properties may be only “true” or “false”, others contain only integer numbers etc. If a value has a limited set of variants, use code completion to see all of them.",
                  "markdown": "Reports property values that do not meet value restrictions. For example, some properties may be only \"true\" or \"false\", others contain only integer numbers etc. If a value has a limited set of variants, use code completion to see all of them."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigValueUniqueness",
                "shortDescription": {
                  "text": "Non-unique list value"
                },
                "fullDescription": {
                  "text": "Reports duplicates in lists of values.",
                  "markdown": "Reports duplicates in lists of values."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigMissingRequiredDeclaration",
                "shortDescription": {
                  "text": "Required declarations are missing"
                },
                "fullDescription": {
                  "text": "Reports properties that miss the required declarations. Refer to the documentation for more information.",
                  "markdown": "Reports properties that miss the required declarations. Refer to the documentation for more information."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigCharClassLetterRedundancy",
                "shortDescription": {
                  "text": "Duplicate character class letter"
                },
                "fullDescription": {
                  "text": "Reports wildcard patterns in the EditorConfig section that contain a duplicate character in the character class, for example '[aa]'.",
                  "markdown": "Reports wildcard patterns in the EditorConfig section that contain a duplicate character in the character class, for example `[aa]`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigKeyCorrectness",
                "shortDescription": {
                  "text": "Unknown property"
                },
                "fullDescription": {
                  "text": "Reports properties that are not supported by the IDE. Note: some “ij” domain properties may require specific language plugins.",
                  "markdown": "Reports properties that are not supported by the IDE. Note: some \"ij\" domain properties may require specific language plugins."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigPatternEnumerationRedundancy",
                "shortDescription": {
                  "text": "Unnecessary braces"
                },
                "fullDescription": {
                  "text": "Reports pattern lists that are either empty '{}' or contain just one pattern, for example '{foo}'. The braces are needed only if there are two and more, for example: '{foo,bar}'",
                  "markdown": "Reports pattern lists that are either empty `{}` or contain just one pattern, for example `{foo}`. The braces are needed only if there are two and more, for example: `{foo,bar}`"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigSpaceInHeader",
                "shortDescription": {
                  "text": "Space in file pattern"
                },
                "fullDescription": {
                  "text": "Reports space characters in wildcard patterns that affect pattern matching. If these characters are not intentional, they should be removed.",
                  "markdown": "Reports space characters in wildcard patterns that affect pattern matching. If these characters are not intentional, they should be removed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigOptionRedundancy",
                "shortDescription": {
                  "text": "Redundant property"
                },
                "fullDescription": {
                  "text": "Reports properties that are redundant when another applicable section already contains the same property and value. For example: '[*]\nindent_size=4\n[*.java]\nindent_size=4' are both applicable to '*.java' files and define the same 'indent_size' value.",
                  "markdown": "Reports properties that are redundant when another applicable section already contains the same property and value.\n\n\nFor example:\n\n\n    [*]\n    indent_size=4\n    [*.java]\n    indent_size=4\n\nare both applicable to `*.java` files and define the same `indent_size` value."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigRootDeclarationCorrectness",
                "shortDescription": {
                  "text": "Unexpected top-level declaration"
                },
                "fullDescription": {
                  "text": "Reports unexpected top-level declarations. Top-level declarations other than “root=true” are not allowed in the EditorConfig file.",
                  "markdown": "Reports unexpected top-level declarations. Top-level declarations other than \"root=true\" are not allowed in the EditorConfig file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigReferenceCorrectness",
                "shortDescription": {
                  "text": "Invalid reference"
                },
                "fullDescription": {
                  "text": "Reports identifiers that are either unknown or have a wrong type.",
                  "markdown": "Reports identifiers that are either unknown or have a wrong type."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigUnusedDeclaration",
                "shortDescription": {
                  "text": "Unused declaration"
                },
                "fullDescription": {
                  "text": "Reports unused declarations. Such declarations can be removed.",
                  "markdown": "Reports unused declarations. Such declarations can be removed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigPairAcceptability",
                "shortDescription": {
                  "text": "Unexpected key-value pair"
                },
                "fullDescription": {
                  "text": "Reports key-value pairs that are not allowed in the current context.",
                  "markdown": "Reports key-value pairs that are not allowed in the current context."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigPatternRedundancy",
                "shortDescription": {
                  "text": "Duplicate or redundant pattern"
                },
                "fullDescription": {
                  "text": "Reports file patterns that are redundant as there already are other patterns that define the same scope of files or even a broader one. For example, in '[{*.java,*}]' the first '*.java' pattern defines a narrower scope compared to '*'. That is why it is redundant and can be removed.",
                  "markdown": "Reports file patterns that are redundant as there already are other patterns that define the same scope of files or even a broader one. For example, in `[{*.java,*}]` the first `*.java` pattern defines a narrower scope compared to `*`. That is why it is redundant and can be removed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigNoMatchingFiles",
                "shortDescription": {
                  "text": "No matching files"
                },
                "fullDescription": {
                  "text": "Reports sections with wildcard patterns that do not match any files under the directory in which the '.editorconfig' file is located.",
                  "markdown": "Reports sections with wildcard patterns that do not match any files under the directory in which the `.editorconfig` file is located."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigUnexpectedComma",
                "shortDescription": {
                  "text": "Unexpected comma"
                },
                "fullDescription": {
                  "text": "Reports commas that cannot be used in the current context. Commas are allowed only as separators for values in lists.",
                  "markdown": "Reports commas that cannot be used in the current context. Commas are allowed only as separators for values in lists."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "Pythonid",
            "version": "213.7331",
            "rules": [
              {
                "id": "JupyterPackageInspection",
                "shortDescription": {
                  "text": "The 'jupyter' package is not installed"
                },
                "fullDescription": {
                  "text": "Reports cases when the 'jupyter' package is not installed for the selected Python interpreter. Without a properly installed 'jupyter' package, you cannot execute Jupyter notebooks. Click the corresponding link on the warning banner to install the missing package. You can also install the package in the Project Settings/Preferences or in the Python Packages tool window. See Installing Python package for more details.",
                  "markdown": "Reports cases when the `jupyter` package is not installed for the selected\nPython interpreter. Without a properly installed `jupyter` package, you cannot\nexecute Jupyter notebooks.\n\nClick the corresponding link on the warning banner to install the missing\npackage. You can also install the package in the Project **Settings/Preferences** or in the\n**Python Packages** tool window.\n\nSee [Installing Python package](https://www.jetbrains.com/help/pycharm/installing-uninstalling-and-upgrading-packages.html) for more details."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Jupyter",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PySetFunctionToLiteralInspection",
                "shortDescription": {
                  "text": "Function call can be replaced with set literal"
                },
                "fullDescription": {
                  "text": "Reports calls to the 'set' function that can be replaced with the 'set' literal. Example: def do_mult(a, b):\n    c = a * b\n    return set([c, a, b])\n When the quick-fix is applied, the code changes to: def do_mult(a, b):\n    c = a * b\n    return {c, a, b}",
                  "markdown": "Reports calls to the `set` function that can be replaced with\nthe `set` literal.\n\n**Example:**\n\n```\ndef do_mult(a, b):\n    c = a * b\n    return set([c, a, b])\n```\n\nWhen the quick-fix is applied, the code changes to:\n\n```\ndef do_mult(a, b):\n    c = a * b\n    return {c, a, b}\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyStatementEffectInspection",
                "shortDescription": {
                  "text": "Statement has no effect"
                },
                "fullDescription": {
                  "text": "Reports statements that have no effect. Example: class Car:\n    def __init__(self, speed=0):\n        self.speed = speed\n        self.time # has no effect\n\n2 + 3 # has no effect\n In this example, you can either add a field 'time' to the 'Car' class or introduce variables for the problematic statements.",
                  "markdown": "Reports statements that have no effect.\n\n**Example:**\n\n```\nclass Car:\n    def __init__(self, speed=0):\n        self.speed = speed\n        self.time # has no effect\n\n2 + 3 # has no effect\n```\n\nIn this example, you can either add a field `time` to the `Car` class or\nintroduce variables for the problematic statements."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMandatoryEncodingInspection",
                "shortDescription": {
                  "text": "No encoding specified for file"
                },
                "fullDescription": {
                  "text": "Reports a missing encoding comment in Python 2. Example: class Book(object):\n    def __init__(self):\n        pass\n When the quick-fix is applied, the missing comment is added: # coding=utf-8\nclass Book(object):\n    def __init__(self):\n        pass",
                  "markdown": "Reports a missing encoding comment in Python 2.\n\n**Example:**\n\n```\nclass Book(object):\n    def __init__(self):\n        pass\n```\n\nWhen the quick-fix is applied, the missing comment is added:\n\n```\n# coding=utf-8\nclass Book(object):\n    def __init__(self):\n        pass\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyInconsistentIndentationInspection",
                "shortDescription": {
                  "text": "Inconsistent indentation"
                },
                "fullDescription": {
                  "text": "Reports inconsistent indentation in Python source files when, for example, you use a mixture of tabs and spaces in your code.",
                  "markdown": "Reports inconsistent indentation in Python source files when, for example,\nyou use a mixture of tabs and spaces in your code."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyAttributeOutsideInitInspection",
                "shortDescription": {
                  "text": "An instance attribute is defined outside `__init__`"
                },
                "fullDescription": {
                  "text": "Reports a problem when instance attribute definition is outside '__init__' method. Example:     class Book:\n    def __init__(self):\n        self.author = 'Mark Twain'\n\n    def release(self):\n        self.year = '1889'\n When the quick-fix is applied, the code sample changes to:     class Book:\n    def __init__(self):\n        self.year = '1889'\n        self.author = 'Mark Twain'\n\n    def release(self):\n        pass",
                  "markdown": "Reports a problem when instance attribute definition is outside `__init__` method.\n\n**Example:**\n\n```\n    class Book:\n    def __init__(self):\n        self.author = 'Mark Twain'\n\n    def release(self):\n        self.year = '1889'\n```\n\n\nWhen the quick-fix is applied, the code sample changes to:\n\n```\n    class Book:\n    def __init__(self):\n        self.year = '1889'\n        self.author = 'Mark Twain'\n\n    def release(self):\n        pass\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyTypedDictInspection",
                "shortDescription": {
                  "text": "Invalid TypedDict definition and usages"
                },
                "fullDescription": {
                  "text": "Reports invalid definition and usage of TypedDict. Example: from typing import TypedDict\n\n\nclass Movie(TypedDict):\n    name: str\n    year: int\n    rate: int = 10  # Right-hand side values are not supported\n\n    def method(self): # Invalid statement in TypedDict\n        pass\n\n\nm = Movie(name=\"name\", year=1000, rate=9)\nprint(m[\"director\"])  # There is no the 'director' key in 'Movie'\ndel m[\"name\"]  # The 'name' key cannot be deleted\nm[\"year\"] = \"1001\"  # Expected 'int', got 'str'",
                  "markdown": "Reports invalid definition and usage of\n[TypedDict](https://www.python.org/dev/peps/pep-0589/).\n\n**Example:**\n\n```\nfrom typing import TypedDict\n\n\nclass Movie(TypedDict):\n    name: str\n    year: int\n    rate: int = 10  # Right-hand side values are not supported\n\n    def method(self): # Invalid statement in TypedDict\n        pass\n\n\nm = Movie(name=\"name\", year=1000, rate=9)\nprint(m[\"director\"])  # There is no the 'director' key in 'Movie'\ndel m[\"name\"]  # The 'name' key cannot be deleted\nm[\"year\"] = \"1001\"  # Expected 'int', got 'str'\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyPep8Inspection",
                "shortDescription": {
                  "text": "PEP 8 coding style violation"
                },
                "fullDescription": {
                  "text": "Reports violations of the PEP 8 coding style guide by running the bundled pycodestyle.py tool.",
                  "markdown": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMissingTypeHintsInspection",
                "shortDescription": {
                  "text": "Missing type hinting for function definition"
                },
                "fullDescription": {
                  "text": "Reports missing type hints for function declaration in one of the two formats: parameter annotations or a type comment. Select the Only when types are known checkbox if you want the inspection check the types collected from runtime or inferred.",
                  "markdown": "Reports missing type hints for function declaration in\none of the two formats: parameter annotations or a type comment.\n\nSelect the **Only when types are known** checkbox if you want the inspection check\nthe types collected from runtime or inferred."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyTupleItemAssignmentInspection",
                "shortDescription": {
                  "text": "Tuple item assignment is prohibited"
                },
                "fullDescription": {
                  "text": "Reports assignments to a tuple item. t = ('red', 'blue', 'green', 'white')\nt[3] = 'black'\n A quick-fix offers to replace the tuple with a list.",
                  "markdown": "Reports assignments to a tuple item.\n\n```\nt = ('red', 'blue', 'green', 'white')\nt[3] = 'black'\n```\n\nA quick-fix offers to replace the tuple with a list."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoUnresolvedUrlInspection",
                "shortDescription": {
                  "text": "Django {% url %} tag arguments are unresolved"
                },
                "fullDescription": {
                  "text": "Reports a missing url in the 'url' tag. Example: {% url 'url_name' %}\n The IDE shows a warning if 'url_name' is not defined in the 'urls' file.",
                  "markdown": "Reports a missing url in the `url` tag.\n\n**Example:**\n\n```\n{% url 'url_name' %}\n```\n\nThe IDE shows a warning if `url_name` is not defined in the `urls` file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoUnresolvedStaticReferenceInspection",
                "shortDescription": {
                  "text": "Unresolved static reference"
                },
                "fullDescription": {
                  "text": "Reports unresolved references to static resources. Example: {% load staticfiles %}\n<link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'polls/style.css' %}\" />\n In this example, 'style.css' is highlighted if there is no such a file in the 'static/poll' directory.",
                  "markdown": "Reports unresolved references to static resources.\n\n**Example:**\n\n```\n{% load staticfiles %}\n<link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'polls/style.css' %}\" />\n```\n\nIn this example, `style.css` is highlighted if there is no such a file in the `static/poll`\ndirectory."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyInitNewSignatureInspection",
                "shortDescription": {
                  "text": "Incompatible signatures of __new__ and __init__"
                },
                "fullDescription": {
                  "text": "Reports incompatible signatures of the '__new__' and '__init__' methods. Example: class MyClass(object):\n    def __new__(cls, arg1):\n        return super().__new__(cls)\n\n    def __init__(self):\n        pass\n If the '__new__' and '__init__' have different arguments, then the 'MyClass' cannot be instantiated. As a fix, the IDE offers to apply the Change Signature refactoring.",
                  "markdown": "Reports incompatible signatures of the `__new__` and `__init__` methods.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def __new__(cls, arg1):\n        return super().__new__(cls)\n\n    def __init__(self):\n        pass\n```\n\nIf the `__new__` and `__init__` have different arguments, then the `MyClass`\ncannot be instantiated.\n\nAs a fix, the IDE offers to apply the Change Signature refactoring."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDunderSlotsInspection",
                "shortDescription": {
                  "text": "Invalid usages of classes with  '__slots__' definitions"
                },
                "fullDescription": {
                  "text": "Reports invalid usages of a class with '__slots__' definitions. Example: class Foo:\n    __slots__ = ['foo', 'bar']\n\n\nfoo = Foo()\nfoo.baz = 'spam'",
                  "markdown": "Reports invalid usages of a class with `__slots__` definitions.\n\n**Example:**\n\n```\nclass Foo:\n    __slots__ = ['foo', 'bar']\n\n\nfoo = Foo()\nfoo.baz = 'spam'\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EndBlockNamesInspection",
                "shortDescription": {
                  "text": "Django endblock name doesn't match the block name"
                },
                "fullDescription": {
                  "text": "Reports incorrect names of the closing blocks. Example:   {% block my_block %}\n  {% endblock not_correct %}",
                  "markdown": "Reports incorrect names of the closing blocks.\n\n**Example:**\n\n```\n  {% block my_block %}\n  {% endblock not_correct %}\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDefaultArgumentInspection",
                "shortDescription": {
                  "text": "The default argument is mutable"
                },
                "fullDescription": {
                  "text": "Reports a problem when a mutable value as a list or dictionary is detected in a default value for an argument. Default argument values are evaluated only once at function definition time, which means that modifying the default value of the argument will affect all subsequent calls of that function. Example: def func(s, cache={}):\n    cache[s] = None\n When the quick-fix is applied, the code changes to: def func(s, cache=None):\n    if cache is None:\n        cache = {}\n    cache[s] = None",
                  "markdown": "Reports a problem when a mutable value as a list or dictionary is detected in a default value for\nan argument.   \n\nDefault argument values are evaluated only once at function definition time,\nwhich means that modifying the\ndefault value of the argument will affect all subsequent calls of that function.\n\n**Example:**\n\n```\ndef func(s, cache={}):\n    cache[s] = None\n```\n\nWhen the quick-fix is applied, the code changes to:\n\n```\ndef func(s, cache=None):\n    if cache is None:\n        cache = {}\n    cache[s] = None\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMissingConstructorInspection",
                "shortDescription": {
                  "text": "Missed call to '__init__' of the super class"
                },
                "fullDescription": {
                  "text": "Reports cases when a call to the 'super' constructor in a class is missed. Example: class Fruit:\n    def __init__(self):\n        pass\n\n\nclass Pear(Fruit):\n    def __init__(self):\n        pass\n The 'Pear' class should have a 'super' call in the '__init__' method. When the quick-fix is applied, the code changes to: class Fruit:\n    def __init__(self):\n        pass\n\n\nclass Pear(Fruit):\n    def __init__(self):\n        super().__init__()",
                  "markdown": "Reports cases when a call to the `super` constructor in a class is missed.\n\n**Example:**\n\n```\nclass Fruit:\n    def __init__(self):\n        pass\n\n\nclass Pear(Fruit):\n    def __init__(self):\n        pass\n```\n\nThe `Pear` class should have a `super` call in the `__init__`\nmethod.\n\nWhen the quick-fix is applied, the code changes to:\n\n```\nclass Fruit:\n    def __init__(self):\n        pass\n\n\nclass Pear(Fruit):\n    def __init__(self):\n        super().__init__()\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyShadowingBuiltinsInspection",
                "shortDescription": {
                  "text": "Shadowing built-in names"
                },
                "fullDescription": {
                  "text": "Reports shadowing built-in names, such as 'len' or 'list'. Example: def len(a, b, c):\n    d = a + b + c\n    return d\n In this code fragment, the 'len' built-in name is used. The IDE offers to apply the Rename refactoring as a fix.",
                  "markdown": "Reports shadowing built-in names, such as `len` or `list`.\n\n**Example:**\n\n```\ndef len(a, b, c):\n    d = a + b + c\n    return d\n```\n\nIn this code fragment, the `len` built-in name is used. The IDE offers to\napply the Rename refactoring as a fix."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PySimplifyBooleanCheckInspection",
                "shortDescription": {
                  "text": "Redundant boolean variable check"
                },
                "fullDescription": {
                  "text": "Reports equality comparison with a boolean literal. Example: def func(s):\n    if s.isdigit() == True:\n        return int(s)\n With the quick-fix applied, the code fragment will be simplified to: def func(s):\n    if s.isdigit():\n        return int(s)",
                  "markdown": "Reports equality comparison with a boolean literal.\n\n**Example:**\n\n```\ndef func(s):\n    if s.isdigit() == True:\n        return int(s)\n```\n\nWith the quick-fix applied, the code fragment will be simplified to:\n\n```\ndef func(s):\n    if s.isdigit():\n        return int(s)\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMethodOverridingInspection",
                "shortDescription": {
                  "text": "Method signature does not match signature of overridden method"
                },
                "fullDescription": {
                  "text": "Reports inconsistencies in overriding method signatures. Example: class Book:\n    def add_title(self):\n        pass\n\n\nclass Novel(Book):\n    def add_title(self, text):\n        pass\n Parameters of the 'add_title' method in the 'Novel' class do not match the method signature specified in the 'Book' class. As a fix, the IDE offers to apply the Change Signature refactoring.",
                  "markdown": "Reports inconsistencies in overriding method signatures.\n\n**Example:**\n\n```\nclass Book:\n    def add_title(self):\n        pass\n\n\nclass Novel(Book):\n    def add_title(self, text):\n        pass\n```\n\nParameters of the `add_title` method in the `Novel` class do not match the method\nsignature specified in the `Book` class. As a fix, the IDE offers to apply the Change Signature\nrefactoring."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyTestParametrizedInspection",
                "shortDescription": {
                  "text": "Incorrect arguments in @pytest.mark.parametrize"
                },
                "fullDescription": {
                  "text": "Reports functions that are decorated with @pytest.mark.parametrize but do not have arguments to accept parameters of the decorator.",
                  "markdown": "Reports functions that are decorated with [@pytest.mark.parametrize](https://docs.pytest.org/en/stable/parametrize.html) but do not have arguments to accept\nparameters of the decorator."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDecoratorInspection",
                "shortDescription": {
                  "text": "Class-specific decorator is used outside the class"
                },
                "fullDescription": {
                  "text": "Reports usages of '@classmethod' or '@staticmethod' decorators in methods outside a class. Example: class State(object):\n\n    @classmethod\n    def my_state(cls, name):\n        cls.name = name\n\n\n@classmethod\ndef change_state(self):\n    pass\n The 'change_state' method should not use the '@classmethod' decorator or it should be moved to the 'State' class declaration. If you apply the 'Remove decorator' action, the code changes to: class State(object):\n\n    @classmethod\n    def my_state(cls, name):\n        cls.name = name\n\n\ndef change_state(self):\n    pass",
                  "markdown": "Reports usages of `@classmethod` or `@staticmethod` decorators\nin methods outside a class.\n\n**Example:**\n\n```\nclass State(object):\n\n    @classmethod\n    def my_state(cls, name):\n        cls.name = name\n\n\n@classmethod\ndef change_state(self):\n    pass\n```\n\nThe `change_state` method should not use the `@classmethod` decorator or it should be\nmoved to the `State` class declaration.\n\nIf you apply the `Remove decorator` action, the code changes to:\n\n```\nclass State(object):\n\n    @classmethod\n    def my_state(cls, name):\n        cls.name = name\n\n\ndef change_state(self):\n    pass\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyAsyncCallInspection",
                "shortDescription": {
                  "text": "Missing `await` syntax in coroutine calls"
                },
                "fullDescription": {
                  "text": "Reports coroutines that were called without using the 'await' syntax. Example: async def bar():\n    pass\n\n\nasync def foo():\n    bar()\n After the quick-fix is applied, the code changes to: async def bar():\n    pass\n\n\nasync def foo():\n    await bar()",
                  "markdown": "Reports coroutines that were called\nwithout using the `await` syntax.\n\n**Example:**\n\n```\nasync def bar():\n    pass\n\n\nasync def foo():\n    bar()\n```\n\nAfter the quick-fix is applied, the code changes to:\n\n```\nasync def bar():\n    pass\n\n\nasync def foo():\n    await bar()\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyComparisonWithNoneInspection",
                "shortDescription": {
                  "text": "Using equality operators to compare with None"
                },
                "fullDescription": {
                  "text": "Reports comparisons with 'None'. That type of comparisons should always be done with 'is' or 'is not', never the equality operators. Example: a = 2\n\n\nif a == None:\n    print(\"Success\")\n Once the quick-fix is applied, the code changes to: a = 2\n\n\nif a is None:\n    print(\"Success\")",
                  "markdown": "Reports comparisons with `None`. That type of comparisons\nshould always be done with `is` or `is not`, never\nthe equality operators.\n\n**Example:**\n\n```\na = 2\n\n\nif a == None:\n    print(\"Success\")\n```\n\nOnce the quick-fix is applied, the code changes to:\n\n```\na = 2\n\n\nif a is None:\n    print(\"Success\")\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CommandLineInspection",
                "shortDescription": {
                  "text": "Incorrect CLI syntax"
                },
                "fullDescription": {
                  "text": "Reports the problems if the arguments of the command you type in the console are not in the proper order. The inspection also verifies that option names and arguments are correct. Do not disable the inspection if you are going to use command-line interfaces like manage.py in Django.",
                  "markdown": "Reports the problems if the arguments of the command you type in the console are not in the proper order. The inspection also verifies\nthat option names and arguments are correct.\n\nDo not disable the inspection if you are going to use command-line interfaces like [manage.py in Django](https://www.jetbrains.com/help/pycharm/running-manage-py.html)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyCallingNonCallableInspection",
                "shortDescription": {
                  "text": "Attempt to call a non-callable object"
                },
                "fullDescription": {
                  "text": "Reports a problem when you are trying to call objects that are not callable, like, for example, properties: class Record:\n    @property\n    def as_json(self):\n\njson = Record().as_json()",
                  "markdown": "Reports a problem when you are trying\nto call objects that are not callable, like, for example, properties:\n\n```\nclass Record:\n    @property\n    def as_json(self):\n\njson = Record().as_json()\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyUnreachableCodeInspection",
                "shortDescription": {
                  "text": "Unreachable code"
                },
                "fullDescription": {
                  "text": "Reports code fragments that cannot be normally reached. Example: if True:\n    print('Yes')\nelse:\n    print('No')\n As a fix, you might want to check and modify the algorithm to ensure it implements the expected logic.",
                  "markdown": "Reports code fragments that cannot be normally reached.\n\n**Example:**\n\n```\nif True:\n    print('Yes')\nelse:\n    print('No')\n```\n\nAs a fix, you might want to check and modify the algorithm to ensure it implements\nthe expected logic."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyChainedComparisonsInspection",
                "shortDescription": {
                  "text": "Too complex chained comparisons"
                },
                "fullDescription": {
                  "text": "Reports chained comparisons that can be simplified. Example: 'def do_comparison(x):\n      xmin = 10\n      xmax = 100\n      if x >= xmin and x <= xmax:\n          pass' The IDE offers to simplify 'if x >= xmin and x <= xmax'. When the quick-fix is applied, the code changes to: 'def do_comparison(x):\n      xmin = 10\n      xmax = 100\n      if xmin <= x <= xmax:\n          pass'",
                  "markdown": "Reports chained comparisons that can be simplified.\n\n**Example:**\n\n\n      def do_comparison(x):\n          xmin = 10\n          xmax = 100\n          if x >= xmin and x <= xmax:\n              pass\n\nThe IDE offers to simplify `if x >= xmin and x <= xmax`.\nWhen the quick-fix is applied, the code changes to:\n\n\n      def do_comparison(x):\n          xmin = 10\n          xmax = 100\n          if xmin <= x <= xmax:\n              pass\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMethodParametersInspection",
                "shortDescription": {
                  "text": "Improper first parameter"
                },
                "fullDescription": {
                  "text": "Reports methods that lack the first parameter that is usually named 'self'. Example: class Movie:\n\n   def show():\n       pass\n When the quick-fix is applied, the code changes to: class Movie:\n\n   def show(self):\n       pass\n The inspection also reports naming issues in class methods. Example: class Movie:\n    @classmethod\n    def show(abc):\n        pass\n Since the first parameter of a class method should be 'cls', the IDE provides a quick-fix to rename it.",
                  "markdown": "Reports methods that lack the first parameter that is usually\nnamed `self`.\n\n**Example:**\n\n```\nclass Movie:\n\n   def show():\n       pass\n```\n\nWhen the quick-fix is applied, the code changes to:\n\n```\nclass Movie:\n\n   def show(self):\n       pass\n```\n\nThe inspection also reports naming issues in class methods.\n\n**Example:**\n\n```\nclass Movie:\n    @classmethod\n    def show(abc):\n        pass\n```\n\nSince the first parameter of a class method should be `cls`, the IDE provides a quick-fix\nto rename it."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDocstringTypesInspection",
                "shortDescription": {
                  "text": "Type in docstring does not match inferred type"
                },
                "fullDescription": {
                  "text": "Reports types in docstring that do not match dynamically inferred types.",
                  "markdown": "Reports types in docstring that do not match dynamically inferred types."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoBrokenLineCommentInspection",
                "shortDescription": {
                  "text": "Broken line comment"
                },
                "fullDescription": {
                  "text": "Reports '#}' line comment ends in Django templates that do not have a matching line comment start. Example: comment #}\n The IDE highlights '#}' as it requires the corresponding '{#' token.",
                  "markdown": "Reports `#}` line comment ends in Django templates that do not have a\nmatching line comment start.\n\n**Example:**\n\n```\ncomment #}\n```\n\nThe IDE highlights `#}` as it requires the corresponding `{#` token."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyCompatibilityInspection",
                "shortDescription": {
                  "text": "Code is incompatible with specific Python versions"
                },
                "fullDescription": {
                  "text": "Reports incompatibility with the specified versions of Python. Enable this inspection if you need your code to be compatible with a range of Python versions, for example, if you are building a library. To define the range of the inspected Python versions, select the corresponding checkboxes in the Options section. For more information about the Python versions supported by the IDE, see the web help.",
                  "markdown": "Reports incompatibility with the specified versions of Python.\nEnable this inspection if you need your code to be compatible with a range of Python versions, for example,\nif you are building a library.\n\nTo define the range of the inspected Python versions, select the corresponding checkboxes in the **Options**\nsection.\n\nFor more information about the Python versions supported by the IDE, see the\n[web help](https://www.jetbrains.com/help/pycharm/python.html#support)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyGlobalUndefinedInspection",
                "shortDescription": {
                  "text": "Global variable is not defined at the module level"
                },
                "fullDescription": {
                  "text": "Reports problems when a variable defined through the 'global' statement is not defined in the module scope. Example: def foo():\n    global bar\n    print(bar)\n\nfoo()\n As a fix, you can move the global variable declaration: global bar\n\n\ndef foo():\n    print(bar)",
                  "markdown": "Reports problems when a variable defined through the `global`\nstatement is not defined in the module scope.\n\n**Example:**\n\n```\ndef foo():\n    global bar\n    print(bar)\n\nfoo()\n```\n\nAs a fix, you can move the global variable declaration:\n\n```\nglobal bar\n\n\ndef foo():\n    print(bar)\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMethodFirstArgAssignmentInspection",
                "shortDescription": {
                  "text": "First argument of the method is reassigned"
                },
                "fullDescription": {
                  "text": "Reports cases when the first parameter, such as 'self' or 'cls', is reassigned in a method. Because in most cases, there are no objectives in such reassignment, the IDE indicates an error. Example: class Account:\n    def calc(self, balance):\n        if balance == 0:\n            self = balance\n        return self\n As a fix, you might want to check and modify the algorithm to ensure that reassignment is needed. If everything is correct, you can invoke intention actions for this code and opt to ignore the warning.",
                  "markdown": "Reports cases when the first parameter,\nsuch as `self` or `cls`, is reassigned in a method.\nBecause in most cases, there are no objectives in such reassignment, the\nIDE indicates an error.\n\n**Example:**\n\n```\nclass Account:\n    def calc(self, balance):\n        if balance == 0:\n            self = balance\n        return self\n```\n\nAs a fix, you might want to check and modify the algorithm to ensure that reassignment is needed. If everything is correct,\nyou can invoke intention actions for this code and opt to ignore the warning."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyProtocolInspection",
                "shortDescription": {
                  "text": "Invalid protocol definitions and usages"
                },
                "fullDescription": {
                  "text": "Reports invalid definitions and usages of protocols introduced in PEP-544. Example: from typing import Protocol\n\n\nclass MyProtocol(Protocol):\n    def method(self, p: int) -> str:\n        pass\n\n\nclass MyClass(MyProtocol):\n    def method(self, p: str) -> int: # Type of 'method' is not compatible with 'MyProtocol'\n        pass\n\n\nclass MyAnotherProtocol(MyClass, Protocol): # All bases of a protocol must be protocols\n    pass",
                  "markdown": "Reports invalid definitions and usages of protocols introduced in\n[PEP-544](https://www.python.org/dev/peps/pep-0544/).\n\n**Example:**\n\n```\nfrom typing import Protocol\n\n\nclass MyProtocol(Protocol):\n    def method(self, p: int) -> str:\n        pass\n\n\nclass MyClass(MyProtocol):\n    def method(self, p: str) -> int: # Type of 'method' is not compatible with 'MyProtocol'\n        pass\n\n\nclass MyAnotherProtocol(MyClass, Protocol): # All bases of a protocol must be protocols\n    pass\n\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyTypeHintsInspection",
                "shortDescription": {
                  "text": "Invalid type hints definitions and usages"
                },
                "fullDescription": {
                  "text": "Reports invalid usages of type hints. Example: from typing import TypeVar\n\nT0 = TypeVar('T1') # Argument of 'TypeVar' must be 'T0'\n\n\ndef b(p: int) -> int:  # Type specified both in a comment and annotation\n    # type: (int) -> int\n    pass\n\n\ndef c(p1, p2): # Type signature has too many arguments\n    # type: (int) -> int\n    pass\n Available quick-fixes offer various actions. You can rename, remove, or move problematic elements. You can also manually modify type declarations to ensure no warning is shown.",
                  "markdown": "Reports invalid usages of type hints.\n\n**Example:**\n\n```\nfrom typing import TypeVar\n\nT0 = TypeVar('T1') # Argument of 'TypeVar' must be 'T0'\n\n\ndef b(p: int) -> int:  # Type specified both in a comment and annotation\n    # type: (int) -> int\n    pass\n\n\ndef c(p1, p2): # Type signature has too many arguments\n    # type: (int) -> int\n    pass\n```\n\nAvailable quick-fixes offer various actions. You can rename, remove, or move problematic elements. You can also manually modify type declarations to ensure no warning is shown."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMethodMayBeStaticInspection",
                "shortDescription": {
                  "text": "Method is not declared static"
                },
                "fullDescription": {
                  "text": "Reports any methods that do not require a class instance creation and can be made static. Example: class MyClass(object):\n    def my_method(self, x):\n        print(x)\n If a Make function from method quick-fix is applied, the code changes to: def my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n If you select the Make method static quick-fix, the '@staticmethod' decorator is added: class MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)",
                  "markdown": "Reports any methods that do not require a class instance creation and can be\nmade static.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def my_method(self, x):\n        print(x)\n```\n\nIf a **Make function from method** quick-fix is applied, the code changes to:\n\n```\ndef my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n```\n\nIf you select the **Make method static** quick-fix, the `@staticmethod` decorator is added:\n\n```\nclass MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyTupleAssignmentBalanceInspection",
                "shortDescription": {
                  "text": "Tuple assignment balance is incorrect"
                },
                "fullDescription": {
                  "text": "Reports cases when the number of expressions on the right-hand side and targets on the left-hand side are not the same. Example: t = ('red', 'blue', 'green', 'white')\n(c1, c2, c3) = t\n As a quick-fix, you can modify the highlighted code fragment to restore the tuple balance.",
                  "markdown": "Reports cases when the number of expressions on the right-hand side\nand targets on the left-hand side are not the same.\n\n**Example:**\n\n```\nt = ('red', 'blue', 'green', 'white')\n(c1, c2, c3) = t\n```\n\nAs a quick-fix, you can modify the highlighted code fragment to restore the tuple\nbalance."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyClassHasNoInitInspection",
                "shortDescription": {
                  "text": "Class has no `__init__` method"
                },
                "fullDescription": {
                  "text": "Reports cases in Python 2 when a class has no '__init__' method, neither its parent classes. Example: class Book():\n    pass\n The quick-fix adds the '__init__' method: class Book():\n    def __init__(self):\n        pass",
                  "markdown": "Reports cases in Python 2 when a class has no `__init__` method, neither its parent\nclasses.\n\n**Example:**\n\n```\nclass Book():\n    pass\n```\n\nThe quick-fix adds the `__init__` method:\n\n```\nclass Book():\n    def __init__(self):\n        pass\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CythonUsageBeforeDeclarationInspection",
                "shortDescription": {
                  "text": "Cython variable is used before its declaration"
                },
                "fullDescription": {
                  "text": "Reports Cython variables being referenced before declaration. Example: cdef int c_x\n\nprint(c_x, c_y)  # Variable 'c_y' is used before its declaration\n\ncdef int c_y = 0",
                  "markdown": "Reports Cython variables being referenced before declaration.\n\n**Example:**\n\n```\ncdef int c_x\n\nprint(c_x, c_y)  # Variable 'c_y' is used before its declaration\n\ncdef int c_y = 0\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyArgumentEqualDefaultInspection",
                "shortDescription": {
                  "text": "The function argument is equal to the default parameter value"
                },
                "fullDescription": {
                  "text": "Reports a problem when an argument passed to the function is equal to the default parameter value. This inspection is disabled by default to avoid performance degradation. Example: def my_function(a: int = 2):\n    print(a)\n\n\nmy_function(2)",
                  "markdown": "Reports a problem when an argument\npassed to the function is equal to the default parameter value.\n\nThis inspection is disabled by default to avoid performance degradation.\n\n**Example:**\n\n```\ndef my_function(a: int = 2):\n    print(a)\n\n\nmy_function(2)\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDictCreationInspection",
                "shortDescription": {
                  "text": "Dictionary creation can be rewritten by dictionary literal"
                },
                "fullDescription": {
                  "text": "Reports situations when you can rewrite dictionary creation by using a dictionary literal. This approach brings performance improvements. Example: dic = {}\ndic['var'] = 1\n When the quick-fix is applied, the code changes to: dic = {'var': 1}",
                  "markdown": "Reports situations when you can rewrite dictionary creation\nby using a dictionary literal.\n\nThis approach brings performance improvements.\n\n**Example:**\n\n```\ndic = {}\ndic['var'] = 1\n```\n\nWhen the quick-fix is applied, the code changes to:\n\n```\ndic = {'var': 1}\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyStringFormatInspection",
                "shortDescription": {
                  "text": "Errors in string formatting operations"
                },
                "fullDescription": {
                  "text": "Reports errors in string formatting operations. Example 1: \"Hello {1}\".format(\"people\")\n Example 2: def bar():\n    return 1\n\n\n\"%s %s\" % bar()\n As a fix, you need to rewrite string formatting fragments to adhere to the formatting syntax.",
                  "markdown": "Reports errors in string formatting operations.\n\n**Example 1:**\n\n```\n\"Hello {1}\".format(\"people\")\n```\n\n**Example 2:**\n\n```\ndef bar():\n    return 1\n\n\n\"%s %s\" % bar()\n```\n\nAs a fix, you need to rewrite string formatting fragments to\nadhere to the [formatting syntax](https://docs.python.org/3/library/string.html#format-string-syntax)."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyExceptionInheritInspection",
                "shortDescription": {
                  "text": "Exceptions do not inherit from standard 'Exception' class"
                },
                "fullDescription": {
                  "text": "Reports cases when a custom exception class is raised but does not inherit from the builtin Exception class. Example: class A:\n    pass\n\n\ndef me_exception():\n    raise A()\n The proposed quick-fix changes the code to: class A(Exception):\n    pass\n\n\ndef me_exception():\n    raise A()",
                  "markdown": "Reports cases when a custom exception class is\nraised but does not inherit from the\n[builtin Exception class](https://docs.python.org/3/library/exceptions.html).\n\n**Example:**\n\n```\nclass A:\n    pass\n\n\ndef me_exception():\n    raise A()\n```\n\nThe proposed quick-fix changes the code to:\n\n```\nclass A(Exception):\n    pass\n\n\ndef me_exception():\n    raise A()\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyAssignmentToLoopOrWithParameterInspection",
                "shortDescription": {
                  "text": "Assignments to 'for' loop or 'with' statement parameter"
                },
                "fullDescription": {
                  "text": "Reports the cases when you rewrite a loop variable with an inner loop:     for i in range(5):\n      for i in range(20, 25):\n          print(\"Inner\", i)\n      print(\"Outer\", i)\n  It also warns you if a variable declared in the 'with' statement is redeclared inside of the statement body:     with open(\"file\") as f:\n      f.read()\n      with open(\"file\") as f:",
                  "markdown": "Reports the cases when you rewrite a loop variable with an inner loop:\n\n```\n    for i in range(5):\n      for i in range(20, 25):\n          print(\"Inner\", i)\n      print(\"Outer\", i)\n  \n```\n\nIt also warns you if a variable declared in the `with` statement is redeclared inside of the statement body:\n\n```\n    with open(\"file\") as f:\n      f.read()\n      with open(\"file\") as f:\n  \n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoUnresolvedFilterInspection",
                "shortDescription": {
                  "text": "Unresolved filter"
                },
                "fullDescription": {
                  "text": "Reports unresolved filters in Django templates. Example:   {{ my_value|cool_filter:\"arg\" }}",
                  "markdown": "Reports unresolved filters in Django templates.\n\n**Example:**\n\n```\n  {{ my_value|cool_filter:\"arg\" }}\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoRelationInspection",
                "shortDescription": {
                  "text": "Incorrect comparison expression in Django templates"
                },
                "fullDescription": {
                  "text": "Reports missing whitespaces before and after comparison operators in Django templates. Example: {% if my_var==1 %}\n{% endif %}",
                  "markdown": "Reports missing whitespaces before and after comparison operators in Django templates.\n\n**Example:**\n\n```\n{% if my_var==1 %}\n{% endif %}\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoUnresolvedTagInspection",
                "shortDescription": {
                  "text": "Unresolved tag"
                },
                "fullDescription": {
                  "text": "Reports unresolved tags in Django templates. Example: <h1>{{ question.question_text }}</h1>\n<start>\n The IDE highlights '<start>'. You can either remove the tag or apply the quick-fix to add '<start>' to custom HTML tags.",
                  "markdown": "Reports unresolved tags in Django templates.\n\n**Example:**\n\n```\n<h1>{{ question.question_text }}</h1>\n<start>\n```\n\nThe IDE highlights `<start>`. You can either remove the tag or apply the quick-fix to\nadd `<start>` to custom HTML tags."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyFromFutureImportInspection",
                "shortDescription": {
                  "text": "Improper position of from __future__ import"
                },
                "fullDescription": {
                  "text": "Reports 'from __future__ import' statements that are used not at the beginning of a file. Example: a = 1\nfrom __future__ import print_function\nprint()\n When the quick-fix is applied, the code changes to: from __future__ import print_function\n\na = 1\nprint()",
                  "markdown": "Reports `from __future__ import`\nstatements that are used not at\nthe beginning of a file.\n\n**Example:**\n\n```\na = 1\nfrom __future__ import print_function\nprint()\n```\n\nWhen the quick-fix is applied, the code changes to:\n\n```\nfrom __future__ import print_function\n\na = 1\nprint()\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyUnresolvedReferencesInspection",
                "shortDescription": {
                  "text": "Unresolved references"
                },
                "fullDescription": {
                  "text": "Reports references in your code that cannot be resolved. In a dynamically typed language, this is possible in a limited number of cases. If a reference type is unknown, then its attributes are not highlighted as unresolved even if you know that they should be: def print_string(s):\n  print(s.abc())\n In this code fragment 's' is always a string and 'abc' should be highlighted as unresolved. However, 's' type is inferred as 'Any' and no warning is reported. The IDE provides quick-fix actions to add missing references on-the-fly.",
                  "markdown": "Reports references in your code that cannot be resolved.\n\nIn a dynamically typed language, this is possible in a limited number of cases.\n\nIf a reference type is unknown, then its attributes are not highlighted as unresolved even if you know that they should be:\n\n```\ndef print_string(s):\n  print(s.abc())\n```\n\nIn this code fragment `s` is always a string and `abc` should be highlighted as unresolved. However, `s`\ntype is inferred as `Any` and no warning is reported.\n\nThe IDE provides quick-fix actions to add missing references on-the-fly."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PySuperArgumentsInspection",
                "shortDescription": {
                  "text": "Wrong arguments to call super"
                },
                "fullDescription": {
                  "text": "Reports cases when any call to 'super(A, B)' does not meet the following requirements: 'B' is an instance of 'A' 'B' a subclass of 'A' Example: class Figure:\n    def color(self):\n        pass\n\n\nclass Rectangle(Figure):\n    def color(self):\n        pass\n\n\nclass Square(Figure):\n    def color(self):\n        return super(Rectangle, self).color() # Square is not an instance or subclass of Rectangle\n As a fix, you can make the 'Square' an instance of the 'Rectangle' class.",
                  "markdown": "Reports cases when any call to `super(A, B)` does not meet the\nfollowing requirements:\n\n* `B` is an instance of `A`\n* `B` a subclass of `A`\n\n**Example:**\n\n```\nclass Figure:\n    def color(self):\n        pass\n\n\nclass Rectangle(Figure):\n    def color(self):\n        pass\n\n\nclass Square(Figure):\n    def color(self):\n        return super(Rectangle, self).color() # Square is not an instance or subclass of Rectangle\n```\n\nAs a fix, you can make the `Square` an instance of the `Rectangle` class."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyPackageRequirementsInspection",
                "shortDescription": {
                  "text": "Unsatisfied package requirements"
                },
                "fullDescription": {
                  "text": "Reports packages mentioned in requirements files (for example, 'requirements.txt' or 'Pipfile') but not installed, or imported but not mentioned in requirements files. The IDE shows a quick-fix banner so that you can install the missing packages in one click.",
                  "markdown": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoOrmInspection",
                "shortDescription": {
                  "text": "Django ORM error"
                },
                "fullDescription": {
                  "text": "Reports several methods that may not be called due to some ORM reasons. Example: class Choice:\n    question = ForeignKey(Question, null=False)\n\n\nchoice_set = Question.objects.get(id=1).choice_set.remove()\n The 'remove' function can not be called if the foreign key has 'null=False'.",
                  "markdown": "Reports several methods that may not be called due to some ORM reasons.\n\n**Example:**\n\n```\nclass Choice:\n    question = ForeignKey(Question, null=False)\n\n\nchoice_set = Question.objects.get(id=1).choice_set.remove()\n```\n\nThe `remove` function can not be called if the foreign key has `null=False`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoUnresolvedTemplateReferenceInspection",
                "shortDescription": {
                  "text": "Unresolved template reference"
                },
                "fullDescription": {
                  "text": "Reports unresolved file references in string literals of 'extends'> and 'include'> Django tags. Example: {% extends \"../DjangoApp/templatetags/base.html\"%}\n In this example, the 'base.html' tag is highlighted, because it is not available in the specified location.",
                  "markdown": "Reports unresolved file references in string literals of\n`extends`\\> and `include`\\> Django tags.\n\n**Example:**\n\n```\n{% extends \"../DjangoApp/templatetags/base.html\"%}\n```\n\nIn this example, the `base.html` tag is highlighted, because it is not available in the\nspecified location."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyNonAsciiCharInspection",
                "shortDescription": {
                  "text": "File contains non-ASCII character"
                },
                "fullDescription": {
                  "text": "Reports cases in Python 2 when a file contains non-ASCII characters and does not have an encoding declaration at the top. Example: class A(object):\n# №5\n    def __init__(self):\n        pass\n In this example, the IDE reports a non-ASCII symbol in a comment and a lack of encoding declaration. Apply the proposed quick-fix to add a missing encoding declaration: # coding=utf-8\nclass A(object)\n# №5\n    def __init__(self):\n        pass",
                  "markdown": "Reports cases in Python 2 when a file contains non-ASCII characters and does not\nhave an encoding declaration at the top.\n\n**Example:**\n\n```\nclass A(object):\n# №5\n    def __init__(self):\n        pass\n```\n\nIn this example, the IDE reports a non-ASCII symbol in a comment and a lack of encoding\ndeclaration. Apply the proposed quick-fix to add a missing encoding declaration:\n\n```\n# coding=utf-8\nclass A(object)\n# №5\n    def __init__(self):\n        pass\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyTrailingSemicolonInspection",
                "shortDescription": {
                  "text": "Prohibited trailing semicolon in a statement"
                },
                "fullDescription": {
                  "text": "Reports trailing semicolons in statements. Example: def my_func(a):\n    c = a ** 2;\n    return c\n IDE provides a quick-fix that removes a trailing semicolon. When you apply it, the code changes to: def my_func(a):\n    c = a ** 2\n    return c",
                  "markdown": "Reports trailing semicolons in statements.\n\n**Example:**\n\n```\ndef my_func(a):\n    c = a ** 2;\n    return c\n```\n\nIDE provides a quick-fix that removes a trailing semicolon. When you\napply it, the code changes to:\n\n```\ndef my_func(a):\n    c = a ** 2\n    return c\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyRedundantParenthesesInspection",
                "shortDescription": {
                  "text": "Redundant parentheses"
                },
                "fullDescription": {
                  "text": "Reports about redundant parentheses in expressions. The IDE provides the quick-fix action to remove the redundant parentheses.",
                  "markdown": "Reports about redundant parentheses in expressions.\n\nThe IDE provides the quick-fix action to remove the redundant parentheses."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyAbstractClassInspection",
                "shortDescription": {
                  "text": "Class must implement all abstract methods"
                },
                "fullDescription": {
                  "text": "Reports cases when not all abstract properties or methods are defined in a subclass. Example: from abc import abstractmethod, ABC\n\n\nclass Figure(ABC):\n\n    @abstractmethod\n    def do_figure(self):\n        pass\n\n\nclass Triangle(Figure):\n    def do_triangle(self):\n        pass\n When the quick-fix is applied, the IDE implements an abstract method for the 'Triangle' class: from abc import abstractmethod, ABC\n\n\nclass Figure(ABC):\n\n    @abstractmethod\n    def do_figure(self):\n        pass\n\n\nclass Triangle(Figure):\n    def do_figure(self):\n        pass\n\n    def do_triangle(self):\n        pass",
                  "markdown": "Reports cases when not all abstract properties or methods are defined in\na subclass.\n\n**Example:**\n\n```\nfrom abc import abstractmethod, ABC\n\n\nclass Figure(ABC):\n\n    @abstractmethod\n    def do_figure(self):\n        pass\n\n\nclass Triangle(Figure):\n    def do_triangle(self):\n        pass\n```\n\nWhen the quick-fix is applied, the IDE implements an abstract method for the `Triangle` class:\n\n```\nfrom abc import abstractmethod, ABC\n\n\nclass Figure(ABC):\n\n    @abstractmethod\n    def do_figure(self):\n        pass\n\n\nclass Triangle(Figure):\n    def do_figure(self):\n        pass\n\n    def do_triangle(self):\n        pass\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyOldStyleClassesInspection",
                "shortDescription": {
                  "text": "Old-style class contains new-style class features"
                },
                "fullDescription": {
                  "text": "Reports occurrences of new-style class features in old-style classes. The inspection highlights '__slots__', '__getattribute__', and 'super()' inside old-style classes.",
                  "markdown": "Reports occurrences of\n[new-style class features](https://www.python.org/doc/newstyle/)\nin old-style classes. The inspection highlights\n`__slots__`, `__getattribute__`, and `super()`\ninside old-style classes."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoIncompatibleInspection",
                "shortDescription": {
                  "text": "Incompatible code in Django templates"
                },
                "fullDescription": {
                  "text": "Reports features that are not available in the current Django version. Example: {% if my_var is True %}\n{% endif %}\n Available since 1.10. The IDE shows warning when discovered in the earlier versions.",
                  "markdown": "Reports features that are not available in the current Django version.\n\n**Example:**\n\n```\n{% if my_var is True %}\n{% endif %}\n```\n\nAvailable since 1.10. The IDE shows warning when discovered in the earlier versions."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ExtendsTagPositionInspection",
                "shortDescription": {
                  "text": "Misplaced {% extends %} tag"
                },
                "fullDescription": {
                  "text": "Reports the '{% extends %}' tag that is not the first tag in a Django template. Example: {% load my_custom_tags %}\n{% extends \"../DjangoApp/templatetags/my_custom_tags.py\"%}\n In this example, the '{% extends %}' tag is highlighted, because it should be placed before the '{% load %}' tag.",
                  "markdown": "Reports the `{% extends %}` tag that is not the first tag in a\nDjango template.\n\n**Example:**\n\n```\n{% load my_custom_tags %}\n{% extends \"../DjangoApp/templatetags/my_custom_tags.py\"%}\n```\n\nIn this example, the `{% extends %}` tag is highlighted, because it should be placed before\nthe `{% load %}` tag."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyArgumentListInspection",
                "shortDescription": {
                  "text": "Incorrect call arguments"
                },
                "fullDescription": {
                  "text": "Reports discrepancies between declared parameters and actual arguments, as well as incorrect arguments, for example, duplicate named arguments, and incorrect argument order. Example: class Foo:\n    def __call__(self, p1: int, *, p2: str = \"%\"):\n        return p2 * p1\n\n\nbar = Foo()\nbar.__call__() # unfilled parameter\nbar(5, \"#\") # unexpected argument\n The correct code fragment looks at follows: class Foo:\n    def __call__(self, p1: int, *, p2: str = \"%\"):\n        return p2 * p1\n\n\nbar = Foo()\nbar.__call__(5)\nbar(5, p2=\"#\")",
                  "markdown": "Reports discrepancies between declared parameters and actual arguments, as well as\nincorrect arguments, for example, duplicate named arguments, and incorrect argument order.\n\n**Example:**\n\n```\nclass Foo:\n    def __call__(self, p1: int, *, p2: str = \"%\"):\n        return p2 * p1\n\n\nbar = Foo()\nbar.__call__() # unfilled parameter\nbar(5, \"#\") # unexpected argument\n```\n\nThe correct code fragment looks at follows:\n\n```\nclass Foo:\n    def __call__(self, p1: int, *, p2: str = \"%\"):\n        return p2 * p1\n\n\nbar = Foo()\nbar.__call__(5)\nbar(5, p2=\"#\")\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyInterpreterInspection",
                "shortDescription": {
                  "text": "An invalid interpreter"
                },
                "fullDescription": {
                  "text": "Reports problems if there is no Python interpreter configured for the project or if the interpreter is invalid. Without a properly configured interpreter, you cannot execute your Python scripts and benefit from some Python code insight features. The IDE provides quick access to the interpreter settings.",
                  "markdown": "Reports problems if there is no Python interpreter configured for the project or if the interpreter is invalid. Without a properly\nconfigured interpreter, you cannot execute your Python scripts and benefit from some Python code insight features.\n\nThe IDE provides quick access to the interpreter settings."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyBroadExceptionInspection",
                "shortDescription": {
                  "text": "Unclear exception clauses"
                },
                "fullDescription": {
                  "text": "Reports exception clauses that do not provide specific information about the problem. Example: Clauses that do not specify an exception class Clauses that are specified as 'Exception'",
                  "markdown": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyTypeCheckerInspection",
                "shortDescription": {
                  "text": "Incorrect type"
                },
                "fullDescription": {
                  "text": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases. Types of function parameters can be specified in docstrings or in Python 3 function annotations. Example: def foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n With the quick-fix, you can modify the problematic types: def foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()",
                  "markdown": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyPropertyAccessInspection",
                "shortDescription": {
                  "text": "Inappropriate access to properties"
                },
                "fullDescription": {
                  "text": "Reports cases when properties are accessed inappropriately: Read-only properties are set Write-only properties are read Non-deletable properties are deleted Example: class MyClass:\n    @property\n    def read_only(self): return None\n\n    def __write_only_setter(self, value): pass\n\n    write_only = property(None, __write_only_setter)\n\n\na = MyClass()\na.read_only = 10 # property cannot be set\ndel a.read_only # property cannot be deleted\nprint(a.write_only) # property cannot be read",
                  "markdown": "Reports cases when properties are accessed inappropriately:\n\n* Read-only properties are set\n* Write-only properties are read\n* Non-deletable properties are deleted\n\n**Example:**\n\n```\nclass MyClass:\n    @property\n    def read_only(self): return None\n\n    def __write_only_setter(self, value): pass\n\n    write_only = property(None, __write_only_setter)\n\n\na = MyClass()\na.read_only = 10 # property cannot be set\ndel a.read_only # property cannot be deleted\nprint(a.write_only) # property cannot be read\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyStubPackagesAdvertiser",
                "shortDescription": {
                  "text": "Stub packages advertiser"
                },
                "fullDescription": {
                  "text": "Reports availability of stub packages. Stub package is a package that contains type information for the corresponding runtime package. Using stub packages ensures better coding assistance for the corresponding python package.",
                  "markdown": "Reports availability of stub packages.\n\n\n[Stub package](https://www.python.org/dev/peps/pep-0561/) is a package that contains type information for the corresponding\nruntime package.\n\nUsing stub packages ensures better coding assistance for the corresponding python package."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyByteLiteralInspection",
                "shortDescription": {
                  "text": "A byte literal contains a non-ASCII character"
                },
                "fullDescription": {
                  "text": "Reports characters in byte literals that are outside ASCII range. Example: 's = b'№5''",
                  "markdown": "Reports characters in byte literals that are outside ASCII range.\n\n**Example:**\n`s = b'№5'`"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyRelativeImportInspection",
                "shortDescription": {
                  "text": "Suspicious relative imports"
                },
                "fullDescription": {
                  "text": "Reports usages of relative imports inside plain directories, for example, directories neither containing '__init__.py' nor explicitly marked as namespace packages.",
                  "markdown": "Reports usages of relative imports inside plain directories, for example, directories neither containing `__init__.py` nor\nexplicitly marked as namespace packages."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyAugmentAssignmentInspection",
                "shortDescription": {
                  "text": "Assignment can be replaced with augmented assignment"
                },
                "fullDescription": {
                  "text": "Reports assignments that can be replaced with augmented assignments. Example: a = 23\nb = 3\na = a + b\n After the quick-fix is applied, the code changes to: a = 23\nb = 3\na += b",
                  "markdown": "Reports assignments that can be replaced with augmented assignments.\n\n**Example:**\n\n```\na = 23\nb = 3\na = a + b\n```\n\nAfter the quick-fix is applied, the code changes to:\n\n```\na = 23\nb = 3\na += b\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDeprecationInspection",
                "shortDescription": {
                  "text": "Deprecated function, class, or module"
                },
                "fullDescription": {
                  "text": "Reports usages of Python functions, or methods that are marked as deprecated and raise the 'DeprecationWarning' or 'PendingDeprecationWarning' warning. Also, this inspection highlights usages of 'abc.abstractstaticmethod', 'abc.abstractproperty', and 'abc.abstractclassmethod' decorators. Example: class Foo:\n    @property\n    def bar(self):\n        import warnings\n        warnings.warn(\"this is deprecated\", DeprecationWarning, 2)\n        return 5\n\n\nfoo = Foo()\nprint(foo.bar)",
                  "markdown": "Reports usages of Python functions, or methods that are marked as\ndeprecated and raise the `DeprecationWarning` or `PendingDeprecationWarning` warning.\n\nAlso, this inspection highlights usages of `abc.abstractstaticmethod`, `abc.abstractproperty`, and `abc.abstractclassmethod`\ndecorators.\n\n**Example:**\n\n```\nclass Foo:\n    @property\n    def bar(self):\n        import warnings\n        warnings.warn(\"this is deprecated\", DeprecationWarning, 2)\n        return 5\n\n\nfoo = Foo()\nprint(foo.bar)\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyUnnecessaryBackslashInspection",
                "shortDescription": {
                  "text": "Unnecessary backslash"
                },
                "fullDescription": {
                  "text": "Reports backslashes in places where line continuation is implicit inside '()', '[]', and '{}'. Example: a = ('first', \\\n     'second', 'third')\n When the quick-fix is applied, the redundant backslash is deleted.",
                  "markdown": "Reports backslashes in places where line continuation is implicit inside `()`,\n`[]`, and `{}`.\n\n**Example:**\n\n```\na = ('first', \\\n     'second', 'third')\n```\n\nWhen the quick-fix is applied, the redundant backslash is deleted."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyRedeclarationInspection",
                "shortDescription": {
                  "text": "Redeclared names without usages"
                },
                "fullDescription": {
                  "text": "Reports unconditional redeclarations of names without being used in between. Example: def x(): pass\n\n\nx = 2\n It applies to function and class declarations, and top-level assignments. When the warning is shown, you can try a recommended action, for example, you might be prompted to rename the variable.",
                  "markdown": "Reports unconditional redeclarations of names without being used in between.\n\n**Example:**\n\n```\ndef x(): pass\n\n\nx = 2\n```\n\nIt applies to function and class declarations, and top-level assignments.\n\nWhen the warning is shown, you can try a recommended action, for example, you might be prompted to\nrename the variable."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyShadowingNamesInspection",
                "shortDescription": {
                  "text": "Shadowing names from outer scopes"
                },
                "fullDescription": {
                  "text": "Reports shadowing names defined in outer scopes. Example: def outer(p):\n    def inner(p):\n        pass\n As a quick-fix, the IDE offers to remove a parameter or rename it.",
                  "markdown": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyFinalInspection",
                "shortDescription": {
                  "text": "Invalid usages of final classes, methods, and variables"
                },
                "fullDescription": {
                  "text": "Reports invalid usages of final classes, methods and variables. Example: from typing import final\n\n\n@final\nclass A:\n    def a_method(self):\n        pass\n\n\nclass B(A):\n    def a_method(self):\n        pass",
                  "markdown": "Reports invalid usages of final classes,\nmethods and variables.\n\n**Example:**\n\n```\nfrom typing import final\n\n\n@final\nclass A:\n    def a_method(self):\n        pass\n\n\nclass B(A):\n    def a_method(self):\n        pass\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyramidSetupInspection",
                "shortDescription": {
                  "text": "Project is not installed for development"
                },
                "fullDescription": {
                  "text": "Reports cases when no 'python setup.py develop' command was executed for the Pyramid project. You need to execute this command to install the newly created project for development.",
                  "markdown": "Reports cases when no `python setup.py develop` command was executed for the Pyramid project.\n\nYou need to execute this command to install the newly created project for development."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Pyramid",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyProtectedMemberInspection",
                "shortDescription": {
                  "text": "Accessing a protected member of a class or a module"
                },
                "fullDescription": {
                  "text": "Reports cases when a protected member is accessed outside the class, a descendant of the class where it is defined, or a module. class Foo:\n    def _protected_method(self):\n        pass\n\n\nclass Bar(Foo):\n    def public_method(self):\n        self._protected_method()\n\n\nfoo = Foo()\nfoo._protected_method() # Access to a protected method",
                  "markdown": "Reports cases when a protected member is accessed outside the class,\na descendant of the class where it is defined, or a module.\n\n```\nclass Foo:\n    def _protected_method(self):\n        pass\n\n\nclass Bar(Foo):\n    def public_method(self):\n        self._protected_method()\n\n\nfoo = Foo()\nfoo._protected_method() # Access to a protected method\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyStubPackagesCompatibilityInspection",
                "shortDescription": {
                  "text": "Incompatible stub packages"
                },
                "fullDescription": {
                  "text": "Reports stub packages that do not support the version of the corresponding runtime package. A stub package contains type information for some runtime package.",
                  "markdown": "Reports stub packages that do not support the version of the corresponding runtime package.\n\nA [stub package](https://www.python.org/dev/peps/pep-0561/) contains type information for some runtime package."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoCloseTagInspection",
                "shortDescription": {
                  "text": "Mismatched opening and closing tags"
                },
                "fullDescription": {
                  "text": "Reports cases when opening tags in Django templates are not correctly matched by closing tags. Example: {% if error_message %}<p><strong>{{ error_message }}</p>{% endif %}\n The IDE reports an error on the 'strong' tag not being closed.",
                  "markdown": "Reports cases when opening tags in Django templates are not correctly matched by closing tags.\n\n**Example:**\n\n```\n{% if error_message %}<p><strong>{{ error_message }}</p>{% endif %}\n```\n\nThe IDE reports an error on the `strong` tag not being closed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyUnboundLocalVariableInspection",
                "shortDescription": {
                  "text": "Unbound local variables"
                },
                "fullDescription": {
                  "text": "Reports local variables referenced before assignment. Example: x = 0\nif x > 10:\n    b = 3\nprint(b)\n The IDE reports a problem for 'print(b)'. A possible fix is: x = 0\nif x > 10:\n    b = 3\n    print(b)",
                  "markdown": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyNamedTupleInspection",
                "shortDescription": {
                  "text": "Invalid definition of 'typing.NamedTuple'"
                },
                "fullDescription": {
                  "text": "Reports invalid definition of a typing.NamedTuple. Example: import typing\n\n\nclass FullName(typing.NamedTuple):\n    first: str\n    last: str = \"\"\n    middle: str\n As a fix, place the field with the default value after the fields without default values: import typing\n\n\nclass FullName(typing.NamedTuple):\n    first: str\n    middle: str\n    last: str = \"\"",
                  "markdown": "Reports invalid definition of a\n[typing.NamedTuple](https://docs.python.org/3/library/typing.html#typing.NamedTuple).\n\n**Example:**\n\n```\nimport typing\n\n\nclass FullName(typing.NamedTuple):\n    first: str\n    last: str = \"\"\n    middle: str\n```\n\nAs a fix, place the field with the default value after the fields without default values:\n\n```\nimport typing\n\n\nclass FullName(typing.NamedTuple):\n    first: str\n    middle: str\n    last: str = \"\"\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PySingleQuotedDocstringInspection",
                "shortDescription": {
                  "text": "Single quoted docstring"
                },
                "fullDescription": {
                  "text": "Reports docstrings that do not adhere to the triple double-quoted string format. Example: def calc(self, balance=0):\n    'param: balance'\n    self.balance = balance\n When the quick-fix is applied, the code changes to: def calc(self, balance=0):\n    \"\"\"param: balance\"\"\"\n    self.balance = balance",
                  "markdown": "Reports docstrings that do not adhere to the triple double-quoted string format.\n\n**Example:**\n\n```\ndef calc(self, balance=0):\n    'param: balance'\n    self.balance = balance\n```\n\nWhen the quick-fix is applied, the code changes to:\n\n```\ndef calc(self, balance=0):\n    \"\"\"param: balance\"\"\"\n    self.balance = balance\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyUnusedLocalInspection",
                "shortDescription": {
                  "text": "Unused local symbols"
                },
                "fullDescription": {
                  "text": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
                  "markdown": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyReturnFromInitInspection",
                "shortDescription": {
                  "text": "__init__ method that returns a value"
                },
                "fullDescription": {
                  "text": "Reports occurrences of 'return' statements with a return value inside '__init__' methods of classes. Example: class Sum:\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n        self.sum = a + b\n        return self.sum\n A constructor should not return any value. The '__init__' method should only initialize the values of instance members for news objects. As a quick-fix, the IDE offers to remove the 'return' statement.",
                  "markdown": "Reports occurrences of `return` statements with a return value inside\n`__init__` methods of classes.\n\n**Example:**\n\n```\nclass Sum:\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n        self.sum = a + b\n        return self.sum\n```\n\nA constructor should not return any value. The `__init__` method should\nonly initialize the values of instance members for news objects.\n\nAs a quick-fix, the IDE offers to remove the `return` statement."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyNestedDecoratorsInspection",
                "shortDescription": {
                  "text": "Problematic nesting of decorators"
                },
                "fullDescription": {
                  "text": "Reports problems with nesting decorators. The inspection highlights the cases when 'classmethod' or 'staticmethod' is applied before another decorator. Example: def innocent(f):\n    return f\n\n\nclass A:\n    @innocent  # Decorator will not receive a callable it may expect\n    @classmethod\n    def f2(cls):\n        pass\n\n    @innocent  # Decorator will not receive a callable it may expect\n    @staticmethod\n    def f1():\n        pass\n As a quick-fix, the IDE offers to remove the decorator.",
                  "markdown": "Reports problems with nesting decorators. The inspection highlights the cases when `classmethod` or `staticmethod`\nis applied before another decorator.\n\n**Example:**\n\n```\ndef innocent(f):\n    return f\n\n\nclass A:\n    @innocent  # Decorator will not receive a callable it may expect\n    @classmethod\n    def f2(cls):\n        pass\n\n    @innocent  # Decorator will not receive a callable it may expect\n    @staticmethod\n    def f1():\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove the decorator."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMissingOrEmptyDocstringInspection",
                "shortDescription": {
                  "text": "Missing or empty docstring"
                },
                "fullDescription": {
                  "text": "Reports missing and empty docstrings. Example of a missing docstring def demo(a):\n    c = a ** 2\n Example of an empty docstring def demo(a):\n    \"\"\"\n    \"\"\"\n    c = a ** 2\n When the quick-fix is applied, the code fragments change to: def demo(a):\n    \"\"\"\n\n    :param a:\n    \"\"\"\n    c = a ** 2\n You need to provide some details about the parameter in the generated template.",
                  "markdown": "Reports missing and empty docstrings.\n\n**Example of a missing docstring**\n\n```\ndef demo(a):\n    c = a ** 2\n```\n\n**Example of an empty docstring**\n\n```\ndef demo(a):\n    \"\"\"\n    \"\"\"\n    c = a ** 2\n```\n\nWhen the quick-fix is applied, the code fragments change to:\n\n```\ndef demo(a):\n    \"\"\"\n\n    :param a:\n    \"\"\"\n    c = a ** 2\n```\n\nYou need to provide some details about the parameter in the generated template."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DuplicatedBlockNamesInspection",
                "shortDescription": {
                  "text": "Duplicated block names"
                },
                "fullDescription": {
                  "text": "Reports duplicated block names in Django templates. Example: <!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <link rel=\"stylesheet\" href=\"style.css\">\n    <title>{% block title %}My amazing site{% endblock %}</title>\n</head>\n\n<body>\n    <div id=\"sidebar\">\n        {% block title %}\n        <ul>\n            <li><a href=\"/\">Home</a></li>\n            <li><a href=\"/blog/\">Blog</a></li>\n        </ul>\n        {% endblock %}\n    </div>\n\n    <div id=\"content\">\n        {% block content %}{% endblock %}\n    </div>\n</body>\n</html>",
                  "markdown": "Reports duplicated block names in Django templates.\n\n**Example:**\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <link rel=\"stylesheet\" href=\"style.css\">\n    <title>{% block title %}My amazing site{% endblock %}</title>\n</head>\n\n<body>\n    <div id=\"sidebar\">\n        {% block title %}\n        <ul>\n            <li><a href=\"/\">Home</a></li>\n            <li><a href=\"/blog/\">Blog</a></li>\n        </ul>\n        {% endblock %}\n    </div>\n\n    <div id=\"content\">\n        {% block content %}{% endblock %}\n    </div>\n</body>\n</html>\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyOverloadsInspection",
                "shortDescription": {
                  "text": "Overloads in regular Python files"
                },
                "fullDescription": {
                  "text": "Reports cases when overloads in regular Python files are placed after the implementation or when their signatures are not compatible with the implementation. Example: from typing import overload\n\n\n@overload\ndef foo(p1, p2): # Overload signature is not compatible with the implementation\n    pass\n\n\n@overload\ndef foo(p1): # Overload signature is not compatible with the implementation\n    pass\n\n\ndef foo(p1, p2, p3):\n    print(p1, p2, p3)",
                  "markdown": "Reports cases when overloads in regular Python files are placed after the implementation or when their signatures are\nnot compatible with the implementation.\n\n**Example:**\n\n```\nfrom typing import overload\n\n\n@overload\ndef foo(p1, p2): # Overload signature is not compatible with the implementation\n    pass\n\n\n@overload\ndef foo(p1): # Overload signature is not compatible with the implementation\n    pass\n\n\ndef foo(p1, p2, p3):\n    print(p1, p2, p3)\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyPep8NamingInspection",
                "shortDescription": {
                  "text": "PEP 8 naming convention violation"
                },
                "fullDescription": {
                  "text": "Reports violations of the PEP8 naming conventions. Example: class mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n In this code fragment, IDE offers to rename 'mammalia' to 'Mammalia'. When the quick-fix is applied, the code change to: class Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")",
                  "markdown": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoUnresolvedLoadInspection",
                "shortDescription": {
                  "text": "Unresolved library inspection"
                },
                "fullDescription": {
                  "text": "Reports unresolved references in Django load tags. Example:   {% load something_nonexistent %}",
                  "markdown": "Reports unresolved references in Django load tags.\n\n**Example:**\n\n```\n  {% load something_nonexistent %}\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDictDuplicateKeysInspection",
                "shortDescription": {
                  "text": "Dictionary contains duplicate keys"
                },
                "fullDescription": {
                  "text": "Reports using the same value as the dictionary key twice. Example: dic = {\"a\": [1, 2], \"a\": [3, 4]}",
                  "markdown": "Reports using the same value as the dictionary key twice.\n\n**Example:**\n\n```\ndic = {\"a\": [1, 2], \"a\": [3, 4]}\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyExceptClausesOrderInspection",
                "shortDescription": {
                  "text": "Wrong order of 'except' clauses"
                },
                "fullDescription": {
                  "text": "Reports cases when 'except' clauses are not in the proper order, from the more specific to the more generic, or one exception class is caught twice. If you do not fix the order, some exceptions may not be caught by the most specific handler. Example: try:\n    call()\nexcept ValueError:\n    pass\nexcept UnicodeError:\n    pass\n The IDE recommends moving the clause up. When the quick-fix is applied, the code changes to: try:\n    call()\nexcept UnicodeError:\n    pass\nexcept ValueError:\n    pass",
                  "markdown": "Reports cases when `except` clauses are not in the proper order,\nfrom the more specific to the more generic, or one exception class is caught twice.\n\n\nIf you do not fix the order, some exceptions may not be caught by the most specific handler.\n\n**Example:**\n\n```\ntry:\n    call()\nexcept ValueError:\n    pass\nexcept UnicodeError:\n    pass\n```\n\nThe IDE recommends moving the clause up. When the quick-fix is applied, the code changes to:\n\n```\ntry:\n    call()\nexcept UnicodeError:\n    pass\nexcept ValueError:\n    pass\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDataclassInspection",
                "shortDescription": {
                  "text": "Invalid definition and usage of Data Classes"
                },
                "fullDescription": {
                  "text": "Reports invalid definitions and usages of classes created with 'dataclasses' or 'attr' modules. Example: import dataclasses\n\n\n@dataclasses.dataclass\nclass FullName:\n    first: str\n    middle: str = \"\"\n    last: str",
                  "markdown": "Reports invalid definitions and usages of classes created with\n`dataclasses` or `attr` modules.\n\n**Example:**\n\n```\nimport dataclasses\n\n\n@dataclasses.dataclass\nclass FullName:\n    first: str\n    middle: str = \"\"\n    last: str\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyClassicStyleClassInspection",
                "shortDescription": {
                  "text": "Classic style class usage"
                },
                "fullDescription": {
                  "text": "Reports classic style classes usage. This inspection applies only to Python 2. Example: class A:\n    pass\n With quick-fixes provided by the IDE, this code fragment changes to: class A(object):\n    def __init__(self):\n        pass",
                  "markdown": "Reports [classic style classes](https://docs.python.org/2/reference/datamodel.html#new-style-and-classic-classes) usage. This inspection applies only to Python 2.\n\n**Example:**\n\n```\nclass A:\n    pass\n```\n\nWith quick-fixes provided by the IDE, this code fragment changes to:\n\n```\nclass A(object):\n    def __init__(self):\n        pass\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoUrlArgumentsInspection",
                "shortDescription": {
                  "text": "Incorrect arguments in the ' {% url %}' tag"
                },
                "fullDescription": {
                  "text": "Reports missing parameters in the template file if the 'url()' function has parameters in its URL path. Example: In the 'url.py' file url(r'^(?P<question_id>[0-9]+)/', views.detail, name='detail')\n In the template file {% url 'polls:detail' %}",
                  "markdown": "Reports missing parameters in the template file if the `url()`\nfunction has parameters in its URL path.\n\n**Example:**\n\nIn the `url.py` file\n\n```\nurl(r'^(?P<question_id>[0-9]+)/', views.detail, name='detail')\n```\n\nIn the template file\n\n```\n{% url 'polls:detail' %}\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyNoneFunctionAssignmentInspection",
                "shortDescription": {
                  "text": "Assigning function calls that don't return anything"
                },
                "fullDescription": {
                  "text": "Reports cases when an assignment is done on a function that does not return anything. This inspection is similar to pylint inspection E1111. Example: def just_print():\n    print(\"Hello!\")\n\n\naction = just_print()\n As a quick-fix, the IDE offers to remove the assignment.",
                  "markdown": "Reports cases when an assignment is done on a function that does not return anything.\nThis inspection is similar to [pylint inspection E1111](https://docs.pylint.org/en/1.6.0/features.html#id6).\n\n\n**Example:**\n\n```\ndef just_print():\n    print(\"Hello!\")\n\n\naction = just_print()\n```\n\nAs a quick-fix, the IDE offers to remove the assignment."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyPropertyDefinitionInspection",
                "shortDescription": {
                  "text": "Incorrect property definition"
                },
                "fullDescription": {
                  "text": "Reports problems with the arguments of 'property()' and functions annotated with '@property'. class C:\n    @property\n    def abc(self):  # Getter should return or yield something\n        pass\n\n    @abc.setter\n    def foo(self, value):  # Names of function and decorator don't match\n        pass\n\n    @abc.setter\n    def abc(self, v1, v2):  # Setter signature should be (self, value)\n        pass\n\n    @abc.deleter\n    def abc(self, v1):  # Delete signature should be (self)\n        pass\n A quick-fix offers to update parameters.",
                  "markdown": "Reports problems with the arguments of `property()` and functions\nannotated with `@property`.\n\n```\nclass C:\n    @property\n    def abc(self):  # Getter should return or yield something\n        pass\n\n    @abc.setter\n    def foo(self, value):  # Names of function and decorator don't match\n        pass\n\n    @abc.setter\n    def abc(self, v1, v2):  # Setter signature should be (self, value)\n        pass\n\n    @abc.deleter\n    def abc(self, v1):  # Delete signature should be (self)\n        pass\n```\n\nA quick-fix offers to update parameters."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyIncorrectDocstringInspection",
                "shortDescription": {
                  "text": "Incorrect docstring"
                },
                "fullDescription": {
                  "text": "Reports mismatched parameters in a docstring. For example, 'b' is highlighted, because there is no such a parameter in the 'add' function.     def add(a, c):\n    \"\"\"\n    @param a:\n    @param b:\n    @return:\n    \"\"\"\n    pass\n The inspection does not warn you of missing parameters if none of them is mentioned in a docstring: def mult(a, c):\n    \"\"\"\n    @return:\n    \"\"\"\n    pass",
                  "markdown": "Reports mismatched parameters in a docstring. For example, `b` is highlighted, because there is no\nsuch a parameter in the `add` function.\n\n```\n    def add(a, c):\n    \"\"\"\n    @param a:\n    @param b:\n    @return:\n    \"\"\"\n    pass\n```\n\nThe inspection does not warn you of missing parameters if none of them is mentioned in a docstring:\n\n```\ndef mult(a, c):\n    \"\"\"\n    @return:\n    \"\"\"\n    pass\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JupyterKernelInspection",
                "shortDescription": {
                  "text": "Notebook kernel doesn't match the Python interpreter"
                },
                "fullDescription": {
                  "text": "Reports cases when the Python interpreter is not configured as a notebook kernel. This inspection prevents discrepancies between Code Insight and runtime behavior of the Jupyter notebook code cells. If you see the following warning, the kernel of the newly configured server doesn't match your current Python interpreter. For example, it might have a different set of the installed packages. You can register your Python interpreter by clicking the corresponding link on the warning banner. After that, you can see the interpreter in the list of the configured server kernels. See Manage Jupyter notebook servers for more details.",
                  "markdown": "Reports cases when the Python interpreter is not configured as a notebook kernel.\nThis inspection prevents discrepancies between Code Insight and runtime behavior of the\nJupyter notebook code cells.\n\nIf you see the following warning, the kernel of the newly configured server doesn't match your current Python interpreter.\nFor example, it might have a different set of the installed packages.\n\nYou can register your Python interpreter by clicking the corresponding\nlink on the warning banner. After that, you can see the interpreter in the list of the configured server kernels.\n\nSee [Manage Jupyter notebook servers](https://www.jetbrains.com/help/pycharm/configuring-jupyter-notebook.html) for more details."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Jupyter",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyListCreationInspection",
                "shortDescription": {
                  "text": "Non-optimal list declaration"
                },
                "fullDescription": {
                  "text": "Reports cases when a list declaration can be rewritten with a list literal. This ensures better performance of your application. Example: l = [1]\nl.append(2)\n When the quick-fix is applied, the code changes to: l = [1, 2]",
                  "markdown": "Reports cases when a list declaration\ncan be rewritten with a list literal.\n\nThis ensures better performance of your application.\n\n**Example:**\n\n```\nl = [1]\nl.append(2)\n```\n\nWhen the quick-fix is applied, the code changes to:\n\n```\nl = [1, 2]\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij",
            "version": "213.7331.203",
            "rules": [
              {
                "id": "XmlHighlighting",
                "shortDescription": {
                  "text": "XML highlighting"
                },
                "fullDescription": {
                  "text": "Reports XML validation problems in the results of a batch code inspection.",
                  "markdown": "Reports XML validation problems in the results of a batch code inspection."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonSchemaDeprecation",
                "shortDescription": {
                  "text": "Deprecated JSON property"
                },
                "fullDescription": {
                  "text": "Reports a deprecated property in a JSON file. Note that deprecation mechanism is not defined in the JSON Schema specification yet, and this inspection uses a non-standard extension 'deprecationMessage'.",
                  "markdown": "Reports a deprecated property in a JSON file.  \nNote that deprecation mechanism is not defined in the JSON Schema specification yet, and this inspection uses a non-standard extension 'deprecationMessage'."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlDuplicatedId",
                "shortDescription": {
                  "text": "Duplicate 'id' attribute"
                },
                "fullDescription": {
                  "text": "Reports a duplicate 'id' attribute in XML.",
                  "markdown": "Reports a duplicate `id` attribute in XML."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpDuplicateCharacterInClass",
                "shortDescription": {
                  "text": "Duplicate character in character class"
                },
                "fullDescription": {
                  "text": "Reports duplicate characters inside a RegExp character class. Duplicate characters are unnecessary and can be removed without changing the semantics of the regex. Example: '[aabc]' After the quick-fix is applied: '[abc]'",
                  "markdown": "Reports duplicate characters inside a RegExp character class. Duplicate characters are unnecessary and can be removed without changing the semantics of the regex.\n\n**Example:**\n\n\n      [aabc]\n\nAfter the quick-fix is applied:\n\n\n      [abc]\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonSchemaRefReference",
                "shortDescription": {
                  "text": "Unresolved '$ref' and '$schema' references"
                },
                "fullDescription": {
                  "text": "Reports an unresolved '$ref' or '$schema' path in a JSON schema.",
                  "markdown": "Reports an unresolved `$ref` or `$schema` path in a JSON schema.  "
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlUnknownBooleanAttribute",
                "shortDescription": {
                  "text": "Incorrect boolean attribute"
                },
                "fullDescription": {
                  "text": "Reports an HTML non-boolean attribute without a value. Suggests configuring attributes that should not be reported.",
                  "markdown": "Reports an HTML non-boolean attribute without a value. Suggests configuring attributes that should not be reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlInvalidId",
                "shortDescription": {
                  "text": "Unresolved 'id' reference"
                },
                "fullDescription": {
                  "text": "Reports an unresolved 'id' reference in XML.",
                  "markdown": "Reports an unresolved `id` reference in XML."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlUnboundNsPrefix",
                "shortDescription": {
                  "text": "Unbound namespace prefix"
                },
                "fullDescription": {
                  "text": "Reports an unbound namespace prefix in XML.",
                  "markdown": "Reports an unbound namespace prefix in XML."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RequiredAttributes",
                "shortDescription": {
                  "text": "Missing required attribute"
                },
                "fullDescription": {
                  "text": "Reports a missing mandatory attribute in an XML/HTML tag. Suggests configuring attributes that should not be reported.",
                  "markdown": "Reports a missing mandatory attribute in an XML/HTML tag. Suggests configuring attributes that should not be reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DuplicatedCode",
                "shortDescription": {
                  "text": "Duplicated code fragment"
                },
                "fullDescription": {
                  "text": "Reports duplicated blocks of code from the selected scope: the same file or the entire project. The inspection features quick-fixes that help you to set the size of detected duplicates, navigate to repetitive code fragments, and compare them in a tool window. The inspection options allow you to select the scope of the reported duplicated fragments and set the initial size for the duplicated language constructs. You can also configure the constructs that you want to anonymize in File | Settings | Editor | Duplicates.",
                  "markdown": "Reports duplicated blocks of code from the selected scope: the same file or the entire project. The inspection features quick-fixes that help you to set the size of detected duplicates, navigate to repetitive code fragments, and compare them in a tool window. The inspection options allow you to select the scope of the reported duplicated fragments and set the initial size for the duplicated language constructs. You can also configure the constructs that you want to anonymize in [File \\| Settings \\| Editor \\| Duplicates](settings://duplicates.index)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InconsistentLineSeparators",
                "shortDescription": {
                  "text": "Inconsistent line separators"
                },
                "fullDescription": {
                  "text": "Reports files with line separators different from the ones that are specified in the project's settings. For example, the inspection will be triggered if you set the line separator to '\\n' in Settings | Editor | Code Style | Line separator, while the file you are editing uses '\\r\\n' as a line separator. The inspection also warns you about mixed line separators within a file.",
                  "markdown": "Reports files with line separators different from the ones that are specified in the project's settings.\n\nFor example, the inspection will be triggered if you set the line separator to `\\n` in **Settings \\| Editor \\| Code Style \\| Line separator** ,\nwhile the file you are editing uses `\\r\\n` as a line separator.\n\nThe inspection also warns you about mixed line separators within a file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantSuppression",
                "shortDescription": {
                  "text": "Redundant suppression"
                },
                "fullDescription": {
                  "text": "Reports usages of the following elements that can be safely removed because the inspection they affect is no longer applicable in this context: '@SuppressWarning' annotation, or '// noinspection' line comment, or '/** noinspection */' JavaDoc comment Example: 'public class C {\n // symbol is already private,\n // but annotation is still around\n  @SuppressWarnings({\"WeakerAccess\"})\n private boolean CONST = true;\n void f() {\n    CONST = false;\n  }\n}'",
                  "markdown": "Reports usages of the following elements that can be safely removed because the inspection they affect is no longer applicable in this context:\n\n* `@SuppressWarning` annotation, or\n* `// noinspection` line comment, or\n* `/** noinspection */` JavaDoc comment\n\nExample:\n\n\n    public class C {\n     // symbol is already private,\n     // but annotation is still around\n      @SuppressWarnings({\"WeakerAccess\"})\n     private boolean CONST = true;\n     void f() {\n        CONST = false;\n      }\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ProblematicWhitespace",
                "shortDescription": {
                  "text": "Problematic whitespace"
                },
                "fullDescription": {
                  "text": "Reports the following problems: Tabs used for indentation when the code style is configured to use only spaces. Spaces used for indentation when the code style is configured to use only tabs. Spaces used for indentation and tabs used for alignment when the code style is configured to use smart tabs.",
                  "markdown": "Reports the following problems:\n\n* Tabs used for indentation when the code style is configured to use only spaces.\n* Spaces used for indentation when the code style is configured to use only tabs.\n* Spaces used for indentation and tabs used for alignment when the code style is configured to use smart tabs."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlUnknownTarget",
                "shortDescription": {
                  "text": "Unresolved file in a link"
                },
                "fullDescription": {
                  "text": "Reports an unresolved file in a link.",
                  "markdown": "Reports an unresolved file in a link."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SSBasedInspection",
                "shortDescription": {
                  "text": "Structural search inspection"
                },
                "fullDescription": {
                  "text": "Allows configuring Structural Search/Structural Replace templates that you can apply to the file you are editing. All matches will be highlighted and marked with the template name that you have configured. If you configure the Structural Replace pattern as well, the corresponding replace option will be available as a quick-fix.",
                  "markdown": "Allows configuring **Structural Search/Structural Replace** templates that you can apply to the file you are editing.\n\nAll matches will be highlighted and marked with the template name that you have configured.\nIf you configure the **Structural Replace** pattern as well, the corresponding replace option will be available as a quick-fix."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Structural search",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LongLine",
                "shortDescription": {
                  "text": "The line is longer than allowed by code style"
                },
                "fullDescription": {
                  "text": "Reports lines that are longer than the right margin parameter specified in the Code Style settings.",
                  "markdown": "Reports lines that are longer than the **right margin** parameter specified in the **Code Style** settings."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlUnusedNamespaceDeclaration",
                "shortDescription": {
                  "text": "Unused schema declaration"
                },
                "fullDescription": {
                  "text": "Reports an unused namespace declaration or location hint in XML.",
                  "markdown": "Reports an unused namespace declaration or location hint in XML."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlWrongRootElement",
                "shortDescription": {
                  "text": "Wrong root element"
                },
                "fullDescription": {
                  "text": "Reports a root tag name different from the name specified in the '<doctype>' tag.",
                  "markdown": "Reports a root tag name different from the name specified in the `<doctype>` tag."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpEmptyAlternationBranch",
                "shortDescription": {
                  "text": "Empty branch in alternation"
                },
                "fullDescription": {
                  "text": "Reports empty branches in a RegExp alternation. An empty branch will only match the empty string, and in most cases that is not what is desired. This inspection will not report a single empty branch at the start or the end of an alternation. Example: '(alpha||bravo)' After the quick-fix is applied: '(alpha|bravo)' New in 2017.2",
                  "markdown": "Reports empty branches in a RegExp alternation. An empty branch will only match the empty string, and in most cases that is not what is desired. This inspection will not report a single empty branch at the start or the end of an alternation.\n\n**Example:**\n\n\n      (alpha||bravo)\n\nAfter the quick-fix is applied:\n\n\n      (alpha|bravo)\n\nNew in 2017.2"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonPathEvaluateUnknownKey",
                "shortDescription": {
                  "text": "Unknown property key used for JSONPath evaluate expression"
                },
                "fullDescription": {
                  "text": "Reports a key in a JSONPath expression that is missing in the source JSON document to evaluate.",
                  "markdown": "Reports a key in a JSONPath expression that is missing in the source JSON document to evaluate."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckValidXmlInScriptTagBody",
                "shortDescription": {
                  "text": "Malformed content of 'script' tag"
                },
                "fullDescription": {
                  "text": "Reports invalid XML contents of a 'script' tag.",
                  "markdown": "Reports invalid XML contents of a `script` tag.  "
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Annotator",
                "shortDescription": {
                  "text": "Annotator"
                },
                "fullDescription": {
                  "text": "Reports problems that are found by language annotators in the result of a batch code inspection run.",
                  "markdown": "Reports problems that are found by language annotators in the result of a batch code inspection run."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlPathReference",
                "shortDescription": {
                  "text": "Unresolved file reference"
                },
                "fullDescription": {
                  "text": "Reports an unresolved file reference in XML.",
                  "markdown": "Reports an unresolved file reference in XML."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpSingleCharAlternation",
                "shortDescription": {
                  "text": "Single character alternation"
                },
                "fullDescription": {
                  "text": "Reports single char alternation in a RegExp. It is simpler to use a character class instead. This may also provide better matching performance. Example: 'a|b|c|d' After the quick-fix is applied: '[abcd]' New in 2017.1",
                  "markdown": "Reports single char alternation in a RegExp. It is simpler to use a character class instead. This may also provide better matching performance.\n\n**Example:**\n\n\n      a|b|c|d\n\nAfter the quick-fix is applied:\n\n\n      [abcd]\n\n\nNew in 2017.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpUnnecessaryNonCapturingGroup",
                "shortDescription": {
                  "text": "Unnecessary non-capturing group"
                },
                "fullDescription": {
                  "text": "Reports unnecessary non-capturing groups, which have no influence on the match result. Example: 'Everybody be cool, (?:this) is a robbery!' After the quick-fix is applied: 'Everybody be cool, this is a robbery!' New in 2021.1",
                  "markdown": "Reports unnecessary non-capturing groups, which have no influence on the match result.\n\n**Example:**\n\n\n      Everybody be cool, (?:this) is a robbery!\n\nAfter the quick-fix is applied:\n\n\n      Everybody be cool, this is a robbery!\n\nNew in 2021.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TodoComment",
                "shortDescription": {
                  "text": "TODO comment"
                },
                "fullDescription": {
                  "text": "Reports TODO comments in your code. You can configure the format for TODO comments in Settings | Editor | TODO. Since syntax highlighting for TODO comments is already provided, this inspection is efficient if you run it in the batch mode.",
                  "markdown": "Reports **TODO** comments in your code.\n\nYou can configure the format for **TODO** comments in [Settings \\| Editor \\| TODO](settings://preferences.toDoOptions). Since\nsyntax highlighting for **TODO** comments is already provided, this inspection is efficient if you run it in the batch mode."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlUnknownAttribute",
                "shortDescription": {
                  "text": "Unknown attribute"
                },
                "fullDescription": {
                  "text": "Reports an unknown HTML attribute. Suggests configuring attributes that should not be reported.",
                  "markdown": "Reports an unknown HTML attribute. Suggests configuring attributes that should not be reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckTagEmptyBody",
                "shortDescription": {
                  "text": "Empty element content"
                },
                "fullDescription": {
                  "text": "Reports an element with empty contents.",
                  "markdown": "Reports an element with empty contents."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpRedundantEscape",
                "shortDescription": {
                  "text": "Redundant character escape"
                },
                "fullDescription": {
                  "text": "Reports character escapes that are replaceable with the unescaped character without a change in meaning. Note that inside the square brackets of a character class, many escapes are unnecessary that would be necessary outside of a character class. Example: '\\-\\;[\\.]' After the quick-fix is applied: '-;[.]' New in 2017.3",
                  "markdown": "Reports character escapes that are replaceable with the unescaped character without a change in meaning. Note that inside the square brackets of a character class, many escapes are unnecessary that would be necessary outside of a character class.\n\n**Example:**\n\n\n      \\-\\;[\\.]\n\nAfter the quick-fix is applied:\n\n\n      -;[.]\n\nNew in 2017.3"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Json5StandardCompliance",
                "shortDescription": {
                  "text": "Compliance with JSON5 standard"
                },
                "fullDescription": {
                  "text": "Reports inconsistency with the language specification in a JSON5 file.",
                  "markdown": "Reports inconsistency with [the language specification](http://json5.org) in a JSON5 file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonDuplicatePropertyKeys",
                "shortDescription": {
                  "text": "Duplicate keys in object literals"
                },
                "fullDescription": {
                  "text": "Reports a duplicate key in an object literal.",
                  "markdown": "Reports a duplicate key in an object literal."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnresolvedReference",
                "shortDescription": {
                  "text": "Unresolved reference"
                },
                "fullDescription": {
                  "text": "Reports an unresolved reference to a named pattern ('define') in RELAX-NG files that use XML syntax. Suggests creating the referenced 'define' element.",
                  "markdown": "Reports an unresolved reference to a named pattern (`define`) in RELAX-NG files that use XML syntax. Suggests creating the referenced `define` element."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RELAX NG",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonPathUnknownFunction",
                "shortDescription": {
                  "text": "Unknown JSONPath function"
                },
                "fullDescription": {
                  "text": "Reports an unknown name in a JSONPath function call instead of known standard function names: 'concat', 'keys', 'length', 'min', 'max', 'avg', 'stddev', 'sum'.",
                  "markdown": "Reports an unknown name in a JSONPath function call instead of known standard function names: `concat`, `keys`, `length`, `min`, `max`, `avg`, `stddev`, `sum`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlMissingClosingTag",
                "shortDescription": {
                  "text": "Missing closing tag"
                },
                "fullDescription": {
                  "text": "Reports an HTML element without a closing tag. Some coding styles require that HTML elements have closing tags even where this is optional. Example: '<html>\n    <body>\n      <p>Behold!\n    </body>\n  </html>' After the quick-fix is applied: '<html>\n    <body>\n      <p>Behold!</p>\n    </body>\n  </html>'",
                  "markdown": "Reports an HTML element without a closing tag. Some coding styles require that HTML elements have closing tags even where this is optional.\n\n**Example:**\n\n\n      <html>\n        <body>\n          <p>Behold!\n        </body>\n      </html>\n\nAfter the quick-fix is applied:\n\n\n      <html>\n        <body>\n          <p>Behold!</p>\n        </body>\n      </html>\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpRedundantNestedCharacterClass",
                "shortDescription": {
                  "text": "Redundant nested character class"
                },
                "fullDescription": {
                  "text": "Reports unnecessary nested character classes. Example: '[a-c[x-z]]' After the quick-fix is applied: '[a-cx-z]' New in 2020.2",
                  "markdown": "Reports unnecessary nested character classes.\n\n**Example:**\n\n\n      [a-c[x-z]]\n\nAfter the quick-fix is applied:\n\n\n      [a-cx-z]\n\nNew in 2020.2"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlDeprecatedElement",
                "shortDescription": {
                  "text": "Deprecated symbol"
                },
                "fullDescription": {
                  "text": "Reports a deprecated XML element or attribute. Symbols can be marked by XML comment or documentation tag with text 'deprecated'.",
                  "markdown": "Reports a deprecated XML element or attribute.\n\nSymbols can be marked by XML comment or documentation tag with text 'deprecated'."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlDefaultAttributeValue",
                "shortDescription": {
                  "text": "Redundant attribute with default value"
                },
                "fullDescription": {
                  "text": "Reports a redundant assignment of the default value to an XML attribute.",
                  "markdown": "Reports a redundant assignment of the default value to an XML attribute."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlExtraClosingTag",
                "shortDescription": {
                  "text": "Redundant closing tag"
                },
                "fullDescription": {
                  "text": "Reports a redundant closing tag for an empty element, for example, 'img' or 'br'. Example: '<html>\n    <body>\n      <br></br>\n    </body>\n  </html>' After the quick-fix is applied: '<html>\n    <body>\n      <br>\n    </body>\n  </html>'",
                  "markdown": "Reports a redundant closing tag for an empty element, for example, `img` or `br`.\n\n**Example:**\n\n\n      <html>\n        <body>\n          <br></br>\n        </body>\n      </html>\n\nAfter the quick-fix is applied:\n\n\n      <html>\n        <body>\n          <br>\n        </body>\n      </html>\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpOctalEscape",
                "shortDescription": {
                  "text": "Octal escape"
                },
                "fullDescription": {
                  "text": "Reports octal escapes, which are easily confused with back references. Use hexadecimal escapes to avoid confusion. Example: '\\07' After the quick-fix is applied: '\\x07' New in 2017.1",
                  "markdown": "Reports octal escapes, which are easily confused with back references. Use hexadecimal escapes to avoid confusion.\n\n**Example:**\n\n\n      \\07\n\nAfter the quick-fix is applied:\n\n\n      \\x07\n\nNew in 2017.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedDefine",
                "shortDescription": {
                  "text": "Unused define"
                },
                "fullDescription": {
                  "text": "Reports an unused named pattern ('define') in a RELAX-NG file (XML or Compact Syntax). 'define' elements that are used through an include in another file are ignored.",
                  "markdown": "Reports an unused named pattern (`define`) in a RELAX-NG file (XML or Compact Syntax). `define` elements that are used through an include in another file are ignored."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RELAX NG",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlUnknownAnchorTarget",
                "shortDescription": {
                  "text": "Unresolved fragment in a link"
                },
                "fullDescription": {
                  "text": "Reports an unresolved last part of an URL after the '#' sign.",
                  "markdown": "Reports an unresolved last part of an URL after the `#` sign."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonSchemaCompliance",
                "shortDescription": {
                  "text": "Compliance with JSON schema"
                },
                "fullDescription": {
                  "text": "Reports inconsistence between a JSON file and the JSON schema that is assigned to it.",
                  "markdown": "Reports inconsistence between a JSON file and the [JSON schema](https://json-schema.org) that is assigned to it.  "
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpUnexpectedAnchor",
                "shortDescription": {
                  "text": "Begin or end anchor in unexpected position"
                },
                "fullDescription": {
                  "text": "Reports '^' or '\\A' anchors not at the beginning of the pattern and '$', '\\Z' or '\\z' anchors not at the end of the pattern. In the wrong position these RegExp anchors prevent the pattern from matching anything. In case of the '^' and '$' anchors, most likely the literal character was meant and the escape forgotten. Example: '(Price $10)' New in 2018.1",
                  "markdown": "Reports `^` or `\\A` anchors not at the beginning of the pattern and `$`, `\\Z` or `\\z` anchors not at the end of the pattern. In the wrong position these RegExp anchors prevent the pattern from matching anything. In case of the `^` and `$` anchors, most likely the literal character was meant and the escape forgotten.\n\n**Example:**\n\n\n      (Price $10)\n\n\nNew in 2018.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SyntaxError",
                "shortDescription": {
                  "text": "Syntax error"
                },
                "fullDescription": {
                  "text": "Reports syntax errors that have been found in the result of a batch code inspection run.",
                  "markdown": "Reports syntax errors that have been found in the result of a batch code inspection run."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpAnonymousGroup",
                "shortDescription": {
                  "text": "Anonymous capturing group or numeric back reference"
                },
                "fullDescription": {
                  "text": "Reports anonymous capturing groups and numeric back references in a RegExp. These are only reported when the RegExp dialect supports named group and named group references. Named groups and named back references improve code readability and are recommended to use instead. When a capture is not needed, matching can be more performant and use less memory by using a non-capturing group, i.e. '(?:xxx)' instead of '(xxx)'. Example: '(\\d\\d\\d\\d)\\1' A better regex pattern could look like this: '(?<quad>\\d\\d\\d\\d)\\k<quad>' New in 2017.2",
                  "markdown": "Reports anonymous capturing groups and numeric back references in a RegExp. These are only reported when the RegExp dialect supports named group and named group references. Named groups and named back references improve code readability and are recommended to use instead. When a capture is not needed, matching can be more performant and use less memory by using a non-capturing group, i.e. `(?:xxx)` instead of `(xxx)`.\n\n**Example:**\n\n\n      (\\d\\d\\d\\d)\\1\n\nA better regex pattern could look like this:\n\n\n      (?<quad>\\d\\d\\d\\d)\\k<quad>\n\nNew in 2017.2"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckDtdRefs",
                "shortDescription": {
                  "text": "Unresolved DTD reference"
                },
                "fullDescription": {
                  "text": "Reports inconsistency in a DTD-specific reference, for example, in a reference to an XML entity or to a DTD element declaration. Works in DTD an XML files.",
                  "markdown": "Reports inconsistency in a DTD-specific reference, for example, in a reference to an XML entity or to a DTD element declaration. Works in DTD an XML files."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpellCheckingInspection",
                "shortDescription": {
                  "text": "Typo"
                },
                "fullDescription": {
                  "text": "Reports typos and misspellings in your code, comments, and literals and fixes them with one click.",
                  "markdown": "Reports typos and misspellings in your code, comments, and literals and fixes them with one click."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "TYPO",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Proofreading",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckXmlFileWithXercesValidator",
                "shortDescription": {
                  "text": "Failed external validation"
                },
                "fullDescription": {
                  "text": "Reports a discrepancy in an XML file with the specified DTD or schema detected by the Xerces validator.",
                  "markdown": "Reports a discrepancy in an XML file with the specified DTD or schema detected by the Xerces validator."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NonAsciiCharacters",
                "shortDescription": {
                  "text": "Non-ASCII characters"
                },
                "fullDescription": {
                  "text": "Reports code elements that uses non-ASCII symbols in an unusual context. Example: Non-ASCII characters used in identifiers, strings, or comments. Identifiers written in different languages, such as 'myCollection' with the letter 'C' written in Cyrillic. Comments or strings containing Unicode symbols, such as long dashes and arrows.",
                  "markdown": "Reports code elements that uses non-ASCII symbols in an unusual context.\n\nExample:\n\n* Non-ASCII characters used in identifiers, strings, or comments.\n* Identifiers written in different languages, such as `my`**C**`ollection` with the letter **C** written in Cyrillic.\n* Comments or strings containing Unicode symbols, such as long dashes and arrows."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Internationalization",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlUnknownTag",
                "shortDescription": {
                  "text": "Unknown tag"
                },
                "fullDescription": {
                  "text": "Reports an unknown HTML tag. Suggests configuring tags that should not be reported.",
                  "markdown": "Reports an unknown HTML tag. Suggests configuring tags that should not be reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LossyEncoding",
                "shortDescription": {
                  "text": "Lossy encoding"
                },
                "fullDescription": {
                  "text": "Reports characters that cannot be displayed because of the current document encoding. Examples: If you type international characters in a document with the US-ASCII charset, some characters will be lost on save. If you load a UTF-8-encoded file using the ISO-8859-1 one-byte charset, some characters will be displayed incorrectly. You can fix this by changing the file encoding either by specifying the encoding directly in the file, e.g. by editing 'encoding=' attribute in the XML prolog of XML file, or by changing the corresponding options in Settings | Editor | File Encodings.",
                  "markdown": "Reports characters that cannot be displayed because of the current document encoding.\n\nExamples:\n\n* If you type international characters in a document with the **US-ASCII** charset, some characters will be lost on save.\n* If you load a **UTF-8** -encoded file using the **ISO-8859-1** one-byte charset, some characters will be displayed incorrectly.\n\nYou can fix this by changing the file encoding\neither by specifying the encoding directly in the file, e.g. by editing `encoding=` attribute in the XML prolog of XML file,\nor by changing the corresponding options in **Settings \\| Editor \\| File Encodings**."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Internationalization",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpEscapedMetaCharacter",
                "shortDescription": {
                  "text": "Escaped meta character"
                },
                "fullDescription": {
                  "text": "Reports escaped meta characters. Some RegExp coding styles specify that meta characters should be placed inside a character class, to make the regular expression easier to understand. This inspection does not warn about the meta character '[', ']' and '^', because those would need additional escaping inside a character class. Example: '\\d+\\.\\d+' After the quick-fix is applied: '\\d+[.]\\d+' New in 2017.1",
                  "markdown": "Reports escaped meta characters. Some RegExp coding styles specify that meta characters should be placed inside a character class, to make the regular expression easier to understand. This inspection does not warn about the meta character `[`, `]` and `^`, because those would need additional escaping inside a character class.\n\n**Example:**\n\n\n      \\d+\\.\\d+\n\nAfter the quick-fix is applied:\n\n\n      \\d+[.]\\d+\n\nNew in 2017.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpRepeatedSpace",
                "shortDescription": {
                  "text": "Consecutive spaces"
                },
                "fullDescription": {
                  "text": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier. Example: '(     )' After the quick-fix is applied: '( {5})' New in 2017.1",
                  "markdown": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpDuplicateAlternationBranch",
                "shortDescription": {
                  "text": "Duplicate branch in alternation"
                },
                "fullDescription": {
                  "text": "Reports duplicate branches in a RegExp alternation. Duplicate branches slow down matching and obscure the intent of the expression. Example: '(alpha|bravo|charlie|alpha)' After the quick-fix is applied: '(alpha|bravo|charlie)' New in 2017.1",
                  "markdown": "Reports duplicate branches in a RegExp alternation. Duplicate branches slow down matching and obscure the intent of the expression.\n\n**Example:**\n\n\n      (alpha|bravo|charlie|alpha)\n\nAfter the quick-fix is applied:\n\n\n      (alpha|bravo|charlie)\n\nNew in 2017.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IgnoreFileDuplicateEntry",
                "shortDescription": {
                  "text": "Ignore file duplicates"
                },
                "fullDescription": {
                  "text": "Reports duplicate entries (patters) in the ignore file (e.g. .gitignore, .hgignore). Duplicate entries in these files are redundant and can be removed. Example:     # Output directories\n    /out/\n    /target/\n    /out/",
                  "markdown": "Reports duplicate entries (patters) in the ignore file (e.g. .gitignore, .hgignore). Duplicate entries in these files are redundant and can be removed.\n\nExample:\n\n```\n    # Output directories\n    /out/\n    /target/\n    /out/\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Version control",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonStandardCompliance",
                "shortDescription": {
                  "text": "Compliance with JSON standard"
                },
                "fullDescription": {
                  "text": "Reports the following discrepancies of a JSON file with the language specification: A line or block comment (configurable). Multiple top-level values (expect for JSON Lines files, configurable for others). A trailing comma in an object or array (configurable). A single quoted string. A property key is a not a double quoted strings. A NaN or Infinity/-Infinity numeric value as a floating point literal (configurable).",
                  "markdown": "Reports the following discrepancies of a JSON file with [the language specification](https://tools.ietf.org/html/rfc7159):\n\n* A line or block comment (configurable).\n* Multiple top-level values (expect for JSON Lines files, configurable for others).\n* A trailing comma in an object or array (configurable).\n* A single quoted string.\n* A property key is a not a double quoted strings.\n* A NaN or Infinity/-Infinity numeric value as a floating point literal (configurable)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckEmptyScriptTag",
                "shortDescription": {
                  "text": "Empty tag"
                },
                "fullDescription": {
                  "text": "Reports an empty tag (such as 'script') that does not work in some browsers.",
                  "markdown": "Reports an empty tag (such as `script`) that does not work in some browsers."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonPathUnknownOperator",
                "shortDescription": {
                  "text": "Unknown JSONPath operator"
                },
                "fullDescription": {
                  "text": "Reports an unknown operator on a JSONPath expression instead of one of the standard ones: 'in', 'nin', 'subsetof', 'anyof', 'noneof', 'size', 'empty', 'contains'.",
                  "markdown": "Reports an unknown operator on a JSONPath expression instead of one of the standard ones: `in`, `nin`, `subsetof`, `anyof`, `noneof`, `size`, `empty`, `contains`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.properties",
            "version": "213.7331",
            "rules": [
              {
                "id": "DuplicatePropertyInspection",
                "shortDescription": {
                  "text": "Duplicate property"
                },
                "fullDescription": {
                  "text": "Reports duplicate property keys with different values, duplicate keys, or duplicate property values. Example: 'property1=value;\nproperty2=value;' The Options list allows selecting the area in which the inspection should search for duplicates.",
                  "markdown": "Reports duplicate property keys with different values, duplicate keys, or duplicate property values.\n\nExample:\n\n\n    property1=value;\n    property2=value;\n\nThe **Options** list allows selecting the area in which the inspection should search for duplicates."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseEllipsisInPropertyInspection",
                "shortDescription": {
                  "text": "Three dot characters instead of the ellipsis"
                },
                "fullDescription": {
                  "text": "Reports three \"dot\" characters which are used instead of the ellipsis character for UTF-8 properties files.",
                  "markdown": "Reports three \"dot\" characters which are used instead of the ellipsis character for UTF-8 properties files."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AlphaUnsortedPropertiesFile",
                "shortDescription": {
                  "text": "Properties file or resource bundle is alphabetically unsorted"
                },
                "fullDescription": {
                  "text": "Reports alphabetically unsorted resource bundles or .properties files.",
                  "markdown": "Reports alphabetically unsorted resource bundles or .properties files."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFO",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TrailingSpacesInProperty",
                "shortDescription": {
                  "text": "Trailing spaces in property"
                },
                "fullDescription": {
                  "text": "Reports all properties whose keys or values end with a whitespace.",
                  "markdown": "Reports all properties whose keys or values end with a whitespace.   "
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedProperty",
                "shortDescription": {
                  "text": "Unused property"
                },
                "fullDescription": {
                  "text": "Reports all properties that are not referenced from the outside of the .properties file.",
                  "markdown": "Reports all properties that are not referenced from the outside of the .properties file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "WrongPropertyKeyValueDelimiter",
                "shortDescription": {
                  "text": "Property key/value delimiter doesn't match code style settings"
                },
                "fullDescription": {
                  "text": "Reports properties in which key or value delimiters do not match code style settings.",
                  "markdown": "Reports properties in which key or value delimiters do not match code style settings."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.intellij.intelliLang",
            "version": "213.7331",
            "rules": [
              {
                "id": "InjectedReferences",
                "shortDescription": {
                  "text": "Injected references"
                },
                "fullDescription": {
                  "text": "Reports unresolved references injected by Language Injections. Example:     @Language(\"file-reference\")\n    String fileName = \"/home/user/nonexistent.file\"; // highlighted if file doesn't exist",
                  "markdown": "Reports unresolved references injected by [Language Injections](https://www.jetbrains.com/help/idea/using-language-injections.html).\n\nExample:\n\n```\n    @Language(\"file-reference\")\n    String fileName = \"/home/user/nonexistent.file\"; // highlighted if file doesn't exist\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.intellij.plugins.staticAnalysis",
            "version": "213.7331",
            "rules": [
              {
                "id": "QodanaServiceMessage",
                "shortDescription": {
                  "text": "Qodana service message"
                },
                "fullDescription": {
                  "text": "Reports the Qodana service messages such as suspending a particular inspection due to a large number of reported problems.",
                  "markdown": "Reports the Qodana service messages such as suspending a particular inspection due to a large number of reported problems."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          }
        ]
      },
      "invocations": [
        {
          "exitCode": 0,
          "toolExecutionNotifications": [
            {
              "message": {
                "text": "Reporting from [\"An invalid interpreter\"] 'sanity' inspections was suspended due to high problems count."
              },
              "level": "error"
            }
          ],
          "executionSuccessful": true
        }
      ],
      "language": "en-US",
      "versionControlProvenance": [
        {
          "repositoryUri": "https://github.com/School-Simplified/Timmy-SchoolSimplified",
          "revisionId": "82f06a266144b6dcb7698d03ae1cd4cf233199e1",
          "branch": "beta",
          "properties": {
            "lastAuthorName": "pandabear189",
            "vcsType": "Git",
            "lastAuthorEmail": "88685021+pandabear189@users.noreply.github.com",
            "tags": [
              "lastAuthorEmail",
              "lastAuthorName",
              "vcsType"
            ]
          }
        }
      ],
      "results": [
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'creds' might be referenced before assignment",
            "markdown": "Local variable 'creds' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 322,
                  "startColumn": 16,
                  "charOffset": 10667,
                  "charLength": 5,
                  "snippet": {
                    "text": "creds"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 320,
                  "startColumn": 1,
                  "charOffset": 10634,
                  "charLength": 40,
                  "snippet": {
                    "text": "            pass\n\n        return creds\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6921938191bf8ee3c430c00f18adada97827f5f85bfdd633fc0d76fbcb3872d0"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'datetime' might be referenced before assignment",
            "markdown": "Local variable 'datetime' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/database.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 296,
                  "startColumn": 38,
                  "charOffset": 7171,
                  "charLength": 8,
                  "snippet": {
                    "text": "datetime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 294,
                  "startColumn": 1,
                  "charOffset": 7094,
                  "charLength": 94,
                  "snippet": {
                    "text": "    content = TextField(default=\"N/A\")\n\n    datetime = DateTimeField(default=datetime.now())\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7acaa9ddabf56edf2859c700686b603e64b0004fc0590f9da6acc76ac3ce4a03"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'value' might be referenced before assignment",
            "markdown": "Local variable 'value' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 12,
                  "charOffset": 588,
                  "charLength": 5,
                  "snippet": {
                    "text": "value"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 30,
                  "startColumn": 1,
                  "charOffset": 543,
                  "charLength": 94,
                  "snippet": {
                    "text": "        value = time\n    finally:\n        if value < 60:\n            return None\n        else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5c14b59ee554e57b80982e2b850c8d6a6f4d2d6f28ff55d98abb12c2bfc4f8cc"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'embed' might be referenced before assignment",
            "markdown": "Local variable 'embed' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 773,
                  "startColumn": 42,
                  "charOffset": 30877,
                  "charLength": 5,
                  "snippet": {
                    "text": "embed"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 771,
                  "startColumn": 1,
                  "charOffset": 30789,
                  "charLength": 143,
                  "snippet": {
                    "text": "                    )\n                finally:\n                    await ctx.send(embed=embed)\n        else:\n            embed = discord.Embed("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "53ccee76d9a8061edfb951a7593e6156f3d9f7450a3f9d1bd8d0a57d6d2f9806"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'embed' might be referenced before assignment",
            "markdown": "Local variable 'embed' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 996,
                  "startColumn": 46,
                  "charOffset": 40685,
                  "charLength": 5,
                  "snippet": {
                    "text": "embed"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 994,
                  "startColumn": 1,
                  "charOffset": 40585,
                  "charLength": 163,
                  "snippet": {
                    "text": "                        )\n                    finally:\n                        await ctx.send(embed=embed)\n            else:\n                embed = discord.Embed("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "74e4b1a734e4388880433f7b4d0e445d538936b854ea57a29eea13df01ed365e"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'embed' might be referenced before assignment",
            "markdown": "Local variable 'embed' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1184,
                  "startColumn": 46,
                  "charOffset": 49296,
                  "charLength": 5,
                  "snippet": {
                    "text": "embed"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1182,
                  "startColumn": 1,
                  "charOffset": 49196,
                  "charLength": 125,
                  "snippet": {
                    "text": "                        )\n                    finally:\n                        await ctx.send(embed=embed)\n\n            else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "eddf12ce21f678adb98a488d61292129d172c52f3aac6763a66c8564462b14bc"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'embed' might be referenced before assignment",
            "markdown": "Local variable 'embed' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1359,
                  "startColumn": 46,
                  "charOffset": 58017,
                  "charLength": 5,
                  "snippet": {
                    "text": "embed"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1357,
                  "startColumn": 1,
                  "charOffset": 57917,
                  "charLength": 163,
                  "snippet": {
                    "text": "                        )\n                    finally:\n                        await ctx.send(embed=embed)\n            else:\n                embed = discord.Embed("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "84bcb3c1f798d3639c3e3dd5e99dce78cd48f35029052d5da79b9b66c8c9c177"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'embed' might be referenced before assignment",
            "markdown": "Local variable 'embed' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1485,
                  "startColumn": 46,
                  "charOffset": 64024,
                  "charLength": 5,
                  "snippet": {
                    "text": "embed"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1483,
                  "startColumn": 1,
                  "charOffset": 63924,
                  "charLength": 163,
                  "snippet": {
                    "text": "                        )\n                    finally:\n                        await ctx.send(embed=embed)\n            else:\n                embed = discord.Embed("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a838e66d7fd2014487aafcafa3d6daa8e6e87f27ae40a11e97d4e1e38ee9a0ce"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'embed' might be referenced before assignment",
            "markdown": "Local variable 'embed' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1566,
                  "startColumn": 46,
                  "charOffset": 67780,
                  "charLength": 5,
                  "snippet": {
                    "text": "embed"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1564,
                  "startColumn": 1,
                  "charOffset": 67680,
                  "charLength": 163,
                  "snippet": {
                    "text": "                        )\n                    finally:\n                        await ctx.send(embed=embed)\n            else:\n                embed = discord.Embed("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "23f0394725ead2362b0de0629bd9034908ca56bdabee1d9cac16e44d53af115f"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'value' might be referenced before assignment",
            "markdown": "Local variable 'value' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 12,
                  "charOffset": 487,
                  "charLength": 5,
                  "snippet": {
                    "text": "value"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 20,
                  "startColumn": 1,
                  "charOffset": 442,
                  "charLength": 94,
                  "snippet": {
                    "text": "        value = time\n    finally:\n        if value < 60:\n            return None\n        else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "947cfb31fa0567ee40ea479e139912baf6f14bf5e95a794e06eeac581ac19bdb"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'value' might be referenced before assignment",
            "markdown": "Local variable 'value' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 12,
                  "charOffset": 936,
                  "charLength": 5,
                  "snippet": {
                    "text": "value"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 38,
                  "startColumn": 1,
                  "charOffset": 891,
                  "charLength": 94,
                  "snippet": {
                    "text": "        value = time\n    finally:\n        if value < 60:\n            return None\n        else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d56d9985c08170a3414871b4f3619df40d18a631c32f8360b2014fcaf1f1601a"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'query' might be referenced before assignment",
            "markdown": "Local variable 'query' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 13,
                  "charOffset": 2285,
                  "charLength": 5,
                  "snippet": {
                    "text": "query"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 79,
                  "startColumn": 1,
                  "charOffset": 2245,
                  "charLength": 99,
                  "snippet": {
                    "text": "        )\n        if renew:\n            query.delete_instance()\n\n        await member.move_to(None)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5fee0a5031bbfafcb7d43cd3f55679fffcff40bfe91931d0db6ce2d4ea30762f"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'query' might be referenced before assignment",
            "markdown": "Local variable 'query' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 9,
                  "charOffset": 2770,
                  "charLength": 5,
                  "snippet": {
                    "text": "query"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 99,
                  "startColumn": 1,
                  "charOffset": 2716,
                  "charLength": 128,
                  "snippet": {
                    "text": "        await addLeaderboardProgress(member)\n\n        query.goal = goal\n        query.RenewalTime = renewal\n        query.save()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8abfeeaee9f0a740636df79bdd309019ec15be4bad6b29ef8b14538ab2fa3c38"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'msg' might be referenced before assignment",
            "markdown": "Local variable 'msg' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 12,
                  "charOffset": 4600,
                  "charLength": 3,
                  "snippet": {
                    "text": "msg"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 157,
                  "startColumn": 1,
                  "charOffset": 4543,
                  "charLength": 87,
                  "snippet": {
                    "text": "    if response == None:\n        msg = S3_URL\n    return msg, transcript_file, S3_URL\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d9751557c4211b14c1ce8419815858118eaad06a2c3c0e1394869396a67da2e4"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeHintsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
            "markdown": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 17,
                  "charOffset": 4496,
                  "charLength": 221,
                  "snippet": {
                    "text": "\"Motivation\", \"Weekly Puzzle\", \"Opportunities\", \"Dai..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 144,
                  "startColumn": 1,
                  "charOffset": 4429,
                  "charLength": 146,
                  "snippet": {
                    "text": "            bot: Timmy,\n            task: Literal[\n                \"Motivation\",\n                \"Weekly Puzzle\",\n                \"Opportunities\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e0ec80e3ee3b59d2772649fb3fa621ebfb71476225a74654e612d50f0f252e31"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeHintsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
            "markdown": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 38,
                  "charOffset": 4951,
                  "charLength": 32,
                  "snippet": {
                    "text": "\"complete\", \"incomplete\", \"busy\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 159,
                  "startColumn": 1,
                  "charOffset": 4881,
                  "charLength": 146,
                  "snippet": {
                    "text": "        )\n        self.bot = bot\n        self.value: Optional[Literal[\"complete\", \"incomplete\", \"busy\"]] = \"incomplete\"\n        self._task = task\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "93321a1c3f22d618d995970021196bec224795e895355f34d86d70a00a55e3eb"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeHintsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
            "markdown": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 17,
                  "charOffset": 5565,
                  "charLength": 221,
                  "snippet": {
                    "text": "\"Motivation\", \"Weekly Puzzle\", \"Opportunities\", \"Dai..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 177,
                  "startColumn": 1,
                  "charOffset": 5498,
                  "charLength": 146,
                  "snippet": {
                    "text": "            bot: Timmy,\n            task: Literal[\n                \"Motivation\",\n                \"Weekly Puzzle\",\n                \"Opportunities\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "47c5c1cab419578bd09e38dd81a157bf0d017052b7f126fc60b8dd8e26c348ce"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeHintsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
            "markdown": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 194,
                  "startColumn": 38,
                  "charOffset": 6028,
                  "charLength": 32,
                  "snippet": {
                    "text": "\"complete\", \"incomplete\", \"busy\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 192,
                  "startColumn": 1,
                  "charOffset": 5958,
                  "charLength": 146,
                  "snippet": {
                    "text": "        )\n        self.bot = bot\n        self.value: Optional[Literal[\"complete\", \"incomplete\", \"busy\"]] = \"incomplete\"\n        self._task = task\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "216fbf50d4b6e76725a7d92befdf284fb8e865ce6256821a9080a60728506f84"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeHintsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
            "markdown": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 218,
                  "startColumn": 17,
                  "charOffset": 6855,
                  "charLength": 221,
                  "snippet": {
                    "text": "\"Motivation\", \"Weekly Puzzle\", \"Opportunities\", \"Dai..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 216,
                  "startColumn": 1,
                  "charOffset": 6788,
                  "charLength": 146,
                  "snippet": {
                    "text": "            bot: Timmy,\n            task: Literal[\n                \"Motivation\",\n                \"Weekly Puzzle\",\n                \"Opportunities\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "17d6348a380830088c1e0ed0c89e3c23f1ea73b8d55d7d5e79bc1523c87d18a8"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeHintsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
            "markdown": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/gh_modals.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 5,
                  "charOffset": 294,
                  "charLength": 24,
                  "snippet": {
                    "text": "\"ISSUE\", \"FEEDBACK\","
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 11,
                  "startColumn": 1,
                  "charOffset": 200,
                  "charLength": 120,
                  "snippet": {
                    "text": "QuestionListType = List[Dict[str, Union[bool, str, None]]]\nGithubActionLiteral = Literal[\n    \"ISSUE\",\n    \"FEEDBACK\",\n]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "857921c155ea98ef7956e90b1a015259ec831eaa0689f0e99eb31eea9a141792"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeHintsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
            "markdown": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/gh_modals.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 31,
                  "charOffset": 351,
                  "charLength": 57,
                  "snippet": {
                    "text": "\"Command\", \"Slash Command\", \"Dropdown or Button\", \"Other\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 14,
                  "startColumn": 1,
                  "charOffset": 303,
                  "charLength": 125,
                  "snippet": {
                    "text": "    \"FEEDBACK\",\n]\nIssueFeatureLiteral = Literal[\"Command\", \"Slash Command\", \"Dropdown or Button\", \"Other\"]\n\nif TYPE_CHECKING:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "49aab9bcff67e3ab5151d4797f83644b70063239e039c8ae084ac5730527f3bb"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeHintsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
            "markdown": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 352,
                  "startColumn": 23,
                  "charOffset": 12210,
                  "charLength": 27,
                  "snippet": {
                    "text": "\"debate\", \"count\", \"ticket\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 350,
                  "startColumn": 1,
                  "charOffset": 12116,
                  "charLength": 150,
                  "snippet": {
                    "text": "        interaction: discord.Interaction,\n        user: discord.Member,\n        role: Literal[\"debate\", \"count\", \"ticket\"],\n        reason: str\n    ):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5c22fe8a09b77294b047befed3b6d96b7e7df2c7f0defc357924791db07a9d65"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeHintsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
            "markdown": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 326,
                  "startColumn": 23,
                  "charOffset": 10243,
                  "charLength": 10,
                  "snippet": {
                    "text": "\"-a\", \"-c\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 324,
                  "startColumn": 1,
                  "charOffset": 10165,
                  "charLength": 149,
                  "snippet": {
                    "text": "        self,\n        interaction: discord.Interaction,\n        mode: Literal[\"-a\", \"-c\"] = \"-a\",\n        sync_commands: bool = False,\n    ) -> None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6bc1f25d95384912ef65f28d3bf97c9aa4ce801eaae47ecd02d75e41afa28ed5"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeHintsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
            "markdown": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/GSuiteCreation.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 35,
                  "charOffset": 3508,
                  "charLength": 34,
                  "snippet": {
                    "text": "\"Personal Account\", \"Team Account\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 129,
                  "startColumn": 1,
                  "charOffset": 3427,
                  "charLength": 210,
                  "snippet": {
                    "text": "        firstname: str,\n        lastname: str,\n        organizationunit: Literal[\"Personal Account\", \"Team Account\"],\n    ):\n        HR_Role = discord.utils.get(interaction.user.guild.roles, id=HRID.r_hr_staff)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cc4023802762356b601726c11432afdc1d13b47d0607fa22b22c16fec7767250"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeHintsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
            "markdown": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/github_commands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 5,
                  "charOffset": 542,
                  "charLength": 8,
                  "snippet": {
                    "text": "\"ISSUE\","
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 1,
                  "charOffset": 448,
                  "charLength": 193,
                  "snippet": {
                    "text": "QuestionListType = List[Dict[str, Union[bool, str, None]]]\nGithubActionLiteral = Literal[\n    \"ISSUE\",\n]\nIssueFeatureLiteral = Literal[\"Command\", \"Slash Command\", \"Dropdown or Button\", \"Other\"]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "08ed872f7543f55329d7dc93a757d4ef244c925ecb6db280c1b66b0cc1a76a13"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeHintsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
            "markdown": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/github_commands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 31,
                  "charOffset": 583,
                  "charLength": 57,
                  "snippet": {
                    "text": "\"Command\", \"Slash Command\", \"Dropdown or Button\", \"Other\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 23,
                  "startColumn": 1,
                  "charOffset": 538,
                  "charLength": 105,
                  "snippet": {
                    "text": "    \"ISSUE\",\n]\nIssueFeatureLiteral = Literal[\"Command\", \"Slash Command\", \"Dropdown or Button\", \"Other\"]\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2c73a89e78885f83ef754d421e68e58cd85a083ec79e581d613f1b972db02026"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeHintsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
            "markdown": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/techCommissions.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 65,
                  "charOffset": 6184,
                  "charLength": 7,
                  "snippet": {
                    "text": "\"close\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 173,
                  "startColumn": 1,
                  "charOffset": 6010,
                  "charLength": 273,
                  "snippet": {
                    "text": "    @app_commands.checks.cooldown(1, 300, key=lambda i: (i.guild_id, i.channel.id))\n    async def commission(\n        self, interaction: discord.Interaction, action: Literal[\"close\"]\n    ):\n        channel: discord.TextChannel = self.bot.get_channel(TechID.ch_bot_requests)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d4ccfe5d592a657ef11fe84279d83c920641a2a5271d94cfb583659fca0a1aa2"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeHintsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
            "markdown": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/commands_manager.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 60,
                  "charOffset": 430,
                  "charLength": 8,
                  "snippet": {
                    "text": "\"global\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 16,
                  "startColumn": 1,
                  "charOffset": 333,
                  "charLength": 175,
                  "snippet": {
                    "text": "    @is_botAdmin4\n    async def sync(\n        self, ctx: commands.Context, action: Union[Literal[\"global\"], discord.Guild]\n    ):\n        if isinstance(action, discord.Guild):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c2e803ec3bb1ddcc21181a44d8e3e946908c2c3cd119ee09ad9c9d51178c6f09"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeHintsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
            "markdown": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/Tutor.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 206,
                  "startColumn": 23,
                  "charOffset": 7843,
                  "charLength": 10,
                  "snippet": {
                    "text": "\"AM\", \"PM\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 204,
                  "startColumn": 1,
                  "charOffset": 7783,
                  "charLength": 128,
                  "snippet": {
                    "text": "        date: str,\n        time: str,\n        ampm: Literal[\"AM\", \"PM\"],\n        student: discord.Member,\n        repeats: bool,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2fb51fb657858fd6dcf2d2d564dce8e6857fbda52c6479c6e7174aa786b0c25e"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeHintsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
            "markdown": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/Tutor.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 338,
                  "startColumn": 23,
                  "charOffset": 12522,
                  "charLength": 10,
                  "snippet": {
                    "text": "\"AM\", \"PM\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 336,
                  "startColumn": 1,
                  "charOffset": 12462,
                  "charLength": 117,
                  "snippet": {
                    "text": "        date: str,\n        time: str,\n        ampm: Literal[\"AM\", \"PM\"],\n        student: str,\n        repeats: bool,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8f8b155863afd41abf1b4d7b57ffce7ca09247f5f5f29fa78917097e195ce681"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeHintsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
            "markdown": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudentEngadgement/cogs/set.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 5,
                  "charOffset": 478,
                  "charLength": 154,
                  "snippet": {
                    "text": "\"Book\", \"Movie\", \"TV Show\", \"Meme\", \"Pickup Line\", \"Puzzle\", \"Daily Question..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 17,
                  "startColumn": 1,
                  "charOffset": 388,
                  "charLength": 125,
                  "snippet": {
                    "text": "QuestionLiteral = List[Dict[str, Union[str, bool, None]]]\nMediaLiteralType = Literal[\n    \"Book\",\n    \"Movie\",\n    \"TV Show\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c722398b13ddd35407f8a8f2606b5ea8f994dcb1cd802c70eb84829cc270c1b7"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeHintsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
            "markdown": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudentEngadgement/cogs/schedule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 5,
                  "charOffset": 314,
                  "charLength": 149,
                  "snippet": {
                    "text": "\"Motivation\", \"Weekly Puzzle\", \"Opportunities\", \"Daily Question\", \"Media Recommendat..."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 14,
                  "startColumn": 1,
                  "charOffset": 286,
                  "charLength": 83,
                  "snippet": {
                    "text": "\nTaskLiteral = Literal[\n    \"Motivation\",\n    \"Weekly Puzzle\",\n    \"Opportunities\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d88e44449e738cf1fc6858d0c3433d5efca9e796661b3bb714a35619d5c6ae0e"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeHintsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
            "markdown": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudentEngadgement/cogs/schedule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 39,
                  "charOffset": 608,
                  "charLength": 20,
                  "snippet": {
                    "text": "\"_type\", \"_schedule\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 27,
                  "startColumn": 1,
                  "charOffset": 504,
                  "charLength": 227,
                  "snippet": {
                    "text": "    def __init__(self, bot: Timmy):\n        self._schedule: Dict[\n            TaskLiteral, Dict[Literal[\"_type\", \"_schedule\"], Union[str, List[Union[Literal[\"rachel\", \"ignore\"], int]]]]\n        ] = {\n            \"Motivation\": {"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "61df23e9959959166faadcbafd5a5f1e6a4d182816d0daf6e2c39298f5c0ec11"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeHintsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
            "markdown": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudentEngadgement/cogs/schedule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 92,
                  "charOffset": 661,
                  "charLength": 18,
                  "snippet": {
                    "text": "\"rachel\", \"ignore\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 27,
                  "startColumn": 1,
                  "charOffset": 504,
                  "charLength": 227,
                  "snippet": {
                    "text": "    def __init__(self, bot: Timmy):\n        self._schedule: Dict[\n            TaskLiteral, Dict[Literal[\"_type\", \"_schedule\"], Union[str, List[Union[Literal[\"rachel\", \"ignore\"], int]]]]\n        ] = {\n            \"Motivation\": {"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "276734d2c9b0121ba64053b290b687f9a6e812fc80c7b597dfc106bd5992435b"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeHintsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
            "markdown": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudentEngadgement/cogs/schedule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 33,
                  "charOffset": 5161,
                  "charLength": 20,
                  "snippet": {
                    "text": "\"_type\", \"_schedule\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 147,
                  "startColumn": 1,
                  "charOffset": 5089,
                  "charLength": 246,
                  "snippet": {
                    "text": "            self,\n            day: int,\n            dict_: Dict[Literal[\"_type\", \"_schedule\"], Union[str, List[Union[Literal[\"rachel\", \"ignore\"], int]]]]\n    ) -> Union[int, Literal[\"rachel\", \"ignore\"]]:\n        schedule_list = dict_[\"_schedule\"]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "721c68e89ae0e20c4ce83c2264ce05c13f94c089402c3550e6ef2c1087b08ec4"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeHintsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
            "markdown": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudentEngadgement/cogs/schedule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 86,
                  "charOffset": 5214,
                  "charLength": 18,
                  "snippet": {
                    "text": "\"rachel\", \"ignore\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 147,
                  "startColumn": 1,
                  "charOffset": 5089,
                  "charLength": 246,
                  "snippet": {
                    "text": "            self,\n            day: int,\n            dict_: Dict[Literal[\"_type\", \"_schedule\"], Union[str, List[Union[Literal[\"rachel\", \"ignore\"], int]]]]\n    ) -> Union[int, Literal[\"rachel\", \"ignore\"]]:\n        schedule_list = dict_[\"_schedule\"]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3e3575e693b14101d4bd93e554a19a72366f4cf1ada5d7c2f01ec41673ebe418"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeHintsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
            "markdown": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudentEngadgement/cogs/schedule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 29,
                  "charOffset": 5271,
                  "charLength": 18,
                  "snippet": {
                    "text": "\"rachel\", \"ignore\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 148,
                  "startColumn": 1,
                  "charOffset": 5107,
                  "charLength": 266,
                  "snippet": {
                    "text": "            day: int,\n            dict_: Dict[Literal[\"_type\", \"_schedule\"], Union[str, List[Union[Literal[\"rachel\", \"ignore\"], int]]]]\n    ) -> Union[int, Literal[\"rachel\", \"ignore\"]]:\n        schedule_list = dict_[\"_schedule\"]\n        return schedule_list[day - 1]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c34a80e7c49b1b53effa08019df54868d0636a0d90129eb20c5d1e8b5a03db94"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyIncorrectDocstringInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Missing parameter r_id in docstring",
            "markdown": "Missing parameter r_id in docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 30,
                  "charOffset": 2795,
                  "charLength": 9,
                  "snippet": {
                    "text": "r_id: str"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 102,
                  "startColumn": 1,
                  "charOffset": 2741,
                  "charLength": 114,
                  "snippet": {
                    "text": "        return ListData\n\n    def fetch_redirect(self, r_id: str) -> RedirectPizza:\n        \"\"\"Fetches a redirect.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "443bdd6f5c715bc8eb03de5338cad1ba50952fb92e506c7a9e908f31d92be972"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyIncorrectDocstringInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Unexpected parameter url_code in docstring",
            "markdown": "Unexpected parameter url_code in docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 13,
                  "charOffset": 2882,
                  "charLength": 8,
                  "snippet": {
                    "text": "url_code"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 106,
                  "startColumn": 1,
                  "charOffset": 2855,
                  "charLength": 139,
                  "snippet": {
                    "text": "\n        Args:\n            url_code (str): The URL code to fetch.\n            domain (str, optional): The domain to use. Defaults to None.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1ee15a421bd96e43b5ba215b737da6d06aa97e87a6a3c04ccb65a80805470c61"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyIncorrectDocstringInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Unexpected parameter domain in docstring",
            "markdown": "Unexpected parameter domain in docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 13,
                  "charOffset": 2933,
                  "charLength": 6,
                  "snippet": {
                    "text": "domain"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 107,
                  "startColumn": 1,
                  "charOffset": 2856,
                  "charLength": 154,
                  "snippet": {
                    "text": "        Args:\n            url_code (str): The URL code to fetch.\n            domain (str, optional): The domain to use. Defaults to None.\n\n        Raises:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1670cba6db29a5411393862ca2aa1ff09720dbfd6b7d74def8e705264a256ef9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyIncorrectDocstringInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Missing parameter r_id in docstring",
            "markdown": "Missing parameter r_id in docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 190,
                  "startColumn": 28,
                  "charOffset": 5552,
                  "charLength": 9,
                  "snippet": {
                    "text": "r_id: str"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 188,
                  "startColumn": 1,
                  "charOffset": 5514,
                  "charLength": 108,
                  "snippet": {
                    "text": "        )\n\n    def del_redirect(self, r_id: str) -> typing.Union[dict, int]:\n        \"\"\"Deletes a redirect.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f11738b060af1475894ea6fbcf769a511601690fc13a5590ef9333041a36617b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyIncorrectDocstringInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Unexpected parameter redirect_url in docstring",
            "markdown": "Unexpected parameter redirect_url in docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 194,
                  "startColumn": 13,
                  "charOffset": 5649,
                  "charLength": 12,
                  "snippet": {
                    "text": "redirect_url"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 192,
                  "startColumn": 1,
                  "charOffset": 5622,
                  "charLength": 139,
                  "snippet": {
                    "text": "\n        Args:\n            redirect_url (str): The URL to delete.\n            domain (str, optional): The domain to use. Defaults to None.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7283d95843cc395c50038e9be9ba4e2558c2b44eddceea5c310468cac30cbdba"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyIncorrectDocstringInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Unexpected parameter domain in docstring",
            "markdown": "Unexpected parameter domain in docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 195,
                  "startColumn": 13,
                  "charOffset": 5700,
                  "charLength": 6,
                  "snippet": {
                    "text": "domain"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 193,
                  "startColumn": 1,
                  "charOffset": 5623,
                  "charLength": 154,
                  "snippet": {
                    "text": "        Args:\n            redirect_url (str): The URL to delete.\n            domain (str, optional): The domain to use. Defaults to None.\n\n        Raises:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "291979bb8f5c5473a45901f0852f9711315a86784f154e3ee002b80180cc0fd2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyIncorrectDocstringInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Missing parameter self in docstring",
            "markdown": "Missing parameter self in docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 16,
                  "charOffset": 4646,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 160,
                  "startColumn": 1,
                  "charOffset": 4629,
                  "charLength": 148,
                  "snippet": {
                    "text": "\n\ndef decodeDict(self, value: str, sandbox: bool = False) -> typing.Union[str, int]:\n    \"\"\"Returns the true value of a dict output and pair value.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fa3ff86d5c25216d9b0140920b2fec86d6d207343c965712d3d133b11d901b2c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyIncorrectDocstringInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Missing parameter sandbox in docstring",
            "markdown": "Missing parameter sandbox in docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 34,
                  "charOffset": 4664,
                  "charLength": 21,
                  "snippet": {
                    "text": "sandbox: bool = False"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 160,
                  "startColumn": 1,
                  "charOffset": 4629,
                  "charLength": 148,
                  "snippet": {
                    "text": "\n\ndef decodeDict(self, value: str, sandbox: bool = False) -> typing.Union[str, int]:\n    \"\"\"Returns the true value of a dict output and pair value.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a49e147e53d5c7039987c6159dca256b6b80d3d5b8f00232f790e5a2c913ee4d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyIncorrectDocstringInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Missing parameter sandbox in docstring",
            "markdown": "Missing parameter sandbox in docstring"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 59,
                  "charOffset": 8753,
                  "charLength": 21,
                  "snippet": {
                    "text": "sandbox: bool = False"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 278,
                  "startColumn": 1,
                  "charOffset": 8681,
                  "charLength": 152,
                  "snippet": {
                    "text": "\ndef getRole(\n    guild: discord.Guild, mainSubject: str, subject: str, sandbox: bool = False\n) -> discord.Role:\n    \"\"\"Returns the role of the subject."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3593cf1fd814475e9031e1e7ec0b46cb27ae248df1764764df33731476ba7d79"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyComparisonWithNoneInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Comparison with None performed with equality operators",
            "markdown": "Comparison with None performed with equality operators"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 12,
                  "charOffset": 3380,
                  "charLength": 18,
                  "snippet": {
                    "text": "lobbyStart == None"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 127,
                  "startColumn": 1,
                  "charOffset": 3235,
                  "charLength": 268,
                  "snippet": {
                    "text": "        print(self.LobbyStartIDs[member.guild.id])\n        lobbyStart = member.guild.get_channel(self.LobbyStartIDs[member.guild.id])\n        if lobbyStart == None:\n            try:\n                lobbyStart = self.bot.get_channel(self.LobbyStartIDs[member.guild.id])"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "af1375a51bacfcdddf06338ca8f206a18f7ab56aa2dbf956e449b2e0a3f50afd"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyComparisonWithNoneInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Comparison with None performed with equality operators",
            "markdown": "Comparison with None performed with equality operators"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 8,
                  "charOffset": 4045,
                  "charLength": 16,
                  "snippet": {
                    "text": "response != None"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 137,
                  "startColumn": 1,
                  "charOffset": 3979,
                  "charLength": 162,
                  "snippet": {
                    "text": "    embed.add_field(name=\"Transcript Link\", value=S3_URL)\n\n    if response != None:\n        msg = await response.send(embed=embed)\n    if responsesauthor != None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6fd3e5e0fdc30e447f36327be0b4fef80e43222573f0173372ae289c514c98c5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyComparisonWithNoneInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Comparison with None performed with equality operators",
            "markdown": "Comparison with None performed with equality operators"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 8,
                  "charOffset": 4117,
                  "charLength": 23,
                  "snippet": {
                    "text": "responsesauthor != None"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 139,
                  "startColumn": 1,
                  "charOffset": 4038,
                  "charLength": 160,
                  "snippet": {
                    "text": "    if response != None:\n        msg = await response.send(embed=embed)\n    if responsesauthor != None:\n        for UAuthor in responsesauthor:\n            try:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "241de6a08a7efb3a82bbacbd9ff49208f2f6c4a010fdb1b09ab3d6fefc08fa58"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyComparisonWithNoneInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Comparison with None performed with equality operators",
            "markdown": "Comparison with None performed with equality operators"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 8,
                  "charOffset": 4550,
                  "charLength": 16,
                  "snippet": {
                    "text": "response == None"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 155,
                  "startColumn": 1,
                  "charOffset": 4529,
                  "charLength": 99,
                  "snippet": {
                    "text": "        pass\n\n    if response == None:\n        msg = S3_URL\n    return msg, transcript_file, S3_URL"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9a9be9972425dc1fb99b7fae12021fc0dda80a000f453a60f6ec319cc5d9dd0c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'is_paginating' may be 'static'",
            "markdown": "Method `is_paginating` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 501,
                  "startColumn": 9,
                  "charOffset": 17382,
                  "charLength": 13,
                  "snippet": {
                    "text": "is_paginating"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 499,
                  "startColumn": 1,
                  "charOffset": 17332,
                  "charLength": 165,
                  "snippet": {
                    "text": "\nclass FrontPageSource(menus.PageSource):\n    def is_paginating(self) -> bool:\n        # This forces the buttons to appear even in the front page\n        return True"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1df508d237f92e1a8124c638cc116434a1cb5c79697801fb9bdc92d021be62ea"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'get_max_pages' may be 'static'",
            "markdown": "Method `get_max_pages` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 505,
                  "startColumn": 9,
                  "charOffset": 17507,
                  "charLength": 13,
                  "snippet": {
                    "text": "get_max_pages"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 503,
                  "startColumn": 1,
                  "charOffset": 17478,
                  "charLength": 184,
                  "snippet": {
                    "text": "        return True\n\n    def get_max_pages(self) -> Optional[int]:\n        # There's only one actual page in the front page\n        # However we need at least 2 to show all the buttons"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bc246ac4d75d9d23f8c5a2e6db2b5f0f1282bdbeec8e38364f4ce31a9ab5fbeb"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method '_filter_commands' may be 'static'",
            "markdown": "Method `_filter_commands` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 566,
                  "startColumn": 15,
                  "charOffset": 19635,
                  "charLength": 16,
                  "snippet": {
                    "text": "_filter_commands"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 564,
                  "startColumn": 1,
                  "charOffset": 19597,
                  "charLength": 106,
                  "snippet": {
                    "text": "        self.bot = bot\n\n    async def _filter_commands(\n        self,\n        _commands: CommandsListType,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cea39ba6b52774173b620a55e72a7d1c4bb3b26932749890a87327cb57b84144"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'interaction_check' may be 'static'",
            "markdown": "Method `interaction_check` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudentEngadgement/cogs/set.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 15,
                  "charOffset": 1256,
                  "charLength": 17,
                  "snippet": {
                    "text": "interaction_check"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 54,
                  "startColumn": 1,
                  "charOffset": 1187,
                  "charLength": 215,
                  "snippet": {
                    "text": "        return self.bot.get_cog(\"Student Engagement\")\n\n    async def interaction_check(self, interaction: discord.Interaction) -> bool:\n        return interaction.user.id in [752984497259151370, 747126643587416174]\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9e0fedee52caab12f844b7209e9905f4171e6fdc65f4484d4dd7d445bab37291"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'cog_load' may be 'static'",
            "markdown": "Method `cog_load` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudentEngadgement/cogs/set.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 402,
                  "startColumn": 15,
                  "charOffset": 14515,
                  "charLength": 8,
                  "snippet": {
                    "text": "cog_load"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 400,
                  "startColumn": 1,
                  "charOffset": 14466,
                  "charLength": 169,
                  "snippet": {
                    "text": "        return Emoji.turtle_smirk\n\n    async def cog_load(self) -> None:\n        for item in database.ResponseSpamBlacklist:\n            blacklist.append(item.discordID)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "942374b5123d7d7901acaa6d42fe50f0034caad8ba1990abee2701784263eed7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method '_get_user_id' may be 'static'",
            "markdown": "Method `_get_user_id` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudentEngadgement/cogs/schedule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 9,
                  "charOffset": 5075,
                  "charLength": 12,
                  "snippet": {
                    "text": "_get_user_id"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 144,
                  "startColumn": 1,
                  "charOffset": 4953,
                  "charLength": 175,
                  "snippet": {
                    "text": "        await self._dm_member(embed=embed, user_id=self._get_user_id(day=day, dict_=dict_), _type=\"Daily Laugh\")\n\n    def _get_user_id(\n            self,\n            day: int,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4a22f8404c4ded761bcfb022471d2cbbbc6dcffb4cb429293ce61ac159a7bb37"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'interaction_check' may be 'static'",
            "markdown": "Method `interaction_check` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "main.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 15,
                  "charOffset": 1291,
                  "charLength": 17,
                  "snippet": {
                    "text": "interaction_check"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 49,
                  "startColumn": 1,
                  "charOffset": 1253,
                  "charLength": 230,
                  "snippet": {
                    "text": "        self.bot = bot\n\n    async def interaction_check(self, interaction: discord.Interaction, /) -> bool:\n        blacklisted_users = [p.discordID for p in database.Blacklist]\n        if interaction.user.id in blacklisted_users:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "eeac45a0420ec7c784ce1542661ec2928ffbd0b60f774927590a3a441c79ab6e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'before_invoke' may be 'static'",
            "markdown": "Method `before_invoke` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "main.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 15,
                  "charOffset": 2708,
                  "charLength": 13,
                  "snippet": {
                    "text": "before_invoke"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 90,
                  "startColumn": 1,
                  "charOffset": 2643,
                  "charLength": 143,
                  "snippet": {
                    "text": "        await on_command_error_(self, ctx, error)\n\n    async def before_invoke(self, ctx: commands.Context):\n        await before_invoke_(ctx)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "019b21d7f1e94c42c5daa0ba58d353eb14c06d67857c5ddf22492d1139b77790"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'check' may be 'static'",
            "markdown": "Method `check` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "main.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 15,
                  "charOffset": 2801,
                  "charLength": 5,
                  "snippet": {
                    "text": "check"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 93,
                  "startColumn": 1,
                  "charOffset": 2752,
                  "charLength": 121,
                  "snippet": {
                    "text": "        await before_invoke_(ctx)\n\n    async def check(self, ctx: commands.Context):\n        await main_mode_check_(ctx)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7ed2aebb11bdbe01c53f511d60013297fd3c83690e2f7618a66001b509d722fe"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'setup_hook' may be 'static'",
            "markdown": "Method `setup_hook` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "main.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 15,
                  "charOffset": 2888,
                  "charLength": 10,
                  "snippet": {
                    "text": "setup_hook"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 96,
                  "startColumn": 1,
                  "charOffset": 2837,
                  "charLength": 139,
                  "snippet": {
                    "text": "        await main_mode_check_(ctx)\n\n    async def setup_hook(self) -> None:\n        with alive_bar(\n                len(get_extensions()),"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5fa31cf860ad0f41449a4b84901388632c63046d03a52cd48d63819590dc2988"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'ctx' value is not used",
            "markdown": "Parameter 'ctx' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/checks.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 21,
                  "charOffset": 3044,
                  "charLength": 3,
                  "snippet": {
                    "text": "ctx"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 117,
                  "startColumn": 1,
                  "charOffset": 3022,
                  "charLength": 115,
                  "snippet": {
                    "text": "\n\ndef timmy_beta_host(ctx):\n    runPath = os.path.realpath(__file__)\n    runDir = re.search(\"/home/[^/]*\", runPath)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fc08b8007d2a000432f94f40d4f2c3705507ca6aeb3b634b1704a43c357d56b7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'response' value is not used",
            "markdown": "Local variable 'response' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 350,
                  "startColumn": 9,
                  "charOffset": 11398,
                  "charLength": 8,
                  "snippet": {
                    "text": "response"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 348,
                  "startColumn": 1,
                  "charOffset": 11375,
                  "charLength": 99,
                  "snippet": {
                    "text": "    )\n    try:\n        response = s3_client.upload_file(\n            file_name,\n            bucket,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f1e84d75e9561ea959094783befef16190c5b341902059fa71499bbe563922ff"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1273,
                  "startColumn": 9,
                  "charOffset": 56707,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1271,
                  "startColumn": 1,
                  "charOffset": 56643,
                  "charLength": 165,
                  "snippet": {
                    "text": "        self,\n        interaction: discord.Interaction,\n        button: discord.ui.Button,\n    ):\n        transcript_log = self.bot.get_channel(TechID.ch_ticket_log)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "135cd6b65073597042f0cffd5f02ccdbbf56c84bb25680808864cc83b9b5fe28"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1282,
                  "startColumn": 62,
                  "charOffset": 57100,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1280,
                  "startColumn": 1,
                  "charOffset": 56957,
                  "charLength": 312,
                  "snippet": {
                    "text": "\n    @discord.ui.button(label=\"Cancel\", style=discord.ButtonStyle.red, emoji=\"❌\")\n    async def cancel(self, interaction: discord.Interaction, button: discord.ui.Button):\n        await interaction.message.delete()\n        await interaction.response.send_message( \"ok, not removing this channel.\", ephemeral=True)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3b1fa405d4e9965cc97dc83023deb95d77a806c4d45beac8cd1fc6d28626f4dd"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1296,
                  "startColumn": 60,
                  "charOffset": 57647,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1294,
                  "startColumn": 1,
                  "charOffset": 57471,
                  "charLength": 287,
                  "snippet": {
                    "text": "\n    @discord.ui.button(label=\"Lock\", style=discord.ButtonStyle.green, custom_id=\"persistent_view:lock\", emoji=\"🔒\")\n    async def lock(self, interaction: discord.Interaction, button: discord.ui.Button):\n        self.value = True\n        ch = self.bot.get_channel(interaction.channel_id)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "afeb85f1a4b5b0dde0306e037d3285ede05f6c9f465e922fb14454b20e554ea5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'interaction' value is not used",
            "markdown": "Parameter 'interaction' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1315,
                  "startColumn": 25,
                  "charOffset": 58270,
                  "charLength": 32,
                  "snippet": {
                    "text": "interaction: discord.Interaction"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1313,
                  "startColumn": 1,
                  "charOffset": 58208,
                  "charLength": 150,
                  "snippet": {
                    "text": "        emoji=Emoji.gsuite_logo\n    )\n    async def lock(self,interaction: discord.Interaction, button: discord.ui.Button):\n        self.value = True\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1f3ccca264000cc0f5c1b08b149939e82553df288c07f8454cd307e3ea432abd"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1315,
                  "startColumn": 59,
                  "charOffset": 58304,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1313,
                  "startColumn": 1,
                  "charOffset": 58208,
                  "charLength": 150,
                  "snippet": {
                    "text": "        emoji=Emoji.gsuite_logo\n    )\n    async def lock(self,interaction: discord.Interaction, button: discord.ui.Button):\n        self.value = True\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3e79eac46b7a89a47bb3b6cd894d9c77754993bcdbf873cd1898b8c78a687072"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'interaction' value is not used",
            "markdown": "Parameter 'interaction' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1330,
                  "startColumn": 29,
                  "charOffset": 58666,
                  "charLength": 32,
                  "snippet": {
                    "text": "interaction: discord.Interaction"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1328,
                  "startColumn": 1,
                  "charOffset": 58583,
                  "charLength": 191,
                  "snippet": {
                    "text": "        custom_id=\"persistent_view:tempconfirm\",\n    )\n    async def confirm(self, interaction: discord.Interaction, button: discord.ui.Button,):\n        self.value = True\n        self.stop()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3217c2552a599a98465b65ad5ef4c010ba0fd603ce4caa93683c72676ef878ae"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1330,
                  "startColumn": 63,
                  "charOffset": 58700,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1328,
                  "startColumn": 1,
                  "charOffset": 58583,
                  "charLength": 191,
                  "snippet": {
                    "text": "        custom_id=\"persistent_view:tempconfirm\",\n    )\n    async def confirm(self, interaction: discord.Interaction, button: discord.ui.Button,):\n        self.value = True\n        self.stop()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "73e4e37afb26eb48f7cb879b25858262e0221d23b352647c78a6a50b0a329222"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1335,
                  "startColumn": 62,
                  "charOffset": 58918,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1333,
                  "startColumn": 1,
                  "charOffset": 58775,
                  "charLength": 275,
                  "snippet": {
                    "text": "\n    @discord.ui.button(label=\"Cancel\", style=discord.ButtonStyle.red, emoji=\"❌\")\n    async def cancel(self, interaction: discord.Interaction, button: discord.ui.Button):\n        await interaction.response.send_message(\"Cancelling\", ephemeral=True)\n        self.value = False"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a5161aab8734f536f988385fa28cc727259e78d8c32883774ead8ab94341bac9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1351,
                  "startColumn": 61,
                  "charOffset": 59393,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1349,
                  "startColumn": 1,
                  "charOffset": 59280,
                  "charLength": 206,
                  "snippet": {
                    "text": "        custom_id=\"persistent_view:nitrofake\",\n    )\n    async def claim(self, interaction: discord.Interaction, button: discord.ui.Button):\n        try:\n            await interaction.response.send_message("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bab82f32a599a405f9f999c9fe5edda266a42c87f44e6a862a95f9ec26cf6bfc"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1381,
                  "startColumn": 60,
                  "charOffset": 60645,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1379,
                  "startColumn": 1,
                  "charOffset": 60560,
                  "charLength": 196,
                  "snippet": {
                    "text": "        emoji=\"🔒\",\n    )\n    async def lock(self, interaction: discord.Interaction, button: discord.ui.Button):\n        self.value = True\n        ch = self.bot.get_channel(interaction.channel_id)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c060df281e2723013a2e6ccba1d381bcccbadc6d1583d3844770d6ffc1f6cf4f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'interaction' value is not used",
            "markdown": "Parameter 'interaction' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1400,
                  "startColumn": 29,
                  "charOffset": 61217,
                  "charLength": 32,
                  "snippet": {
                    "text": "interaction: discord.Interaction"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1398,
                  "startColumn": 1,
                  "charOffset": 61134,
                  "charLength": 191,
                  "snippet": {
                    "text": "        custom_id=\"persistent_view:tempconfirm\",\n    )\n    async def confirm(self, interaction: discord.Interaction, button: discord.ui.Button,):\n        self.value = True\n        self.stop()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5e76ff1f11266e248aa4c9734b2cbea8a1589a6c0c4898d659214143ade2f1a5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1400,
                  "startColumn": 63,
                  "charOffset": 61251,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1398,
                  "startColumn": 1,
                  "charOffset": 61134,
                  "charLength": 191,
                  "snippet": {
                    "text": "        custom_id=\"persistent_view:tempconfirm\",\n    )\n    async def confirm(self, interaction: discord.Interaction, button: discord.ui.Button,):\n        self.value = True\n        self.stop()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ea819d7b461eeb2f67a36e1d759a4f8060ae0105cf22f3b78dac83c452defab3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1405,
                  "startColumn": 62,
                  "charOffset": 61469,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1403,
                  "startColumn": 1,
                  "charOffset": 61326,
                  "charLength": 275,
                  "snippet": {
                    "text": "\n    @discord.ui.button(label=\"Cancel\", style=discord.ButtonStyle.red, emoji=\"❌\")\n    async def cancel(self, interaction: discord.Interaction, button: discord.ui.Button):\n        await interaction.response.send_message(\"Cancelling\", ephemeral=True)\n        self.value = False"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "145efcc62573da643c1850475066c4721547bc37beee1146eabfdbea2621268e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'result' value is not used",
            "markdown": "Local variable 'result' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1471,
                  "startColumn": 9,
                  "charOffset": 63948,
                  "charLength": 6,
                  "snippet": {
                    "text": "result"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1469,
                  "startColumn": 1,
                  "charOffset": 63893,
                  "charLength": 143,
                  "snippet": {
                    "text": "    msg = await ctx.send(embed=embed)\n    try:\n        result = subprocess.run(\n            f\"cd && cd {main_or_beta}\",\n            shell=True,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "26ebb5f98763e4d96376b8550f219009347ecbb9c3e0fb39c50974390635311a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'request_id' value is not used",
            "markdown": "Parameter 'request_id' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/docsapi.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 14,
                  "charOffset": 498,
                  "charLength": 10,
                  "snippet": {
                    "text": "request_id"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 17,
                  "startColumn": 1,
                  "charOffset": 483,
                  "charLength": 91,
                  "snippet": {
                    "text": "\n\ndef callback(request_id, response, exception):\n    if exception:\n        print(exception)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2a2161ad778362948c1608a4f5d7ec371635f67f94314c4a5ec7d1f7572b08e4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'result' value is not used",
            "markdown": "Local variable 'result' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/docsapi.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 5,
                  "charOffset": 3330,
                  "charLength": 6,
                  "snippet": {
                    "text": "result"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 116,
                  "startColumn": 1,
                  "charOffset": 3319,
                  "charLength": 134,
                  "snippet": {
                    "text": "    ]\n\n    result = (\n        drive_service.documents()\n        .batchUpdate(documentId=document_copy_id, body={\"requests\": requests})"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "280b4cf2f7c380a76a652aa5bdc44998bad28b89583ec3553e6f92ff73d3b050"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'exc' value is not used",
            "markdown": "Parameter 'exc' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/database.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 746,
                  "startColumn": 15,
                  "charOffset": 16638,
                  "charLength": 3,
                  "snippet": {
                    "text": "exc"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 744,
                  "startColumn": 1,
                  "charOffset": 16601,
                  "charLength": 122,
                  "snippet": {
                    "text": "\n@app.teardown_request\ndef _db_close(exc):\n    \"\"\"\n    This hook ensures that the connection is closed when we've finished"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "289b161453f2a759e8bf84263b269fd6c477a1bde5feb78c0a54fbbe940656fd"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/gh_modals.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 197,
                  "startColumn": 13,
                  "charOffset": 7224,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 195,
                  "startColumn": 1,
                  "charOffset": 7148,
                  "charLength": 163,
                  "snippet": {
                    "text": "            self,\n            interaction: discord.Interaction,\n            button: discord.ui.Button,\n    ):\n        return await interaction.response.send_modal("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3e16a0d453606ed66f4b477f3bb50fb3b6ca1bad7a698d90e155347ad937afb7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'object' value is not used",
            "markdown": "Local variable 'object' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 9,
                  "charOffset": 3428,
                  "charLength": 6,
                  "snippet": {
                    "text": "object"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 122,
                  "startColumn": 1,
                  "charOffset": 3342,
                  "charLength": 172,
                  "snippet": {
                    "text": "        if r.status_code == 422:\n            raise InvalidAuth(r.status_code)\n        object = range(len(r.json()))\n\n        FullURL = r.json()[\"data\"][\"sources\"][0][\"url\"]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "255498fa1fe15292ac2e8c6ea634757e13817ff5282f63f476fa6c8420f9783a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'object' value is not used",
            "markdown": "Local variable 'object' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 174,
                  "startColumn": 9,
                  "charOffset": 5082,
                  "charLength": 6,
                  "snippet": {
                    "text": "object"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 172,
                  "startColumn": 1,
                  "charOffset": 4996,
                  "charLength": 156,
                  "snippet": {
                    "text": "        if r.status_code == 422:\n            raise InvalidAuth(r.status_code)\n        object = range(len(r.json()[\"data\"]))\n        pprint.pprint(r.json())\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c266a6a7231881d4128bb168dc55bde98622a44bf8d4f2de88e7c3ca6033f39a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'interaction' value is not used",
            "markdown": "Parameter 'interaction' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 9,
                  "charOffset": 1096,
                  "charLength": 32,
                  "snippet": {
                    "text": "interaction: discord.Interaction"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 51,
                  "startColumn": 1,
                  "charOffset": 1052,
                  "charLength": 119,
                  "snippet": {
                    "text": "    async def verify(\n        self,\n        interaction: discord.Interaction,\n        button: discord.ui.Button,\n    ):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3dd23efbcc139b713512bf5c56a563e5304df2aefb2e8abeabd610e340232b20"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 9,
                  "charOffset": 1138,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 52,
                  "startColumn": 1,
                  "charOffset": 1074,
                  "charLength": 123,
                  "snippet": {
                    "text": "        self,\n        interaction: discord.Interaction,\n        button: discord.ui.Button,\n    ):\n        self.value = True"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0dff936cfa815218baa27e3ce3e216afffb4655f2c22bb927df76faaa142a6ec"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'page_size' value is not used",
            "markdown": "Parameter 'page_size' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/mod.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 21,
                  "charOffset": 3759,
                  "charLength": 14,
                  "snippet": {
                    "text": "page_size: int"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 108,
                  "startColumn": 1,
                  "charOffset": 3694,
                  "charLength": 197,
                  "snippet": {
                    "text": "        \"\"\"List all tags in the database\"\"\"\n\n        def get_end(page_size: int):\n            database.db.connect(reuse_if_open=True)\n            tags: int = database.PunishmentTag.select().count()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "89e97d6baa1ffd7e596cd8967c7009d6c0c8fbdc26aa78fe9db5014a2534a888"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'embed' value is not used",
            "markdown": "Local variable 'embed' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/mod.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 9,
                  "charOffset": 4616,
                  "charLength": 5,
                  "snippet": {
                    "text": "embed"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 127,
                  "startColumn": 1,
                  "charOffset": 4559,
                  "charLength": 176,
                  "snippet": {
                    "text": "\n        embed = discord.Embed(title=\"Tag List\")\n        embed = await common.paginate_embed(\n            self.bot, ctx, embed, populate_embed, get_end(10), page=page\n        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ff99a4ddd2ac5c36d7903d306104224a41981b4804f4af77600c0556ea87e80b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'value' value is not used",
            "markdown": "Local variable 'value' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/mod.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 13,
                  "charOffset": 5366,
                  "charLength": 5,
                  "snippet": {
                    "text": "value"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 149,
                  "startColumn": 1,
                  "charOffset": 5315,
                  "charLength": 119,
                  "snippet": {
                    "text": "            user: discord.User = user\n\n            value = None\n            typeval = None\n            banreason = None"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "49fec08276aa30e6af4d8f73f9142ce4dc4077cb818ef890124476663be3db1b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'typeval' value is not used",
            "markdown": "Local variable 'typeval' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/mod.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 13,
                  "charOffset": 5391,
                  "charLength": 7,
                  "snippet": {
                    "text": "typeval"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 150,
                  "startColumn": 1,
                  "charOffset": 5353,
                  "charLength": 82,
                  "snippet": {
                    "text": "\n            value = None\n            typeval = None\n            banreason = None\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f12db567944a0d9fa938e64d4238d03b9afd55e2ea3cd2ce9052fb6d6231537c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'user' value is not used",
            "markdown": "Parameter 'user' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/BanLogger.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 57,
                  "charOffset": 1100,
                  "charLength": 4,
                  "snippet": {
                    "text": "user"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 39,
                  "startColumn": 1,
                  "charOffset": 1014,
                  "charLength": 209,
                  "snippet": {
                    "text": "\n    @commands.Cog.listener()\n    async def on_member_ban(self, guild: discord.Guild, user):\n        \"\"\"\n        Pycord doesn't give us the information we need so we need to dig deeper and query the audit logs"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b3d050b5bd7768aaf6d32bd5e6704e9f9684a70726916f098c81c24489d1c37a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 203,
                  "startColumn": 9,
                  "charOffset": 7234,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 201,
                  "startColumn": 1,
                  "charOffset": 7170,
                  "charLength": 132,
                  "snippet": {
                    "text": "        self,\n        interaction: discord.Interaction,\n        button: discord.ui.Button,\n    ):\n        \"\"\"go to the first page\"\"\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "92856052c6b2d2c9a02d381445733927a757cdc3e51411df10090c21496701ba"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 210,
                  "startColumn": 49,
                  "charOffset": 7504,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 208,
                  "startColumn": 1,
                  "charOffset": 7349,
                  "charLength": 225,
                  "snippet": {
                    "text": "    @discord.ui.button(label=\"Back\", style=discord.ButtonStyle.blurple)\n    async def go_to_previous_page(\n        self, interaction: discord.Interaction, button: discord.ui.Button\n    ):\n        \"\"\"go to the previous page\"\"\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "688e3fbd0237b7847128312e0009d0af74792470c2f1b50edbd0c3b467f0ab88"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 225,
                  "startColumn": 9,
                  "charOffset": 8032,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 223,
                  "startColumn": 1,
                  "charOffset": 7968,
                  "charLength": 131,
                  "snippet": {
                    "text": "        self,\n        interaction: discord.Interaction,\n        button: discord.ui.Button,\n    ):\n        \"\"\"go to the next page\"\"\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7ac215f5255f6e95893b2e7b9a6a3681184389d946529666fb4e989a0d019c75"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 234,
                  "startColumn": 9,
                  "charOffset": 8335,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 232,
                  "startColumn": 1,
                  "charOffset": 8271,
                  "charLength": 131,
                  "snippet": {
                    "text": "        self,\n        interaction: discord.Interaction,\n        button: discord.ui.Button,\n    ):\n        \"\"\"go to the last page\"\"\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5512505202f93ed31c46b35519c26cd9626d6e82e69d2113b353f94281c259f6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 9,
                  "charOffset": 8716,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 242,
                  "startColumn": 1,
                  "charOffset": 8652,
                  "charLength": 148,
                  "snippet": {
                    "text": "        self,\n        interaction: discord.Interaction,\n        button: discord.ui.Button,\n    ):\n        \"\"\"lets you type a page number to go to\"\"\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "06c4267ca109c955d2bd8524c1f86b5d31f65fd4192e2b1fcaff537fc2e63a0e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 286,
                  "startColumn": 9,
                  "charOffset": 10168,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 284,
                  "startColumn": 1,
                  "charOffset": 10104,
                  "charLength": 141,
                  "snippet": {
                    "text": "        self,\n        interaction: discord.Interaction,\n        button: discord.ui.Button,\n    ):\n        \"\"\"stops the pagination session.\"\"\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0665e09d49e6c091369cc250dc0f4a0be527a91786a6056e5e6fd81176c1da19"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'menu' value is not used",
            "markdown": "Parameter 'menu' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 515,
                  "startColumn": 27,
                  "charOffset": 17852,
                  "charLength": 14,
                  "snippet": {
                    "text": "menu: HelpMenu"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 513,
                  "startColumn": 1,
                  "charOffset": 17805,
                  "charLength": 196,
                  "snippet": {
                    "text": "        return self\n\n    def format_page(self, menu: HelpMenu, page):\n        embed = discord.Embed(title=\"Bot Help\", colour=discord.Colour.blurple())\n        embed.description = inspect.cleandoc("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cc187d243bba36473b82392aa5000dc3d8d59a9712be0dc02382b6f07e2c0e16"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'page' value is not used",
            "markdown": "Parameter 'page' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 515,
                  "startColumn": 43,
                  "charOffset": 17868,
                  "charLength": 4,
                  "snippet": {
                    "text": "page"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 513,
                  "startColumn": 1,
                  "charOffset": 17805,
                  "charLength": 196,
                  "snippet": {
                    "text": "        return self\n\n    def format_page(self, menu: HelpMenu, page):\n        embed = discord.Embed(title=\"Bot Help\", colour=discord.Colour.blurple())\n        embed.description = inspect.cleandoc("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3fd99e8d118a821eccde5806dfc52babf50adabb8505a41b8356839a4af5d4bb"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'interaction' value is not used",
            "markdown": "Parameter 'interaction' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 569,
                  "startColumn": 9,
                  "charOffset": 19712,
                  "charLength": 32,
                  "snippet": {
                    "text": "interaction: discord.Interaction"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 567,
                  "startColumn": 1,
                  "charOffset": 19653,
                  "charLength": 123,
                  "snippet": {
                    "text": "        self,\n        _commands: CommandsListType,\n        interaction: discord.Interaction,\n        *,\n        sort=False,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ac932b8051665c3b5d3ad96c08f3729c17b9bfacf30361be0a1f8866965fa561"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'CheckDB' value is not used",
            "markdown": "Local variable 'CheckDB' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 9,
                  "charOffset": 2564,
                  "charLength": 7,
                  "snippet": {
                    "text": "CheckDB"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 94,
                  "startColumn": 1,
                  "charOffset": 2502,
                  "charLength": 201,
                  "snippet": {
                    "text": "    @filters.command()\n    async def list(self, ctx):\n        CheckDB: database.CheckInformation = (\n            database.CheckInformation.select()\n            .where(database.CheckInformation.id == 1)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f89e3314046e6efbb3f51f3ae95ff9a4ba857d6f3c73831e34fc1906abeed4af"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'result' value is not used",
            "markdown": "Local variable 'result' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 541,
                  "startColumn": 13,
                  "charOffset": 17310,
                  "charLength": 6,
                  "snippet": {
                    "text": "result"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 539,
                  "startColumn": 1,
                  "charOffset": 17284,
                  "charLength": 122,
                  "snippet": {
                    "text": "        try:\n\n            result = subprocess.run(\n                f\"cd && cd {main_or_beta}\",\n                shell=True,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9fd1006297630e422dd6eb804293807a830111f8fb6ee5710aab79f9799cbfc9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'i' value is not used",
            "markdown": "Local variable 'i' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/GSuiteCreation.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 42,
                  "charOffset": 489,
                  "charLength": 1,
                  "snippet": {
                    "text": "i"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 18,
                  "startColumn": 1,
                  "charOffset": 415,
                  "charLength": 95,
                  "snippet": {
                    "text": "\n    rnd = random.SystemRandom()\n    return \"\".join(rnd.choice(chars) for i in range(length))\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "71a6ffb3b60c0ea7a1bbfae487a218a551fe612d10d3dedb5ab61daf3273e7a4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'interaction' value is not used",
            "markdown": "Parameter 'interaction' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/GSuiteCreation.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 31,
                  "charOffset": 2161,
                  "charLength": 32,
                  "snippet": {
                    "text": "interaction: discord.Interaction"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 77,
                  "startColumn": 1,
                  "charOffset": 2124,
                  "charLength": 169,
                  "snippet": {
                    "text": "    )\n\n    async def on_submit(self, interaction: discord.Interaction):\n        respChannel = self.bot.get_channel(968345000100384788)\n        await respChannel.send(\"\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1bef09e0d84d612092feaa07ff45b34bdaee114ecfc081688f7c74f2fa24ef1e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/GSuiteCreation.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 9,
                  "charOffset": 2715,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 97,
                  "startColumn": 1,
                  "charOffset": 2651,
                  "charLength": 165,
                  "snippet": {
                    "text": "        self,\n        interaction: discord.Interaction,\n        button: discord.ui.Button,\n    ):\n        await interaction.followup.send_modal(GSuiteForm(self.bot))"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "208baabcce517ca342c6c414ba86745eff1d9a7cf87870ddd2dcfa634d64e2f9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'interaction' value is not used",
            "markdown": "Parameter 'interaction' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/techCommissions.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 29,
                  "charOffset": 3223,
                  "charLength": 32,
                  "snippet": {
                    "text": "interaction: discord.Interaction"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 91,
                  "startColumn": 1,
                  "charOffset": 3121,
                  "charLength": 209,
                  "snippet": {
                    "text": "\n    @discord.ui.button(label='Confirm', style=discord.ButtonStyle.green)\n    async def confirm(self, interaction: discord.Interaction, button: discord.ui.Button):\n        self.value = True\n        self.stop()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0d146bb69205db2ab23260d42059c508b1ee9e924e0a61201a7a881dbed97e94"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/techCommissions.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 63,
                  "charOffset": 3257,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 91,
                  "startColumn": 1,
                  "charOffset": 3121,
                  "charLength": 209,
                  "snippet": {
                    "text": "\n    @discord.ui.button(label='Confirm', style=discord.ButtonStyle.green)\n    async def confirm(self, interaction: discord.Interaction, button: discord.ui.Button):\n        self.value = True\n        self.stop()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f70a62d47c6f477b2b752b0a46861f44309201d2795cbf9353ff0bd4ca858ebb"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/techCommissions.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 62,
                  "charOffset": 3463,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 96,
                  "startColumn": 1,
                  "charOffset": 3331,
                  "charLength": 264,
                  "snippet": {
                    "text": "\n    @discord.ui.button(label='Cancel', style=discord.ButtonStyle.red)\n    async def cancel(self, interaction: discord.Interaction, button: discord.ui.Button):\n        await interaction.response.send_message('Cancelling', ephemeral=True)\n        self.value = False"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7c6307a27338a68b7e4b6020cd98f531e1b6670d6a2fe04ee660880ad0552295"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/techCommissions.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 9,
                  "charOffset": 4040,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 117,
                  "startColumn": 1,
                  "charOffset": 3976,
                  "charLength": 122,
                  "snippet": {
                    "text": "        self,\n        interaction: discord.Interaction,\n        button: discord.ui.Button,\n    ):\n        extguild = False"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c17128851d403337d4a3adeaab4011482df9d21a86300cad57550de6afd35251"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'channel' value is not used",
            "markdown": "Local variable 'channel' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 221,
                  "startColumn": 17,
                  "charOffset": 6701,
                  "charLength": 7,
                  "snippet": {
                    "text": "channel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 219,
                  "startColumn": 1,
                  "charOffset": 6640,
                  "charLength": 173,
                  "snippet": {
                    "text": "                    .get()\n                )\n                channel: discord.VoiceChannel = self.bot.get_channel(\n                    int(query.ChannelID)\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "32d8ec82836292edbeef97132f2cba92938499501048c2f0bd7a087be2c80e92"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'channel' value is not used",
            "markdown": "Local variable 'channel' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 283,
                  "startColumn": 17,
                  "charOffset": 9476,
                  "charLength": 7,
                  "snippet": {
                    "text": "channel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 281,
                  "startColumn": 1,
                  "charOffset": 9415,
                  "charLength": 168,
                  "snippet": {
                    "text": "                    .get()\n                )\n                channel: discord.VoiceChannel = self.bot.get_channel(q.ChannelID)\n\n                view = discord.ui.View()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2876a97863e402b07509577858b1476279f789a0d06f9d0267d3a78acfb6346d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'team' value is not used",
            "markdown": "Local variable 'team' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 548,
                  "startColumn": 9,
                  "charOffset": 20828,
                  "charLength": 4,
                  "snippet": {
                    "text": "team"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 546,
                  "startColumn": 1,
                  "charOffset": 20742,
                  "charLength": 233,
                  "snippet": {
                    "text": "    async def end(self, ctx):\n        database.db.connect(reuse_if_open=True)\n        team = discord.utils.get(ctx.guild.roles, name=self.AT)\n        member = ctx.guild.get_member(ctx.author.id)\n        timestamp2 = datetime.now(EST)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c5fa93b97ff296572d9bf244ba256c6b27c150383374b295e78d7b5219d87722"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'timestamp2' value is not used",
            "markdown": "Local variable 'timestamp2' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 550,
                  "startColumn": 9,
                  "charOffset": 20945,
                  "charLength": 10,
                  "snippet": {
                    "text": "timestamp2"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 548,
                  "startColumn": 1,
                  "charOffset": 20820,
                  "charLength": 191,
                  "snippet": {
                    "text": "        team = discord.utils.get(ctx.guild.roles, name=self.AT)\n        member = ctx.guild.get_member(ctx.author.id)\n        timestamp2 = datetime.now(EST)\n\n        voice_state = member.voice"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bf0213e54f5ab37815b548c78ff7c0c9614dfe5fc3401ebdfb278c590d0f558b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'BOT' value is not used",
            "markdown": "Local variable 'BOT' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 889,
                  "startColumn": 9,
                  "charOffset": 35506,
                  "charLength": 3,
                  "snippet": {
                    "text": "BOT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 887,
                  "startColumn": 1,
                  "charOffset": 35444,
                  "charLength": 223,
                  "snippet": {
                    "text": "        member = ctx.guild.get_member(ctx.author.id)\n\n        BOT = ctx.guild.get_member(self.bot.user.id)\n        OWNER = ctx.guild.get_member(self.ownerID)\n        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f10beadeb83aae3dd553856c6a0843cf3917fa4584a95b4ebd66df0d15ceba24"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'TMOD' value is not used",
            "markdown": "Local variable 'TMOD' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 891,
                  "startColumn": 9,
                  "charOffset": 35610,
                  "charLength": 4,
                  "snippet": {
                    "text": "TMOD"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 889,
                  "startColumn": 1,
                  "charOffset": 35498,
                  "charLength": 299,
                  "snippet": {
                    "text": "        BOT = ctx.guild.get_member(self.bot.user.id)\n        OWNER = ctx.guild.get_member(self.ownerID)\n        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)\n        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "534eafb5e1882803bb7b48fe7719d5a333c0f853a2eb05b733fb75e38c6ac47e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'MOD' value is not used",
            "markdown": "Local variable 'MOD' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 892,
                  "startColumn": 9,
                  "charOffset": 35676,
                  "charLength": 3,
                  "snippet": {
                    "text": "MOD"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 890,
                  "startColumn": 1,
                  "charOffset": 35551,
                  "charLength": 308,
                  "snippet": {
                    "text": "        OWNER = ctx.guild.get_member(self.ownerID)\n        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)\n        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4eb56c8afa0bd0bfaac6dd441647d065c74ce9b056e8fd3bac41b334e6fd17a0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'SMOD' value is not used",
            "markdown": "Local variable 'SMOD' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 893,
                  "startColumn": 9,
                  "charOffset": 35740,
                  "charLength": 4,
                  "snippet": {
                    "text": "SMOD"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 891,
                  "startColumn": 1,
                  "charOffset": 35602,
                  "charLength": 319,
                  "snippet": {
                    "text": "        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)\n        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "226f85c4e9296aaf373f7bf34b9ec447c504e2631918600561648c1ecdd4b6c9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'CO' value is not used",
            "markdown": "Local variable 'CO' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 894,
                  "startColumn": 9,
                  "charOffset": 35806,
                  "charLength": 2,
                  "snippet": {
                    "text": "CO"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 892,
                  "startColumn": 1,
                  "charOffset": 35668,
                  "charLength": 315,
                  "snippet": {
                    "text": "        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        ST = discord.utils.get(ctx.guild.roles, name=self.ST)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fd54090cf8be731148cd3b3ba0b21d9baf413e1f8ba1eeda70c0a090b693eebf"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'VP' value is not used",
            "markdown": "Local variable 'VP' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 895,
                  "startColumn": 9,
                  "charOffset": 35868,
                  "charLength": 2,
                  "snippet": {
                    "text": "VP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 893,
                  "startColumn": 1,
                  "charOffset": 35732,
                  "charLength": 252,
                  "snippet": {
                    "text": "        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        ST = discord.utils.get(ctx.guild.roles, name=self.ST)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4916a606acbc1f131a2287a68ed281a176fbd2d6daecc2d718eaf6d7118778bf"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'ST' value is not used",
            "markdown": "Local variable 'ST' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 896,
                  "startColumn": 9,
                  "charOffset": 35930,
                  "charLength": 2,
                  "snippet": {
                    "text": "ST"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 894,
                  "startColumn": 1,
                  "charOffset": 35798,
                  "charLength": 259,
                  "snippet": {
                    "text": "        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        ST = discord.utils.get(ctx.guild.roles, name=self.ST)\n\n        SE = discord.utils.get(ctx.guild.roles, name=\"Senior Executive\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9dd4c8473dfcb1db039bbb0787e6478097916375f0b9e851b67038e6f0f6ec49"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'query' value is not used",
            "markdown": "Local variable 'query' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1135,
                  "startColumn": 21,
                  "charOffset": 46902,
                  "charLength": 5,
                  "snippet": {
                    "text": "query"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1133,
                  "startColumn": 1,
                  "charOffset": 46849,
                  "charLength": 150,
                  "snippet": {
                    "text": "                    LOCK.save()\n\n                    query = (\n                        database.VCChannelInfo.select()\n                        .where("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c1469c8797a12dad03f4a9ffdc9f6721b6fa8163b6e6642381bfd867fc14884a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local function 'check' is not used",
            "markdown": "Local function 'check' is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 402,
                  "startColumn": 21,
                  "charOffset": 16938,
                  "charLength": 5,
                  "snippet": {
                    "text": "check"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 400,
                  "startColumn": 1,
                  "charOffset": 16899,
                  "charLength": 123,
                  "snippet": {
                    "text": "            else:\n\n                def check(m):\n                    return (\n                        m.content is not None"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "40585e21609ef51df1899b738ad32b2df75f6b9ac734aac16fe4bc9bbac24a1f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'lastReset' value is not used",
            "markdown": "Local variable 'lastReset' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 13,
                  "charOffset": 1084,
                  "charLength": 9,
                  "snippet": {
                    "text": "lastReset"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 36,
                  "startColumn": 1,
                  "charOffset": 1020,
                  "charLength": 181,
                  "snippet": {
                    "text": "            and timeNow >= self.midnight\n        ):\n            lastReset = now\n            for entry in entries:\n                queryLeaderboard = queryLeaderboard.select().where("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "748fb13592797d3088ebb513f28a7bc01e7b5a2c078992a59999bbca10a80775"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'numberStr' value is not used",
            "markdown": "Local variable 'numberStr' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 5,
                  "charOffset": 2116,
                  "charLength": 9,
                  "snippet": {
                    "text": "numberStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 94,
                  "startColumn": 1,
                  "charOffset": 2103,
                  "charLength": 64,
                  "snippet": {
                    "text": "    \"\"\"\n\n    numberStr = ...  # type: str\n\n    if number < 1000:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "298f2efffaeac93534139339c40228ccc95f1e7f787de91b58050a1504070b8d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'now' value is not used",
            "markdown": "Local variable 'now' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 9,
                  "charOffset": 2486,
                  "charLength": 3,
                  "snippet": {
                    "text": "now"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 88,
                  "startColumn": 1,
                  "charOffset": 2459,
                  "charLength": 122,
                  "snippet": {
                    "text": "\n    if not renew:\n        now = datetime.now(EST)\n        q = database.StudyVCDB.create(\n            discordID=member.id,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5a26ad355ca1a620e56615e60e4cfb907d3525aeec9b827935d1be65198b5725"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'goal' value is not used",
            "markdown": "Local variable 'goal' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 17,
                  "charOffset": 5174,
                  "charLength": 4,
                  "snippet": {
                    "text": "goal"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 173,
                  "startColumn": 1,
                  "charOffset": 5109,
                  "charLength": 186,
                  "snippet": {
                    "text": "            )\n            if not query.exists():\n                goal, renewal = await setNewStudyGoal(self, console, member, False)\n            else:\n                query = query.get()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bee4965a62ae03b47f206e456570bee1aecc3235dd2992a8ce15b70ac6827ec3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'renewal' value is not used",
            "markdown": "Local variable 'renewal' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 23,
                  "charOffset": 5180,
                  "charLength": 7,
                  "snippet": {
                    "text": "renewal"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 173,
                  "startColumn": 1,
                  "charOffset": 5109,
                  "charLength": 186,
                  "snippet": {
                    "text": "            )\n            if not query.exists():\n                goal, renewal = await setNewStudyGoal(self, console, member, False)\n            else:\n                query = query.get()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "764790dc8afc36f2cb924dfe1c4672551e7b746717cabcadfe92cc8fdcf1a724"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'val' value is not used",
            "markdown": "Local variable 'val' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 17,
                  "charOffset": 5519,
                  "charLength": 3,
                  "snippet": {
                    "text": "val"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 181,
                  "startColumn": 1,
                  "charOffset": 5414,
                  "charLength": 211,
                  "snippet": {
                    "text": "\n                dateObj = pytz.timezone(\"America/New_York\").localize(query.RenewalTime)\n                val = int((dateObj - datetime.now(EST)).total_seconds())\n\n                if datetime.now(EST) >= dateObj:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2375864cb8ed9dccf143bf9a2d83ee9fada79d34f724c1102f97aceff2f2647b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'i' value is not used",
            "markdown": "Local variable 'i' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/Tutor.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 17,
                  "charOffset": 1889,
                  "charLength": 1,
                  "snippet": {
                    "text": "i"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 61,
                  "startColumn": 1,
                  "charOffset": 1825,
                  "charLength": 166,
                  "snippet": {
                    "text": "            else:\n                list_ten = []\n                i = 0\n                for entry in query:\n                    if not isinstance(entry.Date, datetime):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5fdc1c3edc64bd34c7f1a25cc9ce5517f7a342aaa90dd11ec1733f26afbb20ea"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'i' value is not used",
            "markdown": "Local variable 'i' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/Tutor.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 13,
                  "charOffset": 5817,
                  "charLength": 1,
                  "snippet": {
                    "text": "i"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 151,
                  "startColumn": 1,
                  "charOffset": 5765,
                  "charLength": 90,
                  "snippet": {
                    "text": "        else:\n            list_ten = []\n            i = 0\n            for entry in query:\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a7bcbe360c3b238a7dc775ba0137c95b12a4fbe982cf90f90772059f20ac2cc7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'interaction' value is not used",
            "markdown": "Parameter 'interaction' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/Tutor.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 558,
                  "startColumn": 30,
                  "charOffset": 20545,
                  "charLength": 32,
                  "snippet": {
                    "text": "interaction: discord.Interaction"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 556,
                  "startColumn": 1,
                  "charOffset": 20505,
                  "charLength": 100,
                  "snippet": {
                    "text": "        )\n\n    async def callback(self, interaction: discord.Interaction):\n        self.view.stop()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a8bfe66f0fbd4ec801c5f9912280d13f8d21320aac1cf2f16e7ab412513374be"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'nw' value is not used",
            "markdown": "Local variable 'nw' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/TutorLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 17,
                  "charOffset": 4131,
                  "charLength": 2,
                  "snippet": {
                    "text": "nw"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 113,
                  "startColumn": 1,
                  "charOffset": 4077,
                  "charLength": 127,
                  "snippet": {
                    "text": "                nextweek = old + new\n\n                nw = nextweek.strftime(\"%m/%d/%Y\")\n\n                query.Date = nextweek"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b6cbabef19472673251b6dbfb8f1ab2848246e0cf9f6d2e571c738684ecbcfb8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'self' value is not used",
            "markdown": "Parameter 'self' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 25,
                  "charOffset": 374,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 24,
                  "startColumn": 1,
                  "charOffset": 348,
                  "charLength": 119,
                  "snippet": {
                    "text": "\n\nasync def roleNameCheck(self, name: str, guild: discord.Guild, user: discord.Member):\n    check = getEqualRank(name)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0cefc12a96c64ce031cbf45c180198e86a3cbf242655b89dbb951303d2587098"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'InteractionResponse' value is not used",
            "markdown": "Local variable 'InteractionResponse' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 9,
                  "charOffset": 1258,
                  "charLength": 19,
                  "snippet": {
                    "text": "InteractionResponse"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 49,
                  "startColumn": 1,
                  "charOffset": 1132,
                  "charLength": 205,
                  "snippet": {
                    "text": "    @commands.Cog.listener(\"on_interaction\")\n    async def StaffVerification(self, interaction: discord.Interaction):\n        InteractionResponse = interaction.data\n\n        if interaction.message is None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4f9a3766e42545a2ba7374ddc859b2bd81f7cddd2ad3ec75e33740641d7b153c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'e' value is not used",
            "markdown": "Local variable 'e' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 37,
                  "charOffset": 3720,
                  "charLength": 1,
                  "snippet": {
                    "text": "e"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 110,
                  "startColumn": 1,
                  "charOffset": 3661,
                  "charLength": 136,
                  "snippet": {
                    "text": "                    )\n\n                except Exception as e:\n                    print(\"member not found\")\n                    continue"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6ab86c0de41042a94a0bec03c59529ea84908a2fa7d07f1864b169f2bb4e0bb7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'directTranscript' value is not used",
            "markdown": "Parameter 'directTranscript' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 5,
                  "charOffset": 2584,
                  "charLength": 30,
                  "snippet": {
                    "text": "directTranscript: bool = False"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 97,
                  "startColumn": 1,
                  "charOffset": 2494,
                  "charLength": 183,
                  "snippet": {
                    "text": "    user: discord.User = None,\n    responsesauthor: typing.List[discord.User] = None,\n    directTranscript: bool = False,\n):\n    transcript = await chat_exporter.export(channel, None)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fd31d9afe2013804f847930f028b645d6f3542c639c4ced4f86d9885b83d2893"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'self' value is not used",
            "markdown": "Parameter 'self' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 16,
                  "charOffset": 4646,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 160,
                  "startColumn": 1,
                  "charOffset": 4629,
                  "charLength": 148,
                  "snippet": {
                    "text": "\n\ndef decodeDict(self, value: str, sandbox: bool = False) -> typing.Union[str, int]:\n    \"\"\"Returns the true value of a dict output and pair value.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "462aac70817365473f1b264ba9aef8394442403333d91b12aa9cbcce88629840"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'sandbox' value is not used",
            "markdown": "Parameter 'sandbox' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 59,
                  "charOffset": 8753,
                  "charLength": 21,
                  "snippet": {
                    "text": "sandbox: bool = False"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 278,
                  "startColumn": 1,
                  "charOffset": 8681,
                  "charLength": 152,
                  "snippet": {
                    "text": "\ndef getRole(\n    guild: discord.Guild, mainSubject: str, subject: str, sandbox: bool = False\n) -> discord.Role:\n    \"\"\"Returns the role of the subject."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d3a273b443820f11a65e9250c3a469db599e9d256c2b07a5f3d5d4be4fff0769"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'channel' value is not used",
            "markdown": "Local variable 'channel' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 343,
                  "startColumn": 13,
                  "charOffset": 10640,
                  "charLength": 7,
                  "snippet": {
                    "text": "channel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 341,
                  "startColumn": 1,
                  "charOffset": 10600,
                  "charLength": 178,
                  "snippet": {
                    "text": "            )\n        else:\n            channel = self.bot.get_channel(interaction.channel_id)\n            guild = interaction.message.guild\n            author = interaction.user"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9cbbe91978e8d9c54855a2a400f38b11c010a35853076c8a846d93057120da0b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'e' value is not used",
            "markdown": "Local variable 'e' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 371,
                  "startColumn": 33,
                  "charOffset": 11756,
                  "charLength": 1,
                  "snippet": {
                    "text": "e"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 369,
                  "startColumn": 1,
                  "charOffset": 11676,
                  "charLength": 247,
                  "snippet": {
                    "text": "                    view=MSV,\n                )\n            except Exception as e:\n                await interaction.followup.send(\n                    f\"{interaction.user.mention} I can't send you messages, please check you're privacy settings!\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "88bfa80c804712954b6d5d36c0c51230b471e39c37d78c7046489665157215aa"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'e' value is not used",
            "markdown": "Local variable 'e' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 405,
                  "startColumn": 37,
                  "charOffset": 13145,
                  "charLength": 1,
                  "snippet": {
                    "text": "e"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 403,
                  "startColumn": 1,
                  "charOffset": 13016,
                  "charLength": 215,
                  "snippet": {
                    "text": "                try:\n                    await DMChannel.send(embed=embed, view=MiscOptList)\n                except Exception as e:\n                    await interaction.followup.send(embed=embed, view=MiscOptList)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5c84dfe76bcbf20ab9b32e9641268037026e6311468705b9ffc8f32a6e5d4b37"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'channel' value is not used",
            "markdown": "Local variable 'channel' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 781,
                  "startColumn": 13,
                  "charOffset": 28503,
                  "charLength": 7,
                  "snippet": {
                    "text": "channel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 779,
                  "startColumn": 1,
                  "charOffset": 28443,
                  "charLength": 181,
                  "snippet": {
                    "text": "            pass\n        elif val == \"ch_lock\":\n            channel = interaction.message.channel\n            guild = interaction.message.guild\n            author = interaction.user"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "26f76c1b11e258199441cbe1af3f2b656009511cd7f7be7e1f6934e1cd528ce7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'guild' value is not used",
            "markdown": "Local variable 'guild' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 782,
                  "startColumn": 13,
                  "charOffset": 28553,
                  "charLength": 5,
                  "snippet": {
                    "text": "guild"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 780,
                  "startColumn": 1,
                  "charOffset": 28460,
                  "charLength": 165,
                  "snippet": {
                    "text": "        elif val == \"ch_lock\":\n            channel = interaction.message.channel\n            guild = interaction.message.guild\n            author = interaction.user\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f010671c7659b341b5a332e52ba6064dca8349b519230c3b8644e1ec6d9af27a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'query' value is not used",
            "markdown": "Local variable 'query' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 785,
                  "startColumn": 13,
                  "charOffset": 28638,
                  "charLength": 5,
                  "snippet": {
                    "text": "query"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 783,
                  "startColumn": 1,
                  "charOffset": 28587,
                  "charLength": 185,
                  "snippet": {
                    "text": "            author = interaction.user\n\n            query = (\n                database.TicketInfo.select()\n                .where(database.TicketInfo.ChannelID == interaction.channel_id)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1f1f606b284442a0db17e166d114019b64140e4d23c531ff515310be8b45a34c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'channel' value is not used",
            "markdown": "Local variable 'channel' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 894,
                  "startColumn": 13,
                  "charOffset": 32771,
                  "charLength": 7,
                  "snippet": {
                    "text": "channel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 892,
                  "startColumn": 1,
                  "charOffset": 32691,
                  "charLength": 172,
                  "snippet": {
                    "text": "\n        elif InteractionResponse[\"custom_id\"] == \"ch_lock_CANCEL\":\n            channel = interaction.message.channel\n            author = interaction.user\n            try:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "788cd07e16fdec6968187d5cca650118442caad1d0000a6075e20378e3f696b6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'channel' value is not used",
            "markdown": "Local variable 'channel' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 905,
                  "startColumn": 13,
                  "charOffset": 33288,
                  "charLength": 7,
                  "snippet": {
                    "text": "channel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 903,
                  "startColumn": 1,
                  "charOffset": 33213,
                  "charLength": 168,
                  "snippet": {
                    "text": "\n        elif InteractionResponse[\"custom_id\"] == \"ch_lock_C\":\n            channel = self.bot.get_channel(interaction.channel_id)\n            author = interaction.user\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f6a899175afc9325a7327eb9e4b070686023b3c12c06f0286757ca7accd9dd3b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'msg' value is not used",
            "markdown": "Local variable 'msg' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 970,
                  "startColumn": 13,
                  "charOffset": 36011,
                  "charLength": 3,
                  "snippet": {
                    "text": "msg"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 968,
                  "startColumn": 1,
                  "charOffset": 35943,
                  "charLength": 225,
                  "snippet": {
                    "text": "                )\n            author = interaction.user\n            msg = await interaction.channel.send(\n                f\"Please wait, creating your transcript {Emoji.loadingGIF2}\\n**THIS MAY TAKE SOME TIME**\"\n            )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f5b2965937784636e9f05cf046ba0cadb8a8c8574187a78f0ad5959099d0b9fd"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'query' value is not used",
            "markdown": "Local variable 'query' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1121,
                  "startColumn": 13,
                  "charOffset": 42775,
                  "charLength": 5,
                  "snippet": {
                    "text": "query"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1119,
                  "startColumn": 1,
                  "charOffset": 42726,
                  "charLength": 137,
                  "snippet": {
                    "text": "        )\n        if query.exists():\n            query = query.get()\n            embed = discord.Embed(\n                title=\"Confirm?\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a0ca686292a6f9876f687e5f340fbd7d4abae8efe80ce784740da09eff687ffe"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'LogCH' value is not used",
            "markdown": "Local variable 'LogCH' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1162,
                  "startColumn": 13,
                  "charOffset": 44356,
                  "charLength": 5,
                  "snippet": {
                    "text": "LogCH"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1160,
                  "startColumn": 1,
                  "charOffset": 44203,
                  "charLength": 271,
                  "snippet": {
                    "text": "            TicketOwner = guild.get_member(entry.authorID)\n            messages = [message async for message in channel.history(limit=None)]\n            LogCH = self.bot.get_channel(MainID.ch_transcript_logs)\n            authorList = []\n            if len(messages) == 0:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fa58e3a716ae03c80342f64f672d1fddced270bfa77e803455036fd0958ad2e5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'authorList' value is not used",
            "markdown": "Local variable 'authorList' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1163,
                  "startColumn": 13,
                  "charOffset": 44424,
                  "charLength": 10,
                  "snippet": {
                    "text": "authorList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1161,
                  "startColumn": 1,
                  "charOffset": 44262,
                  "charLength": 237,
                  "snippet": {
                    "text": "            messages = [message async for message in channel.history(limit=None)]\n            LogCH = self.bot.get_channel(MainID.ch_transcript_logs)\n            authorList = []\n            if len(messages) == 0:\n                continue"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "734fd8bf95b9567cc5d960e9f041a262d5e38f154ea24d701821c448e8de36bd"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'val' value is not used",
            "markdown": "Local variable 'val' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/verifystaffGsuite.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 13,
                  "charOffset": 1486,
                  "charLength": 3,
                  "snippet": {
                    "text": "val"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 43,
                  "startColumn": 1,
                  "charOffset": 1460,
                  "charLength": 108,
                  "snippet": {
                    "text": "\n        try:\n            val = InteractionResponse[\"custom_id\"]\n        except KeyError:\n            return"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0852c2a348e392e4320ffc60b55640c2ff06d1bb670c4bc86ab6687da35efad2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'channel' value is not used",
            "markdown": "Local variable 'channel' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/verifystaffGsuite.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 13,
                  "charOffset": 1871,
                  "charLength": 7,
                  "snippet": {
                    "text": "channel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 56,
                  "startColumn": 1,
                  "charOffset": 1840,
                  "charLength": 169,
                  "snippet": {
                    "text": "                )\n\n            channel = self.bot.get_channel(interaction.channel_id)\n            guild = interaction.message.guild\n            author = interaction.user"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e4c3bf9582eed0d3ceef1b4f9b94d83ec43163f75c94e53db70b2113e6a65fc7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'e' value is not used",
            "markdown": "Local variable 'e' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/verifystaffGsuite.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 41,
                  "charOffset": 4549,
                  "charLength": 1,
                  "snippet": {
                    "text": "e"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 115,
                  "startColumn": 1,
                  "charOffset": 4416,
                  "charLength": 250,
                  "snippet": {
                    "text": "                    try:\n                        self.flow.fetch_token(code=answer1.content)\n                    except Exception as e:\n                        return await dm_channel.send(\"Invalid code, try again later...\")\n                    else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a88347f927b12d2fd0cf95f786e6d77092326f504e972511adf3b368eda0fcea"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'command' value is not used",
            "markdown": "Parameter 'command' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "main.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 13,
                  "charOffset": 1800,
                  "charLength": 62,
                  "snippet": {
                    "text": "command: Union[app_commands.Command, app_commands.ContextMenu]"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 60,
                  "startColumn": 1,
                  "charOffset": 1724,
                  "charLength": 194,
                  "snippet": {
                    "text": "            self,\n            interaction: discord.Interaction,\n            command: Union[app_commands.Command, app_commands.ContextMenu],\n            error: app_commands.AppCommandError\n    ):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "007126223d6fc53654f2415fad63c141d6a17c4ec2bad7216eb3d7b81a2575b9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'reaction' from outer scope",
            "markdown": "Shadows name 'reaction' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 24,
                  "charOffset": 3171,
                  "charLength": 8,
                  "snippet": {
                    "text": "reaction"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 106,
                  "startColumn": 1,
                  "charOffset": 3121,
                  "charLength": 135,
                  "snippet": {
                    "text": "    emotes = [\"◀️\", \"▶️\"]\n\n    def check_reaction(reaction, user):\n        return user == ctx.author and str(reaction.emoji) in emotes\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "96c1fb36d212273c374ba23cec57f3a057b00770577337ffed57fc69dbddac5e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'user' from outer scope",
            "markdown": "Shadows name 'user' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 34,
                  "charOffset": 3181,
                  "charLength": 4,
                  "snippet": {
                    "text": "user"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 106,
                  "startColumn": 1,
                  "charOffset": 3121,
                  "charLength": 135,
                  "snippet": {
                    "text": "    emotes = [\"◀️\", \"▶️\"]\n\n    def check_reaction(reaction, user):\n        return user == ctx.author and str(reaction.emoji) in emotes\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e8418042b5da1c752674e5b44b39b420a8bc5bc07a70ed442a12d8e1b86fbb4c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'embed' from outer scope",
            "markdown": "Shadows name 'embed' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/mod.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 34,
                  "charOffset": 3966,
                  "charLength": 5,
                  "snippet": {
                    "text": "embed"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 113,
                  "startColumn": 1,
                  "charOffset": 3892,
                  "charLength": 197,
                  "snippet": {
                    "text": "            return math.ceil(tags / 10)\n\n        async def populate_embed(embed: discord.Embed, page: int):\n            \"\"\"Used to populate the embed in listtag command\"\"\"\n            tag_list = \"\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "daa3a2d6c644c72e9f18d322419dae2fd67a36942ca0d8c3b8ca533ae7dc367e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'page' from outer scope",
            "markdown": "Shadows name 'page' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/mod.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 56,
                  "charOffset": 3988,
                  "charLength": 4,
                  "snippet": {
                    "text": "page"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 113,
                  "startColumn": 1,
                  "charOffset": 3892,
                  "charLength": 197,
                  "snippet": {
                    "text": "            return math.ceil(tags / 10)\n\n        async def populate_embed(embed: discord.Embed, page: int):\n            \"\"\"Used to populate the embed in listtag command\"\"\"\n            tag_list = \"\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c44f24ee41a50857f9d16afd81d09829bcb5d0eb3ba61804485b8218257ded58"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'reaction' from outer scope",
            "markdown": "Shadows name 'reaction' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 266,
                  "startColumn": 20,
                  "charOffset": 8835,
                  "charLength": 8,
                  "snippet": {
                    "text": "reaction"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 264,
                  "startColumn": 1,
                  "charOffset": 8769,
                  "charLength": 199,
                  "snippet": {
                    "text": "            await message.add_reaction(emoji)\n\n        def check2(reaction, user):\n            return user == ctx.author and (\n                str(reaction.emoji) == \"✅\" or str(reaction.emoji) == \"❌\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cad3589337d99330603c1081401271fe67f4ab7238cacbf774485c468bf7f8d6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'user' from outer scope",
            "markdown": "Shadows name 'user' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 266,
                  "startColumn": 30,
                  "charOffset": 8845,
                  "charLength": 4,
                  "snippet": {
                    "text": "user"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 264,
                  "startColumn": 1,
                  "charOffset": 8769,
                  "charLength": 199,
                  "snippet": {
                    "text": "            await message.add_reaction(emoji)\n\n        def check2(reaction, user):\n            return user == ctx.author and (\n                str(reaction.emoji) == \"✅\" or str(reaction.emoji) == \"❌\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "19ec376583f2f632efbe16b0d828ba4abe3d6296602de51683491ae81db76ada"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'reaction' from outer scope",
            "markdown": "Shadows name 'reaction' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 488,
                  "startColumn": 20,
                  "charOffset": 17490,
                  "charLength": 8,
                  "snippet": {
                    "text": "reaction"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 486,
                  "startColumn": 1,
                  "charOffset": 17424,
                  "charLength": 199,
                  "snippet": {
                    "text": "            await message.add_reaction(emoji)\n\n        def check2(reaction, user):\n            return user == ctx.author and (\n                str(reaction.emoji) == \"✅\" or str(reaction.emoji) == \"❌\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5cdcf6c93d3fbd2183216a953ae19fe15f18905260ec7ee15de5f247e449c003"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'user' from outer scope",
            "markdown": "Shadows name 'user' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 488,
                  "startColumn": 30,
                  "charOffset": 17500,
                  "charLength": 4,
                  "snippet": {
                    "text": "user"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 486,
                  "startColumn": 1,
                  "charOffset": 17424,
                  "charLength": 199,
                  "snippet": {
                    "text": "            await message.add_reaction(emoji)\n\n        def check2(reaction, user):\n            return user == ctx.author and (\n                str(reaction.emoji) == \"✅\" or str(reaction.emoji) == \"❌\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8d566d2a01cc49d1040184035064edcad640cacffe4414f730557b1890090d47"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'e' from outer scope",
            "markdown": "Shadows name 'e' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 704,
                  "startColumn": 30,
                  "charOffset": 25009,
                  "charLength": 1,
                  "snippet": {
                    "text": "e"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 702,
                  "startColumn": 1,
                  "charOffset": 24907,
                  "charLength": 152,
                  "snippet": {
                    "text": "            vc.play(\n                discord.FFmpegPCMAudio(\"text.mp3\"),\n                after=lambda e: print(f\"Finished playing: {e}\"),\n            )\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "12dabbc4879c82df7d5524be0a0b73ad25a5c250d295a0aa668054ce2ce5c071"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'bot' from outer scope",
            "markdown": "Shadows name 'bot' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "main.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 24,
                  "charOffset": 1217,
                  "charLength": 3,
                  "snippet": {
                    "text": "bot"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 45,
                  "startColumn": 1,
                  "charOffset": 1143,
                  "charLength": 132,
                  "snippet": {
                    "text": "\nclass TimmyCommandTree(app_commands.CommandTree):\n    def __init__(self, bot):\n        super().__init__(bot)\n        self.bot = bot"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "61064bd3b7503a41374b4e927d7b8ca84993a7570347ac3df0b2421675c52da7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyClassHasNoInitInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class has no __init__ method",
            "markdown": "Class has no __init__ method"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 7,
                  "charOffset": 1036,
                  "charLength": 15,
                  "snippet": {
                    "text": "ConfigCatClient"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 1,
                  "charOffset": 1028,
                  "charLength": 162,
                  "snippet": {
                    "text": "\n\nclass ConfigCatClient:\n    PS_ID_CC = configcatclient.create_client(os.getenv(\"PS_ID_CC\"))\n    SET_ID_CC = configcatclient.create_client(os.getenv(\"SET_ID_CC\"))"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "be31efc1a8ca7e1f9344e164ce427337c7e5a41aa3d9e5f53c96e3e489fd4248"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyClassHasNoInitInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class has no __init__ method",
            "markdown": "Class has no __init__ method"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 7,
                  "charOffset": 2059,
                  "charLength": 13,
                  "snippet": {
                    "text": "ConsoleColors"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 65,
                  "startColumn": 1,
                  "charOffset": 2046,
                  "charLength": 73,
                  "snippet": {
                    "text": "    )\n\nclass ConsoleColors:\n   HEADER = '\\033[95m'\n   OKBLUE = '\\033[94m'"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f48bba5655da150eb4b8018d0ed16d5c45d3fb19dee66f777f557545192bab11"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyClassHasNoInitInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class has no __init__ method",
            "markdown": "Class has no __init__ method"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 365,
                  "startColumn": 7,
                  "charOffset": 11968,
                  "charLength": 6,
                  "snippet": {
                    "text": "MainID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 363,
                  "startColumn": 1,
                  "charOffset": 11960,
                  "charLength": 54,
                  "snippet": {
                    "text": "\n\nclass MainID:\n    \"\"\"\n    IDs of the SS Main server."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0d1309cb90438e75f7288145972905144b25003c08f23cc21b402f2123057de9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyClassHasNoInitInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class has no __init__ method",
            "markdown": "Class has no __init__ method"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 468,
                  "startColumn": 7,
                  "charOffset": 17798,
                  "charLength": 7,
                  "snippet": {
                    "text": "StaffID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 466,
                  "startColumn": 1,
                  "charOffset": 17790,
                  "charLength": 66,
                  "snippet": {
                    "text": "\n\nclass StaffID:\n    \"\"\"\n    IDs of the SS Staff Community server."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0cca3623b7416b84174981711a9ad96eebf171e09ab509ce3ccf6f309b809cee"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyClassHasNoInitInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class has no __init__ method",
            "markdown": "Class has no __init__ method"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 523,
                  "startColumn": 7,
                  "charOffset": 21551,
                  "charLength": 6,
                  "snippet": {
                    "text": "TechID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 521,
                  "startColumn": 1,
                  "charOffset": 21543,
                  "charLength": 91,
                  "snippet": {
                    "text": "\n\nclass TechID:\n    \"\"\"\n    IDs of the 'The Department of Information & Technology' server."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6a0e76ca1638fbf36d96dc0887e8f8d8c97e300dbfabd4bc0f692b32d4f99509"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyClassHasNoInitInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class has no __init__ method",
            "markdown": "Class has no __init__ method"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 556,
                  "startColumn": 7,
                  "charOffset": 23420,
                  "charLength": 13,
                  "snippet": {
                    "text": "SandboxConfig"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 554,
                  "startColumn": 1,
                  "charOffset": 23412,
                  "charLength": 69,
                  "snippet": {
                    "text": "\n\nclass SandboxConfig:\n    \"\"\"\n    IDs for the Sandbox Configuration."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9b2acf6882c9694fbfcac9aad00eddef90595e43fc883447c91be6b3870c359e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyClassHasNoInitInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class has no __init__ method",
            "markdown": "Class has no __init__ method"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 588,
                  "startColumn": 7,
                  "charOffset": 25183,
                  "charLength": 4,
                  "snippet": {
                    "text": "ChID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 586,
                  "startColumn": 1,
                  "charOffset": 25175,
                  "charLength": 56,
                  "snippet": {
                    "text": "\n\nclass ChID:\n    \"\"\"\n    IDs of the Chat Helper server."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c3e2c3bbd248cd8e5b5ff0ffe4b30600db4bdb4bfedaa46c3686a8187a784975"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyClassHasNoInitInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class has no __init__ method",
            "markdown": "Class has no __init__ method"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 607,
                  "startColumn": 7,
                  "charOffset": 25801,
                  "charLength": 5,
                  "snippet": {
                    "text": "MktID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 605,
                  "startColumn": 1,
                  "charOffset": 25793,
                  "charLength": 69,
                  "snippet": {
                    "text": "\n\nclass MktID:\n    \"\"\"\n    IDs of the SS Marketing Department server."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0c40543e66eff9349efe2a500561fbe8cb018c7d6e0d3ebefb447d27fc8e3077"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyClassHasNoInitInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class has no __init__ method",
            "markdown": "Class has no __init__ method"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 646,
                  "startColumn": 7,
                  "charOffset": 28012,
                  "charLength": 5,
                  "snippet": {
                    "text": "TutID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 644,
                  "startColumn": 1,
                  "charOffset": 28004,
                  "charLength": 66,
                  "snippet": {
                    "text": "\n\nclass TutID:\n    \"\"\"\n    IDs of the SS Tutoring Division server."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bb78826e7727adaccd5f4700522bf24f4baff45d724b17f58ea927dfab4ab530"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyClassHasNoInitInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class has no __init__ method",
            "markdown": "Class has no __init__ method"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 676,
                  "startColumn": 7,
                  "charOffset": 29666,
                  "charLength": 4,
                  "snippet": {
                    "text": "HRID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 674,
                  "startColumn": 1,
                  "charOffset": 29658,
                  "charLength": 61,
                  "snippet": {
                    "text": "\n\nclass HRID:\n    \"\"\"\n    IDs of the SS HR Department server."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a6cbd5f090633534390c7a8eece22bdf026be7e26e77494075d4d0bcd4bf0be9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyClassHasNoInitInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class has no __init__ method",
            "markdown": "Class has no __init__ method"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 704,
                  "startColumn": 7,
                  "charOffset": 30876,
                  "charLength": 4,
                  "snippet": {
                    "text": "PSID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 702,
                  "startColumn": 1,
                  "charOffset": 30868,
                  "charLength": 67,
                  "snippet": {
                    "text": "\n\nclass PSID:\n    \"\"\"\n    IDs of the Programming Simplified server."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7c54b13865195e12cf5797ad3d00127f250ce1837703a59645e9284ddba6b356"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyClassHasNoInitInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class has no __init__ method",
            "markdown": "Class has no __init__ method"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 724,
                  "startColumn": 7,
                  "charOffset": 31430,
                  "charLength": 8,
                  "snippet": {
                    "text": "LeaderID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 722,
                  "startColumn": 1,
                  "charOffset": 31422,
                  "charLength": 66,
                  "snippet": {
                    "text": "\n\nclass LeaderID:\n    \"\"\"\n    IDs of the Leadership Lounge server."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "057398bf65e8398f93dc375b0e6a6a9ac6a236c447bb6c0efaff330ae9a81025"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyClassHasNoInitInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class has no __init__ method",
            "markdown": "Class has no __init__ method"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 772,
                  "startColumn": 7,
                  "charOffset": 34582,
                  "charLength": 5,
                  "snippet": {
                    "text": "SETID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 770,
                  "startColumn": 1,
                  "charOffset": 34574,
                  "charLength": 52,
                  "snippet": {
                    "text": "\n\nclass SETID:\n    \"\"\"\n    IDs of the SSD SET SERVER"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "34b58236567f5af9020b36440f46db41e9f16a1b67a8271c1555921fd414ca68"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyClassHasNoInitInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class has no __init__ method",
            "markdown": "Class has no __init__ method"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 811,
                  "startColumn": 7,
                  "charOffset": 35696,
                  "charLength": 10,
                  "snippet": {
                    "text": "CheckDB_CC"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 809,
                  "startColumn": 1,
                  "charOffset": 35688,
                  "charLength": 66,
                  "snippet": {
                    "text": "\n\nclass CheckDB_CC:\n    \"\"\"\n    Checks and Safeguards for the Bot."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ef3b32e72cdbfce2cfb17d0aa3f3d977e24dc1323a17824a508acd19ad0cbc8b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyClassHasNoInitInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class has no __init__ method",
            "markdown": "Class has no __init__ method"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 853,
                  "startColumn": 7,
                  "charOffset": 37331,
                  "charLength": 5,
                  "snippet": {
                    "text": "Emoji"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 851,
                  "startColumn": 1,
                  "charOffset": 37323,
                  "charLength": 53,
                  "snippet": {
                    "text": "\n\nclass Emoji:\n    \"\"\"\n    Emojis to use for the bot."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a2bd3fa57ce4eebc52c2c6a18cb43ad2bbb273dab0f6333d8675341795cbd43a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyClassHasNoInitInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class has no __init__ method",
            "markdown": "Class has no __init__ method"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 904,
                  "startColumn": 7,
                  "charOffset": 39414,
                  "charLength": 6,
                  "snippet": {
                    "text": "Colors"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 902,
                  "startColumn": 1,
                  "charOffset": 39406,
                  "charLength": 92,
                  "snippet": {
                    "text": "\n\nclass Colors:\n    \"\"\"\n    Colors for the bot. Can be custom hex colors or built-in colors."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b09084b37ef47080ab6dadb074f87d0dd45892ad029eab322c83686da067ce42"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyClassHasNoInitInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class has no __init__ method",
            "markdown": "Class has no __init__ method"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 924,
                  "startColumn": 7,
                  "charOffset": 39888,
                  "charLength": 6,
                  "snippet": {
                    "text": "Others"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 922,
                  "startColumn": 1,
                  "charOffset": 39880,
                  "charLength": 87,
                  "snippet": {
                    "text": "\n\nclass Others:\n    \"\"\"\n    Other things to use for the bot. (Images, characters, etc.)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cfdba18940a35ef5c341f93744ead8214a283bcb65c64b989536fb0d22b744e7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyClassHasNoInitInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class has no __init__ method",
            "markdown": "Class has no __init__ method"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1028,
                  "startColumn": 7,
                  "charOffset": 47304,
                  "charLength": 16,
                  "snippet": {
                    "text": "EmbeddedActivity"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1026,
                  "startColumn": 1,
                  "charOffset": 47295,
                  "charLength": 93,
                  "snippet": {
                    "text": "]\n\nclass EmbeddedActivity:\n    awkword = 879863881349087252\n    betrayal = 773336526917861400"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "17f33e7dca323c1f8aea99d5e8ed3dcb2f71ea05c7d836ee950865f13f79646c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyClassHasNoInitInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class has no __init__ method",
            "markdown": "Class has no __init__ method"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 509,
                  "startColumn": 7,
                  "charOffset": 18757,
                  "charLength": 2,
                  "snippet": {
                    "text": "Me"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 507,
                  "startColumn": 1,
                  "charOffset": 18749,
                  "charLength": 55,
                  "snippet": {
                    "text": "\n\nclass Me:\n    publicCH = [\n        MainID.cat_casual,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1928b5925a2d8d38f4ab8fb2e262b534c8a5b0cb050a6b7e042f061c03bfd3c5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyClassHasNoInitInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class has no __init__ method",
            "markdown": "Class has no __init__ method"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/EvaluationCenter/cogs/SimCreator.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 7,
                  "charOffset": 137,
                  "charLength": 16,
                  "snippet": {
                    "text": "SimulatorProfile"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 6,
                  "startColumn": 1,
                  "charOffset": 129,
                  "charLength": 98,
                  "snippet": {
                    "text": "\n\nclass SimulatorProfile:\n    @staticmethod\n    async def create_TicketSys(ctx: commands.Context):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "14c4e8e710634260da893f6ad3537b8bf3500144f9369e45870de46f47e13a5b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/checks.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 5,
                  "charOffset": 375,
                  "charLength": 13,
                  "snippet": {
                    "text": "predicate_LV1"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 17,
                  "startColumn": 1,
                  "charOffset": 369,
                  "charLength": 52,
                  "snippet": {
                    "text": "\n\ndef predicate_LV1(ctx) -> bool:\n    adminIDs = []\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "823fbb08d9b2bf845da3ce0409bd2e6a76845445fed6fea6c7b70cb00510e5a1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/checks.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 5,
                  "charOffset": 407,
                  "charLength": 8,
                  "snippet": {
                    "text": "adminIDs"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 18,
                  "startColumn": 1,
                  "charOffset": 370,
                  "charLength": 142,
                  "snippet": {
                    "text": "\ndef predicate_LV1(ctx) -> bool:\n    adminIDs = []\n\n    query = database.Administrators.select().where(database.Administrators.TierLevel >= 1)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "70435e359fd67614bd795c05e833e114dbc27097cf57cb8dadcaac9522e35d1e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/checks.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 5,
                  "charOffset": 667,
                  "charLength": 13,
                  "snippet": {
                    "text": "predicate_LV2"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 29,
                  "startColumn": 1,
                  "charOffset": 661,
                  "charLength": 52,
                  "snippet": {
                    "text": "\n\ndef predicate_LV2(ctx) -> bool:\n    adminIDs = []\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "356710dcd5bef4dcd6d67b61daa1f006cfe9dc3c4aaeb00bd6a9dcbab503660c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/checks.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 5,
                  "charOffset": 699,
                  "charLength": 8,
                  "snippet": {
                    "text": "adminIDs"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 30,
                  "startColumn": 1,
                  "charOffset": 662,
                  "charLength": 142,
                  "snippet": {
                    "text": "\ndef predicate_LV2(ctx) -> bool:\n    adminIDs = []\n\n    query = database.Administrators.select().where(database.Administrators.TierLevel >= 2)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a3ca4fca2190dad2c339457ed1ee5c8ce80a5cfff9027199de00e91d41a11da7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/checks.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 5,
                  "charOffset": 960,
                  "charLength": 13,
                  "snippet": {
                    "text": "predicate_LV3"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 41,
                  "startColumn": 1,
                  "charOffset": 954,
                  "charLength": 44,
                  "snippet": {
                    "text": "\n\ndef predicate_LV3(ctx):\n    adminIDs = []\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f0d4252075039fb4f6f46399f320271c21f9e8b440ad460fb4aa635c6d117fcf"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/checks.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 5,
                  "charOffset": 984,
                  "charLength": 8,
                  "snippet": {
                    "text": "adminIDs"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 42,
                  "startColumn": 1,
                  "charOffset": 955,
                  "charLength": 134,
                  "snippet": {
                    "text": "\ndef predicate_LV3(ctx):\n    adminIDs = []\n\n    query = database.Administrators.select().where(database.Administrators.TierLevel >= 3)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9e5b1c5fb9950bc316ab1f27fe0b7dfda1f6be7089bda2f4d8d701519f5543fa"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/checks.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 5,
                  "charOffset": 1245,
                  "charLength": 13,
                  "snippet": {
                    "text": "predicate_LV4"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 53,
                  "startColumn": 1,
                  "charOffset": 1239,
                  "charLength": 44,
                  "snippet": {
                    "text": "\n\ndef predicate_LV4(ctx):\n    adminIDs = []\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "50a63893ee726572df5bcfeea917ae57f2fa886da8d23431c3e74853788a4198"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/checks.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 5,
                  "charOffset": 1269,
                  "charLength": 8,
                  "snippet": {
                    "text": "adminIDs"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 54,
                  "startColumn": 1,
                  "charOffset": 1240,
                  "charLength": 134,
                  "snippet": {
                    "text": "\ndef predicate_LV4(ctx):\n    adminIDs = []\n\n    query = database.Administrators.select().where(database.Administrators.TierLevel >= 4)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "238776bdc004d785cfe05a58b359b65513ba96131ae0d06be3c1fe03c4fc60a0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/checks.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 5,
                  "charOffset": 3054,
                  "charLength": 7,
                  "snippet": {
                    "text": "runPath"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 118,
                  "startColumn": 1,
                  "charOffset": 3023,
                  "charLength": 115,
                  "snippet": {
                    "text": "\ndef timmy_beta_host(ctx):\n    runPath = os.path.realpath(__file__)\n    runDir = re.search(\"/home/[^/]*\", runPath)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3d6e38125ea146bfd4449ea1f4a3b7ff217df001d6b8cb7d525977e4d3ed9c68"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/checks.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 5,
                  "charOffset": 3095,
                  "charLength": 6,
                  "snippet": {
                    "text": "runDir"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 119,
                  "startColumn": 1,
                  "charOffset": 3024,
                  "charLength": 141,
                  "snippet": {
                    "text": "def timmy_beta_host(ctx):\n    runPath = os.path.realpath(__file__)\n    runDir = re.search(\"/home/[^/]*\", runPath)\n\n    if runDir is not None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0a3f7f44dafe53a47632a58e11c4203c5a4647dfd66c5fa326838a5351df33af"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/checks.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 9,
                  "charOffset": 3174,
                  "charLength": 6,
                  "snippet": {
                    "text": "runDir"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 122,
                  "startColumn": 1,
                  "charOffset": 3138,
                  "charLength": 92,
                  "snippet": {
                    "text": "\n    if runDir is not None:\n        runDir = runDir.group(0)\n    else:\n        runDir = None"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0fe8b3022307e9a195b63270b9e44100110f22902d673584af5a427de51c7ae0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/checks.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 9,
                  "charOffset": 3217,
                  "charLength": 6,
                  "snippet": {
                    "text": "runDir"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 124,
                  "startColumn": 1,
                  "charOffset": 3166,
                  "charLength": 105,
                  "snippet": {
                    "text": "        runDir = runDir.group(0)\n    else:\n        runDir = None\n\n    return runDir == \"/home/timmy-beta\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c8d1e8aefd0b47ace6350ed1ae71396e480d8cbc6c7de0394f55e45d00db6684"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 325,
                  "startColumn": 5,
                  "charOffset": 10679,
                  "charLength": 14,
                  "snippet": {
                    "text": "S3_upload_file"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 323,
                  "startColumn": 1,
                  "charOffset": 10673,
                  "charLength": 56,
                  "snippet": {
                    "text": "\n\ndef S3_upload_file(\n        file_name,\n        bucket,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b32352007d49311331ec3b91b26b79b3e02c67f388950b7fd43137b84b3d136b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class names should use CamelCase convention",
            "markdown": "Class names should use CamelCase convention"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 811,
                  "startColumn": 7,
                  "charOffset": 35696,
                  "charLength": 10,
                  "snippet": {
                    "text": "CheckDB_CC"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 809,
                  "startColumn": 1,
                  "charOffset": 35688,
                  "charLength": 66,
                  "snippet": {
                    "text": "\n\nclass CheckDB_CC:\n    \"\"\"\n    Checks and Safeguards for the Bot."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "68c495c937f4078f36a0a3ff92473e878727d19bbd9512dd6cf571d0780bda56"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1384,
                  "startColumn": 9,
                  "charOffset": 60765,
                  "charLength": 19,
                  "snippet": {
                    "text": "TempConfirmInstance"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1382,
                  "startColumn": 1,
                  "charOffset": 60673,
                  "charLength": 229,
                  "snippet": {
                    "text": "        self.value = True\n        ch = self.bot.get_channel(interaction.channel_id)\n        TempConfirmInstance = TicketTempConfirm()\n\n        await ch.send(\"Are you sure you want to close this ticket?\", view=TempConfirmInstance)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b94a2676914707917c5ce87325297154c40781897f24c57ce4af0e8df496c9c3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1450,
                  "startColumn": 9,
                  "charOffset": 63254,
                  "charLength": 2,
                  "snippet": {
                    "text": "ID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1448,
                  "startColumn": 1,
                  "charOffset": 63168,
                  "charLength": 244,
                  "snippet": {
                    "text": "async def id_generator(size=3, chars=string.ascii_uppercase):\n    while True:\n        ID = \"\".join(random.choice(chars) for _ in range(size))\n        query = database.TutorBot_Sessions.select().where(database.TutorBot_Sessions.SessionID == ID)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d616e59753522e5bed49abb9e6db4f413485700bcc327ed73cd04e62b27e3a65"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class names should use CamelCase convention",
            "markdown": "Class names should use CamelCase convention"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/database.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 7,
                  "charOffset": 4710,
                  "charLength": 24,
                  "snippet": {
                    "text": "TutorSession_GracePeriod"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 163,
                  "startColumn": 1,
                  "charOffset": 4702,
                  "charLength": 69,
                  "snippet": {
                    "text": "\n\nclass TutorSession_GracePeriod(BaseModel):\n    \"\"\"\n    # IgnoreThis"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8f7d7da8f3ecc2c160f428a777922cf4f2a13c8c663a4fd43e7af9a8b79952c9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class names should use CamelCase convention",
            "markdown": "Class names should use CamelCase convention"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/database.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 440,
                  "startColumn": 7,
                  "charOffset": 10310,
                  "charLength": 17,
                  "snippet": {
                    "text": "TutorBot_Sessions"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 438,
                  "startColumn": 1,
                  "charOffset": 10302,
                  "charLength": 68,
                  "snippet": {
                    "text": "\n\nclass TutorBot_Sessions(BaseModel):\n    \"\"\"\n    #TutorBot Sessions"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f34780c18919ffd573eb5f0a4392a8833020ee30fa898a6b90513b4393cde567"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 9,
                  "charOffset": 2149,
                  "charLength": 8,
                  "snippet": {
                    "text": "ListData"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 83,
                  "startColumn": 1,
                  "charOffset": 2089,
                  "charLength": 147,
                  "snippet": {
                    "text": "        data = r.json()\n        data = data[\"data\"]\n        ListData = []\n        for object in range(len(data) - 1):\n            # object = object"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e19dfe4f16d4eb7ba8b2abe52ec67f6beb5909f2fb3266ee29bc258c02cbbe08"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 13,
                  "charOffset": 2249,
                  "charLength": 7,
                  "snippet": {
                    "text": "FullURL"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 86,
                  "startColumn": 1,
                  "charOffset": 2163,
                  "charLength": 220,
                  "snippet": {
                    "text": "        for object in range(len(data) - 1):\n            # object = object\n            FullURL = data[object][\"sources\"][object][\"url\"]\n            ParsedDomain = urlparse(FullURL)\n            Domain = ParsedDomain.netloc"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8db03fd4803e681a786b5ec9637e7af1452791aa3c54a399aa93d1e8a97ae650"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 13,
                  "charOffset": 2310,
                  "charLength": 12,
                  "snippet": {
                    "text": "ParsedDomain"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 87,
                  "startColumn": 1,
                  "charOffset": 2207,
                  "charLength": 213,
                  "snippet": {
                    "text": "            # object = object\n            FullURL = data[object][\"sources\"][object][\"url\"]\n            ParsedDomain = urlparse(FullURL)\n            Domain = ParsedDomain.netloc\n            Path = ParsedDomain.path"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "94351d205b2a63db740691817cb03df4bb31328ff14823ce808b4092d7210d8c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 13,
                  "charOffset": 2355,
                  "charLength": 6,
                  "snippet": {
                    "text": "Domain"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 88,
                  "startColumn": 1,
                  "charOffset": 2237,
                  "charLength": 184,
                  "snippet": {
                    "text": "            FullURL = data[object][\"sources\"][object][\"url\"]\n            ParsedDomain = urlparse(FullURL)\n            Domain = ParsedDomain.netloc\n            Path = ParsedDomain.path\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4ca4a12e9adcc21aa1bfeb691f9367a8611833dd4a6eac252e66127188256317"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 13,
                  "charOffset": 2396,
                  "charLength": 4,
                  "snippet": {
                    "text": "Path"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 89,
                  "startColumn": 1,
                  "charOffset": 2298,
                  "charLength": 152,
                  "snippet": {
                    "text": "            ParsedDomain = urlparse(FullURL)\n            Domain = ParsedDomain.netloc\n            Path = ParsedDomain.path\n\n            ListData.append("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "da3731037d7c5c6ba08ef79c9728f8f25ba8ff74db00303cdf3ba4784077f009"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 9,
                  "charOffset": 3467,
                  "charLength": 7,
                  "snippet": {
                    "text": "FullURL"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 124,
                  "startColumn": 1,
                  "charOffset": 3420,
                  "charLength": 172,
                  "snippet": {
                    "text": "        object = range(len(r.json()))\n\n        FullURL = r.json()[\"data\"][\"sources\"][0][\"url\"]\n        ParsedDomain = urlparse(FullURL)\n        Domain = ParsedDomain.netloc"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6bb472ff75961f7bf424a1bdb66a0e6c3c1fc93dac06d317b074c00049977d4e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 9,
                  "charOffset": 3523,
                  "charLength": 12,
                  "snippet": {
                    "text": "ParsedDomain"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 125,
                  "startColumn": 1,
                  "charOffset": 3458,
                  "charLength": 167,
                  "snippet": {
                    "text": "\n        FullURL = r.json()[\"data\"][\"sources\"][0][\"url\"]\n        ParsedDomain = urlparse(FullURL)\n        Domain = ParsedDomain.netloc\n        Path = ParsedDomain.path"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "edcd896d5a9f696c4b240010532fdba998619ddcc012743aa066ff5e04cd66a7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 9,
                  "charOffset": 3564,
                  "charLength": 6,
                  "snippet": {
                    "text": "Domain"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 126,
                  "startColumn": 1,
                  "charOffset": 3459,
                  "charLength": 167,
                  "snippet": {
                    "text": "        FullURL = r.json()[\"data\"][\"sources\"][0][\"url\"]\n        ParsedDomain = urlparse(FullURL)\n        Domain = ParsedDomain.netloc\n        Path = ParsedDomain.path\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "459413d472fd3b40c11a2ff96ba46244c7c2f1e7f8c6ecf108f8851c92be448b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 9,
                  "charOffset": 3601,
                  "charLength": 4,
                  "snippet": {
                    "text": "Path"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 127,
                  "startColumn": 1,
                  "charOffset": 3515,
                  "charLength": 141,
                  "snippet": {
                    "text": "        ParsedDomain = urlparse(FullURL)\n        Domain = ParsedDomain.netloc\n        Path = ParsedDomain.path\n\n        return RedirectPizza("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c86f5c9d60884c9481677749338f4ad382a15465c53ca536e87b4b986b52c544"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 9,
                  "charOffset": 5161,
                  "charLength": 7,
                  "snippet": {
                    "text": "FullURL"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 175,
                  "startColumn": 1,
                  "charOffset": 5120,
                  "charLength": 166,
                  "snippet": {
                    "text": "        pprint.pprint(r.json())\n\n        FullURL = r.json()[\"data\"][\"sources\"][0][\"url\"]\n        ParsedDomain = urlparse(FullURL)\n        Domain = ParsedDomain.netloc"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1277a391e6ada38a742d126abe87831681c592a5f0c0a1d7682a0e7e2d066d80"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 9,
                  "charOffset": 5217,
                  "charLength": 12,
                  "snippet": {
                    "text": "ParsedDomain"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 176,
                  "startColumn": 1,
                  "charOffset": 5152,
                  "charLength": 167,
                  "snippet": {
                    "text": "\n        FullURL = r.json()[\"data\"][\"sources\"][0][\"url\"]\n        ParsedDomain = urlparse(FullURL)\n        Domain = ParsedDomain.netloc\n        Path = ParsedDomain.path"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "feb84dddc7d942b005a077793a51b5ed7c0a66b9cd0b0b9fa7958925706404cb"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 9,
                  "charOffset": 5258,
                  "charLength": 6,
                  "snippet": {
                    "text": "Domain"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 177,
                  "startColumn": 1,
                  "charOffset": 5153,
                  "charLength": 167,
                  "snippet": {
                    "text": "        FullURL = r.json()[\"data\"][\"sources\"][0][\"url\"]\n        ParsedDomain = urlparse(FullURL)\n        Domain = ParsedDomain.netloc\n        Path = ParsedDomain.path\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ca6aa1247a5c791d5fd1066844fdb9445d5100a4c60392658c2c948c5f9db674"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/redirect_sdk.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 180,
                  "startColumn": 9,
                  "charOffset": 5295,
                  "charLength": 4,
                  "snippet": {
                    "text": "Path"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 178,
                  "startColumn": 1,
                  "charOffset": 5209,
                  "charLength": 141,
                  "snippet": {
                    "text": "        ParsedDomain = urlparse(FullURL)\n        Domain = ParsedDomain.netloc\n        Path = ParsedDomain.path\n\n        return RedirectPizza("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2f56ee7485e4ac71aa05e78a0f7ee701ce0f9d912cc158df7dbd91b5491f4da5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 9,
                  "charOffset": 2793,
                  "charLength": 2,
                  "snippet": {
                    "text": "IP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 107,
                  "startColumn": 1,
                  "charOffset": 2751,
                  "charLength": 181,
                  "snippet": {
                    "text": "\n    if not os.getenv(\"USEREAL\"):\n        IP = os.getenv(\"IP\")\n        databaseField = (\n            f\"{ConsoleColors.OKGREEN}Selected Database: External ({IP}){ConsoleColors.ENDC}\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e1edddbb67ec6e5e9b7bdcc3cc10a4893ec2c619f27e4cd4b01144001c5bd703"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 9,
                  "charOffset": 2822,
                  "charLength": 13,
                  "snippet": {
                    "text": "databaseField"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 108,
                  "startColumn": 1,
                  "charOffset": 2752,
                  "charLength": 190,
                  "snippet": {
                    "text": "    if not os.getenv(\"USEREAL\"):\n        IP = os.getenv(\"IP\")\n        databaseField = (\n            f\"{ConsoleColors.OKGREEN}Selected Database: External ({IP}){ConsoleColors.ENDC}\"\n        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b361734c0e91ce39835572d777c47ac3aaeda2ab3ffb101aa05b916853b718e6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 9,
                  "charOffset": 2961,
                  "charLength": 13,
                  "snippet": {
                    "text": "databaseField"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 112,
                  "startColumn": 1,
                  "charOffset": 2933,
                  "charLength": 230,
                  "snippet": {
                    "text": "        )\n    else:\n        databaseField = (\n            f\"{ConsoleColors.FAIL}Selected Database: localhost{ConsoleColors.ENDC}\\n{ConsoleColors.WARNING}WARNING: Not \"\n            f\"recommended to use SQLite.{ConsoleColors.ENDC} \""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b2b4c1586ffea1266609554719911d81061a350a326b954467af86983fb356bd"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 309,
                  "startColumn": 13,
                  "charOffset": 10644,
                  "charLength": 10,
                  "snippet": {
                    "text": "GITHUB_API"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 307,
                  "startColumn": 1,
                  "charOffset": 10578,
                  "charLength": 185,
                  "snippet": {
                    "text": "            data = \"\\n\".join([l.strip() for l in f])\n\n            GITHUB_API = \"https://api.github.com\"\n            API_TOKEN = os.getenv(\"GIST\")\n            url = GITHUB_API + \"/gists\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9a32f4b622c454003d55b0c16a80e591e632575ee58a9c8cea31e60bdb9ca095"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 310,
                  "startColumn": 13,
                  "charOffset": 10694,
                  "charLength": 9,
                  "snippet": {
                    "text": "API_TOKEN"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 308,
                  "startColumn": 1,
                  "charOffset": 10631,
                  "charLength": 196,
                  "snippet": {
                    "text": "\n            GITHUB_API = \"https://api.github.com\"\n            API_TOKEN = os.getenv(\"GIST\")\n            url = GITHUB_API + \"/gists\"\n            headers = {\"Authorization\": \"token %s\" % API_TOKEN}"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e031cb70ab01652eb37389963372628617f4bcc6caebbaeac735ef650d919de1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 323,
                  "startColumn": 13,
                  "charOffset": 11236,
                  "charLength": 2,
                  "snippet": {
                    "text": "ID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 321,
                  "startColumn": 1,
                  "charOffset": 11173,
                  "charLength": 156,
                  "snippet": {
                    "text": "            )\n            j = json.loads(res.text)\n            ID = j[\"id\"]\n            gisturl = f\"https://gist.github.com/{ID}\"\n            print(gisturl)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8adc90f292a894c6c08f5f44e88592fa37d461a7fd4915ad256a85599f17496b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 425,
                  "startColumn": 13,
                  "charOffset": 14995,
                  "charLength": 10,
                  "snippet": {
                    "text": "GITHUB_API"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 423,
                  "startColumn": 1,
                  "charOffset": 14929,
                  "charLength": 185,
                  "snippet": {
                    "text": "            data = \"\\n\".join([l.strip() for l in f])\n\n            GITHUB_API = \"https://api.github.com\"\n            API_TOKEN = os.getenv(\"GIST\")\n            url = GITHUB_API + \"/gists\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "26262cb55a1b6cff6c82a3373001b3d51829d482c3b642fe6e2a18233c8215e6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 426,
                  "startColumn": 13,
                  "charOffset": 15045,
                  "charLength": 9,
                  "snippet": {
                    "text": "API_TOKEN"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 424,
                  "startColumn": 1,
                  "charOffset": 14982,
                  "charLength": 196,
                  "snippet": {
                    "text": "\n            GITHUB_API = \"https://api.github.com\"\n            API_TOKEN = os.getenv(\"GIST\")\n            url = GITHUB_API + \"/gists\"\n            headers = {\"Authorization\": \"token %s\" % API_TOKEN}"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b4df12fd6381180c6aaf5ba307141c82a8cf2db0b41fd3d8a436a7cd6850d87c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 439,
                  "startColumn": 13,
                  "charOffset": 15587,
                  "charLength": 2,
                  "snippet": {
                    "text": "ID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 437,
                  "startColumn": 1,
                  "charOffset": 15524,
                  "charLength": 130,
                  "snippet": {
                    "text": "            )\n            j = json.loads(res.text)\n            ID = j[\"id\"]\n            gisturl = f\"https://gist.github.com/{ID}\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2d068b58e2d5414be1f6eb3e13ac9485357dd827b000d78156f0d3014553679e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 532,
                  "startColumn": 5,
                  "charOffset": 19459,
                  "charLength": 8,
                  "snippet": {
                    "text": "adminIDs"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 530,
                  "startColumn": 1,
                  "charOffset": 19408,
                  "charLength": 163,
                  "snippet": {
                    "text": "        blacklisted_users.append(p.discordID)\n\n    adminIDs = []\n    query = database.Administrators.select().where(\n        database.Administrators.TierLevel == 4"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8ef98e9fa2fbb5fe2a377ba9ebbd3d19fed8dd8dde72f32ce2f518b345dcdb35"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 582,
                  "startColumn": 5,
                  "charOffset": 20787,
                  "charLength": 12,
                  "snippet": {
                    "text": "initializeDB"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 580,
                  "startColumn": 1,
                  "charOffset": 20781,
                  "charLength": 117,
                  "snippet": {
                    "text": "\n\ndef initializeDB(bot):\n    \"\"\"\n    Initializes the database, and creates the needed table data if they don't exist."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "825ea5dbb090b68ca06f119860657b27a8c1d36cf10870fe6e4802509e39ea95"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 587,
                  "startColumn": 5,
                  "charOffset": 20955,
                  "charLength": 3,
                  "snippet": {
                    "text": "UpQ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 585,
                  "startColumn": 1,
                  "charOffset": 20899,
                  "charLength": 285,
                  "snippet": {
                    "text": "    \"\"\"\n    database.db.connect(reuse_if_open=True)\n    UpQ = database.Uptime.select().where(database.Uptime.id == 1)\n    CIQ = database.CheckInformation.select().where(database.CheckInformation.id == 1)\n    BTE = database.BaseTickerInfo.select().where(database.BaseTickerInfo.id == 1)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4106752ae3320f37e0b653ca3852a0060960757b5d83122b0bc416e1865246b5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 588,
                  "startColumn": 5,
                  "charOffset": 21021,
                  "charLength": 3,
                  "snippet": {
                    "text": "CIQ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 586,
                  "startColumn": 1,
                  "charOffset": 20907,
                  "charLength": 356,
                  "snippet": {
                    "text": "    database.db.connect(reuse_if_open=True)\n    UpQ = database.Uptime.select().where(database.Uptime.id == 1)\n    CIQ = database.CheckInformation.select().where(database.CheckInformation.id == 1)\n    BTE = database.BaseTickerInfo.select().where(database.BaseTickerInfo.id == 1)\n    SM = database.SandboxConfig.select().where(database.SandboxConfig.id == 1)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "999589eea4e62eb393bd1463735a6b50527c4468cb9954decd1c220f2fd9addc"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 589,
                  "startColumn": 5,
                  "charOffset": 21107,
                  "charLength": 3,
                  "snippet": {
                    "text": "BTE"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 587,
                  "startColumn": 1,
                  "charOffset": 20951,
                  "charLength": 313,
                  "snippet": {
                    "text": "    UpQ = database.Uptime.select().where(database.Uptime.id == 1)\n    CIQ = database.CheckInformation.select().where(database.CheckInformation.id == 1)\n    BTE = database.BaseTickerInfo.select().where(database.BaseTickerInfo.id == 1)\n    SM = database.SandboxConfig.select().where(database.SandboxConfig.id == 1)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1d929be20569818d8250bfae4c1a67fbcbd6d1c2cdc2b6cd10496beff6e2b26a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 590,
                  "startColumn": 5,
                  "charOffset": 21189,
                  "charLength": 2,
                  "snippet": {
                    "text": "SM"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 588,
                  "startColumn": 1,
                  "charOffset": 21017,
                  "charLength": 272,
                  "snippet": {
                    "text": "    CIQ = database.CheckInformation.select().where(database.CheckInformation.id == 1)\n    BTE = database.BaseTickerInfo.select().where(database.BaseTickerInfo.id == 1)\n    SM = database.SandboxConfig.select().where(database.SandboxConfig.id == 1)\n\n    if not UpQ.exists():"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cfe97c2fa3d629f8ddd1531e446d9842cc19e654cae6aaff6c297e2ce5cb8cc3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/mod.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 166,
                  "startColumn": 17,
                  "charOffset": 5884,
                  "charLength": 8,
                  "snippet": {
                    "text": "banEntry"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 164,
                  "startColumn": 1,
                  "charOffset": 5836,
                  "charLength": 132,
                  "snippet": {
                    "text": "\n            if member is None:\n                banEntry = await ctx.guild.fetch_ban(user)\n\n                if banEntry is not None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "88ce3dd2457db7221f7c3df7436b20a58fb6c8d006d1bf8be57a830c530b484b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/BanLogger.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 17,
                  "charOffset": 1764,
                  "charLength": 14,
                  "snippet": {
                    "text": "banReasonAUDIT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 61,
                  "startColumn": 1,
                  "charOffset": 1630,
                  "charLength": 226,
                  "snippet": {
                    "text": "            # We need to check who banned the person.\n            if moderator.id == 548410451818708993:  # Wick's ID\n                banReasonAUDIT = logs.reason\n\n                if \"No reason specified by\" in banReasonAUDIT:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "31defe0a6ac0d514f59e84d73888aceaaf373e40f0c0e6aa4ef23ed7b2c61adc"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/BanLogger.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 29,
                  "charOffset": 1885,
                  "charLength": 15,
                  "snippet": {
                    "text": "fullUsernameMOD"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 64,
                  "startColumn": 1,
                  "charOffset": 1793,
                  "charLength": 203,
                  "snippet": {
                    "text": "\n                if \"No reason specified by\" in banReasonAUDIT:\n                    random, fullUsernameMOD = banReasonAUDIT.split(\n                        \"No reason specified by \"\n                    )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "51891a2434e550c5956e5e255727afaee8c054b9ce27d7b16c0954bc6f0d6ddc"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/BanLogger.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 21,
                  "charOffset": 2017,
                  "charLength": 9,
                  "snippet": {
                    "text": "banReason"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 67,
                  "startColumn": 1,
                  "charOffset": 1925,
                  "charLength": 143,
                  "snippet": {
                    "text": "                        \"No reason specified by \"\n                    )\n                    banReason = \"None Specified\"\n\n                else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6ed72fc2942d6e1572b22ea13e0edc375db660b1baf67e5ca5bd67c29424f516"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/BanLogger.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 21,
                  "charOffset": 2089,
                  "charLength": 9,
                  "snippet": {
                    "text": "banReason"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 70,
                  "startColumn": 1,
                  "charOffset": 2046,
                  "charLength": 158,
                  "snippet": {
                    "text": "\n                else:\n                    banReason = re.match(r\"[^[]*\\[([^]]*)\\]\", banReasonAUDIT).groups()[\n                        0\n                    ]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d6019206eabd1c10c03baf992f83c3a35fbff3b750dd4fb1c5cf6755ee7bbddb"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/BanLogger.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 33,
                  "charOffset": 2263,
                  "charLength": 15,
                  "snippet": {
                    "text": "fullUsernameMOD"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 75,
                  "startColumn": 1,
                  "charOffset": 2205,
                  "charLength": 190,
                  "snippet": {
                    "text": "\n                    try:\n                        random, fullUsernameMOD = banReasonAUDIT.split(\"- \")\n                    except ValueError:\n                        fullUsernameMOD = \"Wick\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3f3e64aac90507a0028f1be50ab4a9a4c82334a46e8264f9d92371d3ac8094a0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/BanLogger.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 25,
                  "charOffset": 2371,
                  "charLength": 15,
                  "snippet": {
                    "text": "fullUsernameMOD"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 77,
                  "startColumn": 1,
                  "charOffset": 2231,
                  "charLength": 183,
                  "snippet": {
                    "text": "                        random, fullUsernameMOD = banReasonAUDIT.split(\"- \")\n                    except ValueError:\n                        fullUsernameMOD = \"Wick\"\n\n            else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2e3928a9dac23bf3892da8e79b61655ac97a9f17ca4d64b8d85b479541a736a4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/BanLogger.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 17,
                  "charOffset": 2431,
                  "charLength": 9,
                  "snippet": {
                    "text": "banReason"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 80,
                  "startColumn": 1,
                  "charOffset": 2396,
                  "charLength": 191,
                  "snippet": {
                    "text": "\n            else:\n                banReason = logs.reason\n                # Get full username with tag\n                fullUsernameMOD = f\"{moderator.display_name}#{moderator.discriminator}\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5725d43809b21b8bb29e68dc24dba8b2082d9c27572110298866bde6dbe8e7b4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/BanLogger.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 17,
                  "charOffset": 2516,
                  "charLength": 15,
                  "snippet": {
                    "text": "fullUsernameMOD"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 82,
                  "startColumn": 1,
                  "charOffset": 2415,
                  "charLength": 248,
                  "snippet": {
                    "text": "                banReason = logs.reason\n                # Get full username with tag\n                fullUsernameMOD = f\"{moderator.display_name}#{moderator.discriminator}\"\n\n            # Okay now we got our reason, we need to get a few more things"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5d8506a10efe9f22f0b05cae952b75581946ee3d1e2bfd1e4f9931620c435aa3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/BanLogger.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 13,
                  "charOffset": 2797,
                  "charLength": 18,
                  "snippet": {
                    "text": "fullUsernameTARGET"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 88,
                  "startColumn": 1,
                  "charOffset": 2743,
                  "charLength": 187,
                  "snippet": {
                    "text": "\n            # Get full username with tag\n            fullUsernameTARGET = f\"{target.display_name}#{target.discriminator}\"\n\n            # Get everything into a list so we can bulk insert."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cbfba8fc9562c52947a7e127cf73fb6843adfde989a862fad93a92ef1b4368ae"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/BanLogger.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 13,
                  "charOffset": 3266,
                  "charLength": 10,
                  "snippet": {
                    "text": "ModChannel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 104,
                  "startColumn": 1,
                  "charOffset": 3181,
                  "charLength": 169,
                  "snippet": {
                    "text": "            sheet.insert_row(row, 2)  # Insert data, and boom. We done!\n\n            ModChannel = self.bot.get_channel(self.ModLogID)\n\n            embed = discord.Embed("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b38170b1b86ffd726d9068b47df5cd7b671a3d7058b130450414e4ca5b4737b1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 9,
                  "charOffset": 4609,
                  "charLength": 9,
                  "snippet": {
                    "text": "msgIDList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 127,
                  "startColumn": 1,
                  "charOffset": 4559,
                  "charLength": 135,
                  "snippet": {
                    "text": "\n        query = database.Voting.select()\n        msgIDList = [msg.msgID for msg in query]\n\n        interMsgID = interaction.message.id"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e080ea2bc64d81c23dd7a7272e9f1d72316e25ad7e5ba7b8d5bf80080c4aebc3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 9,
                  "charOffset": 4659,
                  "charLength": 10,
                  "snippet": {
                    "text": "interMsgID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 129,
                  "startColumn": 1,
                  "charOffset": 4601,
                  "charLength": 172,
                  "snippet": {
                    "text": "        msgIDList = [msg.msgID for msg in query]\n\n        interMsgID = interaction.message.id\n        print(f\"interMsgID: {interMsgID}\")\n        if interMsgID in msgIDList:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6bb0059515c49a871ad0394dea38b6841d5a0bffad6475ea258516cc7b15068b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 13,
                  "charOffset": 4786,
                  "charLength": 13,
                  "snippet": {
                    "text": "componentsStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 132,
                  "startColumn": 1,
                  "charOffset": 4695,
                  "charLength": 209,
                  "snippet": {
                    "text": "        print(f\"interMsgID: {interMsgID}\")\n        if interMsgID in msgIDList:\n            componentsStr = (\n                database.Voting.select()\n                .where(database.Voting.msgID == interMsgID)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8dc3feee3521e74dd3ad58f910390f8312742b353428b0ad991779183abf5fac"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 13,
                  "charOffset": 4982,
                  "charLength": 14,
                  "snippet": {
                    "text": "componentsDict"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 138,
                  "startColumn": 1,
                  "charOffset": 4928,
                  "charLength": 150,
                  "snippet": {
                    "text": "                .components\n            )\n            componentsDict = ast.literal_eval(componentsStr)\n            interactionData = interaction.data\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ac876b3a79b23a5c2138e6c3a3d19f548ea5a96f75ce9a6f39504e202bd8ca43"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 13,
                  "charOffset": 5043,
                  "charLength": 15,
                  "snippet": {
                    "text": "interactionData"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 139,
                  "startColumn": 1,
                  "charOffset": 4956,
                  "charLength": 178,
                  "snippet": {
                    "text": "            )\n            componentsDict = ast.literal_eval(componentsStr)\n            interactionData = interaction.data\n\n            print(componentsDict, type(componentsDict))"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c1414241d8bf3b55f1d0911552d3b11fd3a91c94d322c735d9022ddb665c9e7c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 9,
                  "charOffset": 5700,
                  "charLength": 19,
                  "snippet": {
                    "text": "acceptedChannelsStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 163,
                  "startColumn": 1,
                  "charOffset": 5640,
                  "charLength": 165,
                  "snippet": {
                    "text": "    async def create(self, ctx: commands.Context):\n\n        acceptedChannelsStr = \"\"\n        noneChannels = []\n        for channelID in self.acceptedAnnouncementCHs:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0ef11d7752b07a453680ec444244c167961f3ea591d1f606921232f19207f4a8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 166,
                  "startColumn": 9,
                  "charOffset": 5733,
                  "charLength": 12,
                  "snippet": {
                    "text": "noneChannels"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 164,
                  "startColumn": 1,
                  "charOffset": 5691,
                  "charLength": 176,
                  "snippet": {
                    "text": "\n        acceptedChannelsStr = \"\"\n        noneChannels = []\n        for channelID in self.acceptedAnnouncementCHs:\n            acceptedChannel = self.bot.get_channel(channelID)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "966def45c527a6482dc8598a4c91d5812978fdff9487a16d53944988d64234c2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 13,
                  "charOffset": 5818,
                  "charLength": 15,
                  "snippet": {
                    "text": "acceptedChannel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 166,
                  "startColumn": 1,
                  "charOffset": 5725,
                  "charLength": 187,
                  "snippet": {
                    "text": "        noneChannels = []\n        for channelID in self.acceptedAnnouncementCHs:\n            acceptedChannel = self.bot.get_channel(channelID)\n\n            if acceptedChannel is not None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7a6c15b9f9f504762af8bc90dcb4764720952367f322a30295877caec3005a52"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 9,
                  "charOffset": 6161,
                  "charLength": 8,
                  "snippet": {
                    "text": "randomID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 175,
                  "startColumn": 1,
                  "charOffset": 6105,
                  "charLength": 254,
                  "snippet": {
                    "text": "        print(f\"noneChannels: {noneChannels}\")\n\n        randomID = \"\".join(random.choices(string.ascii_uppercase + string.digits, k=6))\n        tempVoteCHsPath = f\"./TEMP_voteCHS_{randomID}.txt\"\n        tempVoteCHsFilename = \"TEMP_voteCHS_{randomID}.txt\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1c0508df0ca50d1644082343a933d0f29aa63141787db0de3bbee36bd8f1a7af"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 9,
                  "charOffset": 6249,
                  "charLength": 15,
                  "snippet": {
                    "text": "tempVoteCHsPath"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 176,
                  "startColumn": 1,
                  "charOffset": 6152,
                  "charLength": 208,
                  "snippet": {
                    "text": "\n        randomID = \"\".join(random.choices(string.ascii_uppercase + string.digits, k=6))\n        tempVoteCHsPath = f\"./TEMP_voteCHS_{randomID}.txt\"\n        tempVoteCHsFilename = \"TEMP_voteCHS_{randomID}.txt\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9f580d05cb24189d53331aaf21c9f96023e5be206c76bd8b549abeedd6488917"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 9,
                  "charOffset": 6308,
                  "charLength": 19,
                  "snippet": {
                    "text": "tempVoteCHsFilename"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 177,
                  "startColumn": 1,
                  "charOffset": 6153,
                  "charLength": 266,
                  "snippet": {
                    "text": "        randomID = \"\".join(random.choices(string.ascii_uppercase + string.digits, k=6))\n        tempVoteCHsPath = f\"./TEMP_voteCHS_{randomID}.txt\"\n        tempVoteCHsFilename = \"TEMP_voteCHS_{randomID}.txt\"\n\n        tempVoteCHsFileWrite = open(tempVoteCHsPath, \"w+\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e3b2aec9621051a48a0da2b40c794344f952c0e235fa5bc803f4339e07975cbb"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 181,
                  "startColumn": 9,
                  "charOffset": 6369,
                  "charLength": 20,
                  "snippet": {
                    "text": "tempVoteCHsFileWrite"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 179,
                  "startColumn": 1,
                  "charOffset": 6300,
                  "charLength": 241,
                  "snippet": {
                    "text": "        tempVoteCHsFilename = \"TEMP_voteCHS_{randomID}.txt\"\n\n        tempVoteCHsFileWrite = open(tempVoteCHsPath, \"w+\")\n        tempVoteCHsFileWrite.write(f\"Accepted channels:\" f\"\\n{acceptedChannelsStr}\")\n        tempVoteCHsFileWrite.close()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3dfcee39e8765cd64044efae407019b93ece2c6a4d6381f51d09d2ad2d23aca2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 9,
                  "charOffset": 6550,
                  "charLength": 15,
                  "snippet": {
                    "text": "tempVoteCHsFile"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 182,
                  "startColumn": 1,
                  "charOffset": 6420,
                  "charLength": 243,
                  "snippet": {
                    "text": "        tempVoteCHsFileWrite.write(f\"Accepted channels:\" f\"\\n{acceptedChannelsStr}\")\n        tempVoteCHsFileWrite.close()\n        tempVoteCHsFile = discord.File(tempVoteCHsPath, filename=tempVoteCHsFilename)\n\n        os.remove(tempVoteCHsPath)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e0538e0b54a1af23dd4602b66b7ad9e8de098fd2e964ea353a400e8a77f5bfda"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 188,
                  "startColumn": 9,
                  "charOffset": 6673,
                  "charLength": 11,
                  "snippet": {
                    "text": "ch_snakePit"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 186,
                  "startColumn": 1,
                  "charOffset": 6629,
                  "charLength": 228,
                  "snippet": {
                    "text": "        os.remove(tempVoteCHsPath)\n\n        ch_snakePit = self.bot.get_channel(TechID.ch_snake_pit)\n        msgVoteCHsFile = await ch_snakePit.send(file=tempVoteCHsFile)\n        voteCHsFileURL = msgVoteCHsFile.attachments[0].url"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8047b802be72bab5329565088ae349c06e06b4529d901bd1571b5e46e7ecfa2b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 9,
                  "charOffset": 6737,
                  "charLength": 14,
                  "snippet": {
                    "text": "msgVoteCHsFile"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 187,
                  "startColumn": 1,
                  "charOffset": 6664,
                  "charLength": 231,
                  "snippet": {
                    "text": "\n        ch_snakePit = self.bot.get_channel(TechID.ch_snake_pit)\n        msgVoteCHsFile = await ch_snakePit.send(file=tempVoteCHsFile)\n        voteCHsFileURL = msgVoteCHsFile.attachments[0].url\n        await msgVoteCHsFile.delete()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bab1e4c19db797d40f48674a5d9e3c8b1a9c794945ddb434baee17f1baf71f7e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 190,
                  "startColumn": 9,
                  "charOffset": 6807,
                  "charLength": 14,
                  "snippet": {
                    "text": "voteCHsFileURL"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 188,
                  "startColumn": 1,
                  "charOffset": 6665,
                  "charLength": 267,
                  "snippet": {
                    "text": "        ch_snakePit = self.bot.get_channel(TechID.ch_snake_pit)\n        msgVoteCHsFile = await ch_snakePit.send(file=tempVoteCHsFile)\n        voteCHsFileURL = msgVoteCHsFile.attachments[0].url\n        await msgVoteCHsFile.delete()\n        embedServer = discord.Embed("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0102e3994b4724ce2b70fcf4f05a5d467993deda0e8eb99b521ed837e242ef74"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 192,
                  "startColumn": 9,
                  "charOffset": 6904,
                  "charLength": 11,
                  "snippet": {
                    "text": "embedServer"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 190,
                  "startColumn": 1,
                  "charOffset": 6799,
                  "charLength": 205,
                  "snippet": {
                    "text": "        voteCHsFileURL = msgVoteCHsFile.attachments[0].url\n        await msgVoteCHsFile.delete()\n        embedServer = discord.Embed(\n            color=Colors.ss_blurple,\n            title=\"Create Voting\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "174b9254ffe28cbad638425988fcf6914fc4938a83b60770069c4be665050406"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 202,
                  "startColumn": 9,
                  "charOffset": 7474,
                  "charLength": 15,
                  "snippet": {
                    "text": "viewAcceptedCHs"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 200,
                  "startColumn": 1,
                  "charOffset": 7382,
                  "charLength": 188,
                  "snippet": {
                    "text": "        embedServer.set_footer(text=\"Type 'cancel' to cancel | Timeout after 60s\")\n\n        viewAcceptedCHs = discord.ui.View()\n        viewAcceptedCHs.add_item(\n            ButtonHandler("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "66523ac524b48fb89e45570e8b09f984e35c69dfd11dc003f5fbeff67688dfa7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 210,
                  "startColumn": 9,
                  "charOffset": 7730,
                  "charLength": 8,
                  "snippet": {
                    "text": "msgSetup"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 208,
                  "startColumn": 1,
                  "charOffset": 7698,
                  "charLength": 152,
                  "snippet": {
                    "text": "            )\n        )\n        msgSetup = await ctx.send(embed=embedServer, view=viewAcceptedCHs)\n\n        def msgInputCheck(message: discord.Message):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6eecc9960949dc1425511e8f69ba483ea1fdb4d29720695d2fb2ab9b99efe992"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 212,
                  "startColumn": 13,
                  "charOffset": 7810,
                  "charLength": 13,
                  "snippet": {
                    "text": "msgInputCheck"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 210,
                  "startColumn": 1,
                  "charOffset": 7722,
                  "charLength": 212,
                  "snippet": {
                    "text": "        msgSetup = await ctx.send(embed=embedServer, view=viewAcceptedCHs)\n\n        def msgInputCheck(message: discord.Message):\n            return message.channel == ctx.channel and message.author == ctx.author\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a409f9747bd063dede3d0b1fdd19f66c1dec3ee56adec55cfd93213f12d84db5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 218,
                  "startColumn": 9,
                  "charOffset": 8018,
                  "charLength": 18,
                  "snippet": {
                    "text": "datetimeExpiration"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 216,
                  "startColumn": 1,
                  "charOffset": 7957,
                  "charLength": 161,
                  "snippet": {
                    "text": "        text = ...  # type: str\n        options = []\n        datetimeExpiration = ...  # type: datetime.datetime\n\n        msgError = ...  # type: discord.Message"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c691d58f03c843ae66ce468d39ee87fa07a4d39bad37d89d08d9fcb79cfa65f2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 220,
                  "startColumn": 9,
                  "charOffset": 8079,
                  "charLength": 8,
                  "snippet": {
                    "text": "msgError"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 218,
                  "startColumn": 1,
                  "charOffset": 8010,
                  "charLength": 147,
                  "snippet": {
                    "text": "        datetimeExpiration = ...  # type: datetime.datetime\n\n        msgError = ...  # type: discord.Message\n        viewReset = discord.ui.View()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1ea9c5239e7b79c535a4c7a312f91d5c4246679d9e19e32d0477aff3a00773a0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 221,
                  "startColumn": 9,
                  "charOffset": 8127,
                  "charLength": 9,
                  "snippet": {
                    "text": "viewReset"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 219,
                  "startColumn": 1,
                  "charOffset": 8070,
                  "charLength": 117,
                  "snippet": {
                    "text": "\n        msgError = ...  # type: discord.Message\n        viewReset = discord.ui.View()\n\n        setupFinished = False"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "99f77692edb0dd383fe0674b3684b7081477d0f486f838ac23453078c01622b0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 9,
                  "charOffset": 8166,
                  "charLength": 13,
                  "snippet": {
                    "text": "setupFinished"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 221,
                  "startColumn": 1,
                  "charOffset": 8119,
                  "charLength": 106,
                  "snippet": {
                    "text": "        viewReset = discord.ui.View()\n\n        setupFinished = False\n        index = 0\n        while True:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "aff1ded77b9f666d2eded5235bbcc30001f67179fd1ee9bcd5461c7c1c10d24a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 227,
                  "startColumn": 17,
                  "charOffset": 8259,
                  "charLength": 11,
                  "snippet": {
                    "text": "msgResponse"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 225,
                  "startColumn": 1,
                  "charOffset": 8206,
                  "charLength": 189,
                  "snippet": {
                    "text": "        while True:\n            try:\n                msgResponse: discord.Message = await self.bot.wait_for(\n                    \"message\", check=msgInputCheck, timeout=60\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "716ca7c331ab18d4379f0c5eafaf081c7d0be713958d3362758419a4a5351d35"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 231,
                  "startColumn": 17,
                  "charOffset": 8453,
                  "charLength": 12,
                  "snippet": {
                    "text": "embedTimeout"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 229,
                  "startColumn": 1,
                  "charOffset": 8378,
                  "charLength": 185,
                  "snippet": {
                    "text": "                )\n            except asyncio.TimeoutError:\n                embedTimeout = discord.Embed(\n                    color=Colors.red,\n                    title=\"Create Voting\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a19ba35fb2fdb0550d1d56b92a53873b5e25082a77ba726fb382f45ceb0e59ef"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 251,
                  "startColumn": 17,
                  "charOffset": 9108,
                  "charLength": 10,
                  "snippet": {
                    "text": "msgContent"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 249,
                  "startColumn": 1,
                  "charOffset": 9073,
                  "charLength": 119,
                  "snippet": {
                    "text": "\n            else:\n                msgContent = msgResponse.content\n\n                if msgContent.lower() == \"cancel\":"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "32291478d266a1ae0c0721605caceae0e6e9faefd4d5acb8aa76273a8614e234"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 254,
                  "startColumn": 21,
                  "charOffset": 9213,
                  "charLength": 11,
                  "snippet": {
                    "text": "embedCancel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 252,
                  "startColumn": 1,
                  "charOffset": 9141,
                  "charLength": 189,
                  "snippet": {
                    "text": "\n                if msgContent.lower() == \"cancel\":\n                    embedCancel = discord.Embed(\n                        color=Colors.red,\n                        title=\"Create Voting\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "60e0c25c4d6f3560ee5f64a863bc067a1fa49cbb52a7f805b46d96023b4f46eb"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 278,
                  "startColumn": 21,
                  "charOffset": 10052,
                  "charLength": 13,
                  "snippet": {
                    "text": "embedNotFound"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 276,
                  "startColumn": 1,
                  "charOffset": 10002,
                  "charLength": 169,
                  "snippet": {
                    "text": "                        pass\n\n                    embedNotFound = discord.Embed(\n                        color=Colors.red,\n                        title=\"Create Voting\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b2184f8902c28001aa82ee298055ec6130ee3f1ebdeddd021bcf979d1b9c7350"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 289,
                  "startColumn": 21,
                  "charOffset": 10647,
                  "charLength": 12,
                  "snippet": {
                    "text": "tempChannels"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 287,
                  "startColumn": 1,
                  "charOffset": 10550,
                  "charLength": 220,
                  "snippet": {
                    "text": "                    embedNotFound.set_footer(text=\"Use 'cancel' to cancel\")\n\n                    tempChannels = []\n                    if \",\" in msgContent:\n                        channelsStrList = msgContent.split(\",\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c95357c33ef2acf73f4635633b3ee0c1063ecb4b2fc592e0d8cc7bec1443aff1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 291,
                  "startColumn": 25,
                  "charOffset": 10731,
                  "charLength": 15,
                  "snippet": {
                    "text": "channelsStrList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 289,
                  "startColumn": 1,
                  "charOffset": 10627,
                  "charLength": 267,
                  "snippet": {
                    "text": "                    tempChannels = []\n                    if \",\" in msgContent:\n                        channelsStrList = msgContent.split(\",\")\n                        for channelStr in channelsStrList:\n                            stripChannelStr = channelStr.strip()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1ab6e40ad9a70f512c41b758e982ee31a60f0805cade60e3e80374b99a8a0da6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 293,
                  "startColumn": 29,
                  "charOffset": 10858,
                  "charLength": 15,
                  "snippet": {
                    "text": "stripChannelStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 291,
                  "startColumn": 1,
                  "charOffset": 10707,
                  "charLength": 298,
                  "snippet": {
                    "text": "                        channelsStrList = msgContent.split(\",\")\n                        for channelStr in channelsStrList:\n                            stripChannelStr = channelStr.strip()\n                            channelsStrList[\n                                channelsStrList.index(channelStr)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7c4c915632a174b6379d03818fdaa5bcb25049edf73512998c172f50626e3a61"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 317,
                  "startColumn": 29,
                  "charOffset": 11940,
                  "charLength": 8,
                  "snippet": {
                    "text": "msgError"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 315,
                  "startColumn": 1,
                  "charOffset": 11855,
                  "charLength": 227,
                  "snippet": {
                    "text": "                            )\n                        ):\n                            msgError = await ctx.send(embed=embedNotFound)\n                            try:\n                                await msgError.delete(delay=7)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "21898b55c17789dc7ecc9eca52261aa8de46b6d63285aaa8d68b3c6163e544ca"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 326,
                  "startColumn": 25,
                  "charOffset": 12245,
                  "charLength": 10,
                  "snippet": {
                    "text": "channelStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 324,
                  "startColumn": 1,
                  "charOffset": 12194,
                  "charLength": 207,
                  "snippet": {
                    "text": "\n                    else:\n                        channelStr = msgContent.strip()\n                        if channelStr.isdigit():\n                            channel = self.bot.get_channel(int(channelStr))"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7c6030ae625cf1808e34eb1ec276fb57c4837e91a4c963b98b1027c810abdcf1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 338,
                  "startColumn": 29,
                  "charOffset": 12755,
                  "charLength": 8,
                  "snippet": {
                    "text": "msgError"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 336,
                  "startColumn": 1,
                  "charOffset": 12622,
                  "charLength": 275,
                  "snippet": {
                    "text": "                            or channel.id not in self.acceptedAnnouncementCHs\n                        ):\n                            msgError = await ctx.send(embed=embedNotFound)\n                            try:\n                                await msgError.delete(delay=7)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c02f0b91de38ea4e32dcb77310dbb65933ce4b02d57a975b198d27a8d1ff5013"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 350,
                  "startColumn": 21,
                  "charOffset": 13129,
                  "charLength": 9,
                  "snippet": {
                    "text": "embedText"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 348,
                  "startColumn": 1,
                  "charOffset": 13064,
                  "charLength": 187,
                  "snippet": {
                    "text": "                    channels = tempChannels\n\n                    embedText = discord.Embed(\n                        color=Colors.ss_blurple,\n                        title=\"Create Voting\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a61bdc8ad1e8d960fa7864e0544982b3ae8b3f78da8f919f2f2a4e53ba3e3ed1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 377,
                  "startColumn": 25,
                  "charOffset": 14356,
                  "charLength": 12,
                  "snippet": {
                    "text": "embedTooLong"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 375,
                  "startColumn": 1,
                  "charOffset": 14284,
                  "charLength": 198,
                  "snippet": {
                    "text": "\n                    if len(msgContent) > 2000:\n                        embedTooLong = discord.Embed(\n                            color=Colors.red,\n                            title=\"Create Voting\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "88fecccfdc37369db371abe80d97db6b4e72c83bf417f188b4d4a6512112e4a1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 386,
                  "startColumn": 25,
                  "charOffset": 14883,
                  "charLength": 10,
                  "snippet": {
                    "text": "msgTooLong"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 384,
                  "startColumn": 1,
                  "charOffset": 14754,
                  "charLength": 266,
                  "snippet": {
                    "text": "                        )\n                        embedTooLong.set_footer(text=\"Use 'cancel' to cancel\")\n                        msgTooLong = await ctx.send(embed=embedTooLong)\n                        try:\n                            await msgTooLong.delete(delay=7)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d3c2cda39bd63d505f393846b45f00634fbf24950af1b56d45ce5cba89b51153"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 396,
                  "startColumn": 21,
                  "charOffset": 15180,
                  "charLength": 9,
                  "snippet": {
                    "text": "embedText"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 394,
                  "startColumn": 1,
                  "charOffset": 15121,
                  "charLength": 181,
                  "snippet": {
                    "text": "                    text = msgContent\n\n                    embedText = discord.Embed(\n                        color=Colors.ss_blurple,\n                        title=\"Create Voting\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b971c5dd26ed6be89f045d7671a8ed6e1eef53c80f3f82300ba2f0ba4c708985"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 420,
                  "startColumn": 21,
                  "charOffset": 16240,
                  "charLength": 14,
                  "snippet": {
                    "text": "optionsStrList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 418,
                  "startColumn": 1,
                  "charOffset": 16190,
                  "charLength": 199,
                  "snippet": {
                    "text": "                        pass\n\n                    optionsStrList = msgContent.split(\",\")\n                    for optionStr in optionsStrList:\n                        options.append(optionStr.strip())"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0c4a03d5ef85accb8c284281a6e5fcf33a5516b1e4c9aad6429ab3ef08cfc4c6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 424,
                  "startColumn": 21,
                  "charOffset": 16411,
                  "charLength": 13,
                  "snippet": {
                    "text": "embedDuration"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 422,
                  "startColumn": 1,
                  "charOffset": 16332,
                  "charLength": 205,
                  "snippet": {
                    "text": "                        options.append(optionStr.strip())\n\n                    embedDuration = discord.Embed(\n                        color=Colors.ss_blurple,\n                        title=\"Create Voting\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "099d1a95e6d0e22cb3a10bf7c23405bc77780116b32acc09d68c6c0bba876cb7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 447,
                  "startColumn": 21,
                  "charOffset": 17342,
                  "charLength": 8,
                  "snippet": {
                    "text": "timeDict"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 445,
                  "startColumn": 1,
                  "charOffset": 17292,
                  "charLength": 188,
                  "snippet": {
                    "text": "                        pass\n\n                    timeDict: dict = string_time_convert(msgContent)\n                    days = timeDict[\"days\"]\n                    hours = timeDict[\"hours\"]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d8788d1502139433c88d781330dad0be181868e279566be4f7a976f62f970240"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 459,
                  "startColumn": 25,
                  "charOffset": 17821,
                  "charLength": 13,
                  "snippet": {
                    "text": "embedNotFound"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 457,
                  "startColumn": 1,
                  "charOffset": 17730,
                  "charLength": 218,
                  "snippet": {
                    "text": "                        and seconds is None\n                    ):\n                        embedNotFound = discord.Embed(\n                            color=Colors.red,\n                            title=\"Create Voting\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "68a49e112fb468ea1a931358363c8cbbc52d98e0de5deb304cdfc8d0ca7b6b8d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 468,
                  "startColumn": 25,
                  "charOffset": 18349,
                  "charLength": 8,
                  "snippet": {
                    "text": "msgError"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 466,
                  "startColumn": 1,
                  "charOffset": 18219,
                  "charLength": 264,
                  "snippet": {
                    "text": "                        )\n                        embedNotFound.set_footer(text=\"Use 'cancel' to cancel\")\n                        msgError = await ctx.send(embed=embedNotFound)\n                        try:\n                            await msgError.delete(delay=7)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "53920abf74102848ac2dd5ddf2edbac4e499a8b3d6ac51e1993d9fdccc47dfbf"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 488,
                  "startColumn": 21,
                  "charOffset": 18902,
                  "charLength": 11,
                  "snippet": {
                    "text": "datetimeNow"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 486,
                  "startColumn": 1,
                  "charOffset": 18845,
                  "charLength": 174,
                  "snippet": {
                    "text": "                        seconds = 0\n\n                    datetimeNow = datetime.datetime.now(self.est)\n                    try:\n                        datetimeExpiration = ("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f66fa35d65da1acbc8052a4fc0fdade68ee09e2b7937ee44c6703e7ac37771f5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 490,
                  "startColumn": 25,
                  "charOffset": 18997,
                  "charLength": 18,
                  "snippet": {
                    "text": "datetimeExpiration"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 488,
                  "startColumn": 1,
                  "charOffset": 18882,
                  "charLength": 237,
                  "snippet": {
                    "text": "                    datetimeNow = datetime.datetime.now(self.est)\n                    try:\n                        datetimeExpiration = (\n                            datetimeNow\n                            + datetime.timedelta(days=days)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d6e5a7371c042fe22ed4d7d10420ede9c376709e8474e5fba2f2f2e0d8fc361e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 498,
                  "startColumn": 25,
                  "charOffset": 19416,
                  "charLength": 13,
                  "snippet": {
                    "text": "embedOverflow"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 496,
                  "startColumn": 1,
                  "charOffset": 19314,
                  "charLength": 229,
                  "snippet": {
                    "text": "                        )\n                    except OverflowError as _error:\n                        embedOverflow = discord.Embed(\n                            color=Colors.red,\n                            title=\"Create Voting\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "02063eed404fb3b8d727ef97fb771486a3698a164abeb2b42b89aa0460eb0d22"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 508,
                  "startColumn": 25,
                  "charOffset": 20046,
                  "charLength": 8,
                  "snippet": {
                    "text": "msgError"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 506,
                  "startColumn": 1,
                  "charOffset": 19916,
                  "charLength": 264,
                  "snippet": {
                    "text": "                        )\n                        embedOverflow.set_footer(text=\"Use 'cancel' to cancel\")\n                        msgError = await ctx.send(embed=embedOverflow)\n                        try:\n                            await msgError.delete(delay=7)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5004534dbfd950920245941b4c05259ceb09a049b2a836c84e71316808190d3c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 516,
                  "startColumn": 21,
                  "charOffset": 20301,
                  "charLength": 11,
                  "snippet": {
                    "text": "embedFinish"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 514,
                  "startColumn": 1,
                  "charOffset": 20247,
                  "charLength": 178,
                  "snippet": {
                    "text": "                        continue\n\n                    embedFinish = discord.Embed(\n                        color=Colors.ss_blurple,\n                        title=\"Create Voting\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "04f5df15f5459d3dad0e4bfdbade4003a88b01a99495758250292c70db7f7564"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 528,
                  "startColumn": 21,
                  "charOffset": 20825,
                  "charLength": 17,
                  "snippet": {
                    "text": "expLongDateTimeTP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 526,
                  "startColumn": 1,
                  "charOffset": 20760,
                  "charLength": 223,
                  "snippet": {
                    "text": "                    await msgSetup.delete()\n\n                    expLongDateTimeTP = discord.utils.format_dt(datetimeExpiration, \"F\")\n                    expRelativeTimeTP = discord.utils.format_dt(datetimeExpiration, \"R\")\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "db774d4756ff12d693cfbdd39d7ba8ec7f3b29632fa2937c9ed2080f44a89235"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 529,
                  "startColumn": 21,
                  "charOffset": 20914,
                  "charLength": 17,
                  "snippet": {
                    "text": "expRelativeTimeTP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 527,
                  "startColumn": 1,
                  "charOffset": 20804,
                  "charLength": 228,
                  "snippet": {
                    "text": "\n                    expLongDateTimeTP = discord.utils.format_dt(datetimeExpiration, \"F\")\n                    expRelativeTimeTP = discord.utils.format_dt(datetimeExpiration, \"R\")\n\n                    embedPseudo = discord.Embed("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e1a6623efdf78862be54279777d51a2d52b6c3231146b43c427f1cdd87acb97f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 531,
                  "startColumn": 21,
                  "charOffset": 21004,
                  "charLength": 11,
                  "snippet": {
                    "text": "embedPseudo"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 529,
                  "startColumn": 1,
                  "charOffset": 20894,
                  "charLength": 227,
                  "snippet": {
                    "text": "                    expRelativeTimeTP = discord.utils.format_dt(datetimeExpiration, \"R\")\n\n                    embedPseudo = discord.Embed(\n                        color=Colors.ss_blurple,\n                        title=\"Voting\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e99553ab6e4cadfcd9c20857ed341b256f0b06b1cb0ba916d327c4a9506504e5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 542,
                  "startColumn": 21,
                  "charOffset": 21519,
                  "charLength": 12,
                  "snippet": {
                    "text": "viewOverview"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 540,
                  "startColumn": 1,
                  "charOffset": 21476,
                  "charLength": 119,
                  "snippet": {
                    "text": "                    )\n\n                    viewOverview = discord.ui.View()\n\n                    for option in options:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "37235b1272b838ee39c20ca1c6395129542d8e36e06af833bc9d1b842b464233"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 546,
                  "startColumn": 25,
                  "charOffset": 21621,
                  "charLength": 11,
                  "snippet": {
                    "text": "customEmoji"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 544,
                  "startColumn": 1,
                  "charOffset": 21553,
                  "charLength": 235,
                  "snippet": {
                    "text": "                    for option in options:\n\n                        customEmoji = search_custom_emoji(option)\n                        if customEmoji is not None:\n                            option = option.replace(f\"{customEmoji}\", \"\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a2c280432acebf63fa2dded883fd77f0774e9150332e92f9db0e92a56adce891"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 561,
                  "startColumn": 21,
                  "charOffset": 22240,
                  "charLength": 13,
                  "snippet": {
                    "text": "setupFinished"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 559,
                  "startColumn": 1,
                  "charOffset": 22146,
                  "charLength": 141,
                  "snippet": {
                    "text": "                    await ctx.send(embed=embedPseudo, view=viewOverview)\n\n                    setupFinished = True\n                    break\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9761e5261221f795074b24ae112e0361a579014180bbe97a90e1b145288d391f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 570,
                  "startColumn": 13,
                  "charOffset": 22425,
                  "charLength": 11,
                  "snippet": {
                    "text": "strChannels"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 568,
                  "startColumn": 1,
                  "charOffset": 22391,
                  "charLength": 120,
                  "snippet": {
                    "text": "                pass\n\n            strChannels = \"\"\n            for channel in channels:\n                strChannels += ("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2d764f050c6c7d8b89752ebbe83ebe061ad43e48aada2e68f5f7695108131b30"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 576,
                  "startColumn": 13,
                  "charOffset": 22628,
                  "charLength": 12,
                  "snippet": {
                    "text": "embedConfirm"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 574,
                  "startColumn": 1,
                  "charOffset": 22597,
                  "charLength": 130,
                  "snippet": {
                    "text": "                )\n\n            embedConfirm = discord.Embed(\n                color=Colors.yellow,\n                title=\"Confirm\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "97c8ec0d9db4004fe752e781be4d74a5d9b808b6cfeccdb4a0869255abd6a1a0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 589,
                  "startColumn": 13,
                  "charOffset": 23238,
                  "charLength": 10,
                  "snippet": {
                    "text": "msgConfirm"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 587,
                  "startColumn": 1,
                  "charOffset": 23122,
                  "charLength": 257,
                  "snippet": {
                    "text": "                text=\"Abusing this feature has severe consequences! | Timeout after 120s\"\n            )\n            msgConfirm = await ctx.send(embed=embedConfirm)\n            await msgConfirm.add_reaction(\"✅\")\n            await msgConfirm.add_reaction(\"❌\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cb78c873e2c5bf350b6f487d2f76d7f569ffbf1f6ac692d96c55ce039c48ec02"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 593,
                  "startColumn": 17,
                  "charOffset": 23397,
                  "charLength": 12,
                  "snippet": {
                    "text": "confirmCheck"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 591,
                  "startColumn": 1,
                  "charOffset": 23333,
                  "charLength": 163,
                  "snippet": {
                    "text": "            await msgConfirm.add_reaction(\"❌\")\n\n            def confirmCheck(reaction, user):\n                return (\n                    user.id == ctx.author.id"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1824dd1f3f264f6e4a9185c91fbacd7a2de5ed8454fafe664b9108aab913e4c1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 601,
                  "startColumn": 17,
                  "charOffset": 23668,
                  "charLength": 16,
                  "snippet": {
                    "text": "reactionResponse"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 599,
                  "startColumn": 1,
                  "charOffset": 23634,
                  "charLength": 177,
                  "snippet": {
                    "text": "\n            try:\n                reactionResponse, userResponse = await self.bot.wait_for(\n                    \"reaction_add\", check=confirmCheck, timeout=120\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3f1c7ee4ce4d4a53afdcc775706bf527fca2b2704792f8043e87f721287a8092"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 601,
                  "startColumn": 35,
                  "charOffset": 23686,
                  "charLength": 12,
                  "snippet": {
                    "text": "userResponse"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 599,
                  "startColumn": 1,
                  "charOffset": 23634,
                  "charLength": 177,
                  "snippet": {
                    "text": "\n            try:\n                reactionResponse, userResponse = await self.bot.wait_for(\n                    \"reaction_add\", check=confirmCheck, timeout=120\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6fd5a50112affde5eb1d23a782dc4b08b827464b0f7f5c34abf573fd21e0355f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 605,
                  "startColumn": 17,
                  "charOffset": 23869,
                  "charLength": 12,
                  "snippet": {
                    "text": "embedTimeout"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 603,
                  "startColumn": 1,
                  "charOffset": 23794,
                  "charLength": 179,
                  "snippet": {
                    "text": "                )\n            except asyncio.TimeoutError:\n                embedTimeout = discord.Embed(\n                    color=Colors.red,\n                    title=\"Confirm\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1a2dbbf1fd4b2ebdafa0b0a386bd1e79c95c2ab3a9a5eb1d3868c00ff03d187c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 621,
                  "startColumn": 21,
                  "charOffset": 24538,
                  "charLength": 12,
                  "snippet": {
                    "text": "embedSending"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 619,
                  "startColumn": 1,
                  "charOffset": 24462,
                  "charLength": 191,
                  "snippet": {
                    "text": "                    await msgConfirm.clear_reactions()\n\n                    embedSending = discord.Embed(\n                        color=Colors.yellow,\n                        title=\"Confirm\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c7cc39b345a078657aca829fd6d2227c420cf6a6bff1af97e4d68aebb3657ef8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 630,
                  "startColumn": 21,
                  "charOffset": 24894,
                  "charLength": 17,
                  "snippet": {
                    "text": "expLongDateTimeTP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 628,
                  "startColumn": 1,
                  "charOffset": 24799,
                  "charLength": 253,
                  "snippet": {
                    "text": "                    print(\"sending\")  # TODO: Sending to original channel\n\n                    expLongDateTimeTP = discord.utils.format_dt(datetimeExpiration, \"F\")\n                    expRelativeTimeTP = discord.utils.format_dt(datetimeExpiration, \"R\")\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d190703e586a806875a75bb55af8aa29558280e2067ca810f656398c1cf97ed9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 631,
                  "startColumn": 21,
                  "charOffset": 24983,
                  "charLength": 17,
                  "snippet": {
                    "text": "expRelativeTimeTP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 629,
                  "startColumn": 1,
                  "charOffset": 24873,
                  "charLength": 228,
                  "snippet": {
                    "text": "\n                    expLongDateTimeTP = discord.utils.format_dt(datetimeExpiration, \"F\")\n                    expRelativeTimeTP = discord.utils.format_dt(datetimeExpiration, \"R\")\n\n                    embedVoting = discord.Embed("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "826915c20f378b1a003244b301f67c22c260f0f44280738f64013349523442ea"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 633,
                  "startColumn": 21,
                  "charOffset": 25073,
                  "charLength": 11,
                  "snippet": {
                    "text": "embedVoting"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 631,
                  "startColumn": 1,
                  "charOffset": 24963,
                  "charLength": 227,
                  "snippet": {
                    "text": "                    expRelativeTimeTP = discord.utils.format_dt(datetimeExpiration, \"R\")\n\n                    embedVoting = discord.Embed(\n                        color=Colors.ss_blurple,\n                        title=\"Voting\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2f28bab27f6a8f59d4a608a52cc6905e2091d82ffa6a9b5611d620b854c94386"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 643,
                  "startColumn": 21,
                  "charOffset": 25517,
                  "charLength": 10,
                  "snippet": {
                    "text": "viewVoting"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 641,
                  "startColumn": 1,
                  "charOffset": 25474,
                  "charLength": 117,
                  "snippet": {
                    "text": "                    )\n\n                    viewVoting = discord.ui.View()\n                    for option in options:\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d17447d444e51c6160d377be284e578c15204d932a4cd8c274f9915d913b9c44"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 646,
                  "startColumn": 25,
                  "charOffset": 25616,
                  "charLength": 11,
                  "snippet": {
                    "text": "customEmoji"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 644,
                  "startColumn": 1,
                  "charOffset": 25548,
                  "charLength": 235,
                  "snippet": {
                    "text": "                    for option in options:\n\n                        customEmoji = search_custom_emoji(option)\n                        if customEmoji is not None:\n                            option = option.replace(f\"{customEmoji}\", \"\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "17d7e9b6826b83a0b1fadfbad024549cc7d71b646fb7b9bb813dfce2048b35b2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 659,
                  "startColumn": 21,
                  "charOffset": 26159,
                  "charLength": 11,
                  "snippet": {
                    "text": "channelTest"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 657,
                  "startColumn": 1,
                  "charOffset": 26112,
                  "charLength": 184,
                  "snippet": {
                    "text": "                        )\n\n                    channelTest = self.bot.get_channel(942076483290161203)\n                    try:\n                        msgVote = await channelTest.send("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "472e2e840549664b18fd78c6b99dce59cbe1a63a8e1be155f520bda4652e14ba"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 661,
                  "startColumn": 25,
                  "charOffset": 26263,
                  "charLength": 7,
                  "snippet": {
                    "text": "msgVote"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 659,
                  "startColumn": 1,
                  "charOffset": 26139,
                  "charLength": 286,
                  "snippet": {
                    "text": "                    channelTest = self.bot.get_channel(942076483290161203)\n                    try:\n                        msgVote = await channelTest.send(\n                            content=\"@ everyone\", embed=embedVoting, view=viewVoting\n                        )  # TODO: everyone"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1d818828fae848a64450f7904fc4800ba7ded3f138c2b5b2cce21da3f01e5adf"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 665,
                  "startColumn": 25,
                  "charOffset": 26498,
                  "charLength": 10,
                  "snippet": {
                    "text": "embedError"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 663,
                  "startColumn": 1,
                  "charOffset": 26382,
                  "charLength": 256,
                  "snippet": {
                    "text": "                        )  # TODO: everyone\n                    except Exception as _error:\n                        embedError = discord.Embed(\n                            color=Colors.red,\n                            title=\"Error while sending message/s\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "57613330cde0a9cbc3b33b6504879b3a7a8f115c1985bf272a7eaf497dd8e8eb"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 680,
                  "startColumn": 25,
                  "charOffset": 27342,
                  "charLength": 8,
                  "snippet": {
                    "text": "compDict"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 678,
                  "startColumn": 1,
                  "charOffset": 27228,
                  "charLength": 223,
                  "snippet": {
                    "text": "                        await msgConfirm.edit(embed=embedError)\n                    else:\n                        compDict = {}\n                        for option in options:\n                            compDict[option] = 0"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bcfcb81936b6f9bd19e5904373caf016512fbc499af976f051d260a217809006"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 684,
                  "startColumn": 25,
                  "charOffset": 27477,
                  "charLength": 8,
                  "snippet": {
                    "text": "compDict"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 682,
                  "startColumn": 1,
                  "charOffset": 27403,
                  "charLength": 227,
                  "snippet": {
                    "text": "                            compDict[option] = 0\n\n                        compDict = json.dumps(compDict)\n                        query = database.Voting.create(\n                            msgID=msgVote.id, components=compDict"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b470c9f58a48f885dd4be536789a72d2791abaf2d7f18557193b705907ca7936"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 690,
                  "startColumn": 25,
                  "charOffset": 27719,
                  "charLength": 12,
                  "snippet": {
                    "text": "embedSuccess"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 688,
                  "startColumn": 1,
                  "charOffset": 27657,
                  "charLength": 184,
                  "snippet": {
                    "text": "                        query.save()\n\n                        embedSuccess = discord.Embed(\n                            color=Colors.green,\n                            title=\"Confirm\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c74d2b4eff91290eb69034595db755936e576954269bc5321522607d3423dffb"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 701,
                  "startColumn": 21,
                  "charOffset": 28209,
                  "charLength": 11,
                  "snippet": {
                    "text": "embedCancel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 699,
                  "startColumn": 1,
                  "charOffset": 28133,
                  "charLength": 187,
                  "snippet": {
                    "text": "                    await msgConfirm.clear_reactions()\n\n                    embedCancel = discord.Embed(\n                        color=Colors.red,\n                        title=\"Confirm\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "148cfdfe87c81e0f232f1b6b7b0bc2d0a513d57bcf6461967180376b9d0729d4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 40,
                  "charOffset": 637,
                  "charLength": 19,
                  "snippet": {
                    "text": "xUser: discord.User"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 1,
                  "charOffset": 542,
                  "charLength": 241,
                  "snippet": {
                    "text": "\nclass TicTacToeButton(discord.ui.Button[\"TicTacToe\"]):\n    def __init__(self, x: int, y: int, xUser: discord.User, yUser: discord.User):\n        super().__init__(style=discord.ButtonStyle.secondary, label=\"\\u200b\", row=y)\n        self.x = x"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8b2f26a7d8ca43e1e35a0b0f9e4f0f2eb0092c61e281fb372679493bb2ecb9d2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 61,
                  "charOffset": 658,
                  "charLength": 19,
                  "snippet": {
                    "text": "yUser: discord.User"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 1,
                  "charOffset": 542,
                  "charLength": 241,
                  "snippet": {
                    "text": "\nclass TicTacToeButton(discord.ui.Button[\"TicTacToe\"]):\n    def __init__(self, x: int, y: int, xUser: discord.User, yUser: discord.User):\n        super().__init__(style=discord.ButtonStyle.secondary, label=\"\\u200b\", row=y)\n        self.x = x"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "79a3fc2d341df30b89227b0ca5d55144012565d0b02624015380eeda51afd7e5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 24,
                  "charOffset": 3212,
                  "charLength": 7,
                  "snippet": {
                    "text": "XPlayer"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 99,
                  "startColumn": 1,
                  "charOffset": 3176,
                  "charLength": 118,
                  "snippet": {
                    "text": "    Tie = 2\n\n    def __init__(self, XPlayer, OPlayer):\n        super().__init__()\n        self.current_player = self.X"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "51f0fdc8785cd1b22d6e88c5852ccfe37c27cabc58518aec2946d8f3eb3e9b38"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 33,
                  "charOffset": 3221,
                  "charLength": 7,
                  "snippet": {
                    "text": "OPlayer"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 99,
                  "startColumn": 1,
                  "charOffset": 3176,
                  "charLength": 118,
                  "snippet": {
                    "text": "    Tie = 2\n\n    def __init__(self, XPlayer, OPlayer):\n        super().__init__()\n        self.current_player = self.X"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "31507e9d8bd9db410ef1902aa498f760202290176392be49a75a1c6317d1233f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 316,
                  "startColumn": 9,
                  "charOffset": 10682,
                  "charLength": 17,
                  "snippet": {
                    "text": "timmyDonation_png"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 314,
                  "startColumn": 1,
                  "charOffset": 10566,
                  "charLength": 234,
                  "snippet": {
                    "text": "    @commands.cooldown(1, 10, commands.BucketType.guild)\n    async def donate(self, ctx: commands.Context):\n        timmyDonation_png = discord.File(\n            Others.timmy_donation_path, filename=Others.timmy_donation_png\n        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "29cc557875fbaba2bd256e2fded7246ba05782c0c2f8e9b4245a01989a444d31"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 320,
                  "startColumn": 9,
                  "charOffset": 10810,
                  "charLength": 11,
                  "snippet": {
                    "text": "embedDonate"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 318,
                  "startColumn": 1,
                  "charOffset": 10791,
                  "charLength": 113,
                  "snippet": {
                    "text": "        )\n\n        embedDonate = discord.Embed(\n            color=Colors.ss_blurple,\n            title=f\"Donate\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "26899654cd1dc7eff666631986c3b4014af2b8db302a9b92de2d1abd36e48c5c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 355,
                  "startColumn": 9,
                  "charOffset": 12275,
                  "charLength": 7,
                  "snippet": {
                    "text": "modRole"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 353,
                  "startColumn": 1,
                  "charOffset": 12240,
                  "charLength": 225,
                  "snippet": {
                    "text": "        reason: str\n    ):\n        modRole = discord.utils.get(interaction.user.guild.roles, id=MainID.r_moderator)\n        if modRole not in interaction.user.roles:\n            return await interaction.response.send_message("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "44d416a55a3d50342f6cb72acd848911564d107419f2479de96776fd60b312d1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 361,
                  "startColumn": 9,
                  "charOffset": 12628,
                  "charLength": 8,
                  "snippet": {
                    "text": "roleName"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 359,
                  "startColumn": 1,
                  "charOffset": 12575,
                  "charLength": 172,
                  "snippet": {
                    "text": "                ephemeral=True\n            )\n        roleName = {\n            \"debate\": [MainID.r_debate_ban, \"Debate\"],\n            \"count\": [MainID.r_count_ban, \"Count\"],"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2ca17beb1ece2770f1b6008124e68b1c6eeaa1679be91a8b12200d6fbd291a6d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 369,
                  "startColumn": 13,
                  "charOffset": 12946,
                  "charLength": 12,
                  "snippet": {
                    "text": "updateReason"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 367,
                  "startColumn": 1,
                  "charOffset": 12820,
                  "charLength": 330,
                  "snippet": {
                    "text": "        role = discord.utils.get(interaction.user.guild.roles, id=roleName[0])\n        if role not in user.roles:\n            updateReason = f\"{roleName[1]} Ban requested by {interaction.user.name} | Reason: {reason}\"\n            await user.add_roles(role, reason=updateReason)\n            await interaction.response.send_message("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3820f0c436f9d06b04ea8cea408f70a565b5d3832543881b025006e6bb9418c2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 375,
                  "startColumn": 13,
                  "charOffset": 13288,
                  "charLength": 12,
                  "snippet": {
                    "text": "updateReason"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 373,
                  "startColumn": 1,
                  "charOffset": 13248,
                  "charLength": 249,
                  "snippet": {
                    "text": "            )\n        else:\n            updateReason = f\"{roleName[1]} Unban requested by {interaction.user.name} | Reason: {reason}\"\n            await user.remove_roles(role, reason=updateReason)\n            await interaction.response.send_message("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9392642eab433fdaa34737b090f0f27d61efcc500c48e82e0dea827c39b3ace7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 505,
                  "startColumn": 17,
                  "charOffset": 18068,
                  "charLength": 2,
                  "snippet": {
                    "text": "NE"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 503,
                  "startColumn": 1,
                  "charOffset": 17957,
                  "charLength": 222,
                  "snippet": {
                    "text": "                await message.delete()\n                database.db.connect(reuse_if_open=True)\n                NE = database.AdminLogging.create(\n                    discordID=ctx.author.id, action=\"KILL\"\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "96faeb81c582ddab81f42279c73d9f6d3e4131277059e4d1934d49610a1176f2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 579,
                  "startColumn": 9,
                  "charOffset": 20495,
                  "charLength": 8,
                  "snippet": {
                    "text": "UserList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 577,
                  "startColumn": 1,
                  "charOffset": 20476,
                  "charLength": 55,
                  "snippet": {
                    "text": "        )\n\n        UserList = []\n        RoleList = []\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c7f801849f116af74aa834290966cce62ef730e8b0bded7206ab8a8a883afb57"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 580,
                  "startColumn": 9,
                  "charOffset": 20517,
                  "charLength": 8,
                  "snippet": {
                    "text": "RoleList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 578,
                  "startColumn": 1,
                  "charOffset": 20486,
                  "charLength": 72,
                  "snippet": {
                    "text": "\n        UserList = []\n        RoleList = []\n\n        for user in users:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5540b9e642a9ac9476c0d40619130ae597fc452d286b7edcb786c6dd7bf9c3c9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 587,
                  "startColumn": 9,
                  "charOffset": 20679,
                  "charLength": 8,
                  "snippet": {
                    "text": "UserList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 585,
                  "startColumn": 1,
                  "charOffset": 20628,
                  "charLength": 121,
                  "snippet": {
                    "text": "            RoleList.append(role.mention)\n\n        UserList = \", \".join(UserList)\n        RoleList = \", \".join(RoleList)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0a4cc29d58963c124a704c7adf8f9e07fae8ae556fb90b94c081d47a377612b9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 588,
                  "startColumn": 9,
                  "charOffset": 20718,
                  "charLength": 8,
                  "snippet": {
                    "text": "RoleList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 586,
                  "startColumn": 1,
                  "charOffset": 20670,
                  "charLength": 104,
                  "snippet": {
                    "text": "\n        UserList = \", \".join(UserList)\n        RoleList = \", \".join(RoleList)\n\n        embed.add_field("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7bb090b8018527768a6e035ea3622778611d05ff017da8033ed1d464fdaa5474"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 613,
                  "startColumn": 9,
                  "charOffset": 21548,
                  "charLength": 12,
                  "snippet": {
                    "text": "ViewResponse"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 611,
                  "startColumn": 1,
                  "charOffset": 21487,
                  "charLength": 202,
                  "snippet": {
                    "text": "        await view.wait()\n        await msg.delete()\n        ViewResponse = str(view.children[0].values)\n        RoleID = self.decodeDict[ViewResponse]\n        await ctx.send(f\"<@&{RoleID}>\\n{message}\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ef53b841893f254a80d96c456342b418b2ef071fcd1e78f4d665f343381a2f96"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 614,
                  "startColumn": 9,
                  "charOffset": 21600,
                  "charLength": 6,
                  "snippet": {
                    "text": "RoleID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 612,
                  "startColumn": 1,
                  "charOffset": 21513,
                  "charLength": 177,
                  "snippet": {
                    "text": "        await msg.delete()\n        ViewResponse = str(view.children[0].values)\n        RoleID = self.decodeDict[ViewResponse]\n        await ctx.send(f\"<@&{RoleID}>\\n{message}\")\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "03a9fd494a00d46e2c2d926c34fcc0dec5eaa4751cb399bfe18e454f085175cf"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 650,
                  "startColumn": 9,
                  "charOffset": 23184,
                  "charLength": 2,
                  "snippet": {
                    "text": "NE"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 648,
                  "startColumn": 1,
                  "charOffset": 23117,
                  "charLength": 178,
                  "snippet": {
                    "text": "    @is_botAdmin\n    async def say(self, ctx, *, message):\n        NE = database.AdminLogging.create(\n            discordID=ctx.author.id, action=\"SAY\", content=message\n        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "66deac94c1c48b9f738409fe667eea78f4ee1d651b390608f79b90acedecfe62"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 678,
                  "startColumn": 9,
                  "charOffset": 24032,
                  "charLength": 2,
                  "snippet": {
                    "text": "NE"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 676,
                  "startColumn": 1,
                  "charOffset": 24004,
                  "charLength": 138,
                  "snippet": {
                    "text": "            return\n\n        NE = database.AdminLogging.create(\n            discordID=ctx.author.id, action=\"SAYVC\", content=text\n        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6db26b202f7aaecf93ee0839dffff08684d2d61f3fd868ae2c5ed2eda6727547"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 684,
                  "startColumn": 9,
                  "charOffset": 24232,
                  "charLength": 9,
                  "snippet": {
                    "text": "TTSClient"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 682,
                  "startColumn": 1,
                  "charOffset": 24161,
                  "charLength": 184,
                  "snippet": {
                    "text": "\n        # Lets prepare our text, and then save the audio file\n        TTSClient = texttospeech.TextToSpeechClient(\n            credentials=access_secret(\"ttscreds\", True, 2)\n        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fe1de815edb48a0a8647e959cac849485e85eb28a4c7053355b7ceebb2439e28"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/todocommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 9,
                  "charOffset": 2611,
                  "charLength": 8,
                  "snippet": {
                    "text": "todoList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 87,
                  "startColumn": 1,
                  "charOffset": 2554,
                  "charLength": 184,
                  "snippet": {
                    "text": "        database.db.connect(reuse_if_open=True)\n\n        todoList = []\n        query = database.ToDo.select().where(database.ToDo.discordID == ctx.author.id)\n        for todo in query:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ca2412212dc549025e8586046a6d78656a3d044cd0a041241773e47e6a1a6d85"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/todocommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 9,
                  "charOffset": 2808,
                  "charLength": 9,
                  "snippet": {
                    "text": "todoFinal"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 92,
                  "startColumn": 1,
                  "charOffset": 2739,
                  "charLength": 129,
                  "snippet": {
                    "text": "            todoList.append(f\"{str(todo.id)}) {todo.item}\")\n\n        todoFinal = \"\\n\".join(todoList)\n\n        database.db.close()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5ca0a04b6bcb5939dd1228d059e34eeb9621cf40d4b46d3615da42f24bb2b11f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 15,
                  "charOffset": 1151,
                  "charLength": 7,
                  "snippet": {
                    "text": "Fmodify"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 49,
                  "startColumn": 1,
                  "charOffset": 1095,
                  "charLength": 190,
                  "snippet": {
                    "text": "    @commands.command()\n    @is_botAdmin4\n    async def Fmodify(self, ctx, num: int, val: bool):\n        CheckDB: database.CheckInformation = (\n            database.CheckInformation.select()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b10ca248c7f79dfa16a7e92400e56efc4f7fde1a51257af02ef00ed135bec4ae"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 9,
                  "charOffset": 1200,
                  "charLength": 7,
                  "snippet": {
                    "text": "CheckDB"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 50,
                  "startColumn": 1,
                  "charOffset": 1119,
                  "charLength": 220,
                  "snippet": {
                    "text": "    @is_botAdmin4\n    async def Fmodify(self, ctx, num: int, val: bool):\n        CheckDB: database.CheckInformation = (\n            database.CheckInformation.select()\n            .where(database.CheckInformation.id == 1)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f7eab88c784c4306097a68db0d33af2d3aafc9f67f2d9e991882d8d97ec1fc9b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 9,
                  "charOffset": 1378,
                  "charLength": 14,
                  "snippet": {
                    "text": "databaseValues"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 56,
                  "startColumn": 1,
                  "charOffset": 1359,
                  "charLength": 117,
                  "snippet": {
                    "text": "        )\n\n        databaseValues = {\n            1: \"CheckDB.MasterMaintenance\",\n            2: \"CheckDB.guildNone\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fad078494caa1f2651a2325c466f2548367f31528062c3ef6fade19d91ad3013"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 9,
                  "charOffset": 2564,
                  "charLength": 7,
                  "snippet": {
                    "text": "CheckDB"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 94,
                  "startColumn": 1,
                  "charOffset": 2502,
                  "charLength": 201,
                  "snippet": {
                    "text": "    @filters.command()\n    async def list(self, ctx):\n        CheckDB: database.CheckInformation = (\n            database.CheckInformation.select()\n            .where(database.CheckInformation.id == 1)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0558cfa46027c1b44d8bd8d00b575a3146544d3289662d221f503a24aa219205"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 9,
                  "charOffset": 3788,
                  "charLength": 17,
                  "snippet": {
                    "text": "WhitelistedPrefix"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 124,
                  "startColumn": 1,
                  "charOffset": 3719,
                  "charLength": 223,
                  "snippet": {
                    "text": "    @is_botAdmin3\n    async def delete(self, ctx, num: int):\n        WhitelistedPrefix: database.WhitelistedPrefix = (\n            database.WhitelistedPrefix.select()\n            .where(database.WhitelistedPrefix.id == num)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7f91f0f1357ae898c91468c4cbd235ea86b83ea5674c5c508454fd1f67b46032"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 9,
                  "charOffset": 4181,
                  "charLength": 17,
                  "snippet": {
                    "text": "WhitelistedPrefix"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 135,
                  "startColumn": 1,
                  "charOffset": 4117,
                  "charLength": 167,
                  "snippet": {
                    "text": "    @is_botAdmin3\n    async def add(self, ctx, prefix):\n        WhitelistedPrefix = database.WhitelistedPrefix.create(\n            prefix=prefix, status=True\n        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4518140d1f753a52d5a594eaa68b4e89661147f00f45944c258d5e4e7973cebb"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 9,
                  "charOffset": 4425,
                  "charLength": 8,
                  "snippet": {
                    "text": "PrefixDB"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 143,
                  "startColumn": 1,
                  "charOffset": 4385,
                  "charLength": 100,
                  "snippet": {
                    "text": "    async def list(self, ctx):\n\n        PrefixDB = database.WhitelistedPrefix\n        response = []\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d08f82904545d5d7078a0718aba3778cf55f6081d457652b322712da6f0d1843"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 17,
                  "charOffset": 4571,
                  "charLength": 12,
                  "snippet": {
                    "text": "statusFilter"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 149,
                  "startColumn": 1,
                  "charOffset": 4517,
                  "charLength": 137,
                  "snippet": {
                    "text": "\n            if entry.status is True:\n                statusFilter = \"ACTIVE\"\n            else:\n                statusFilter = \"DISABLED\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "47123976cd79fb75253044624a56d5ee26b8550c0b9253fb33032347fd8ccef2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 17,
                  "charOffset": 4629,
                  "charLength": 12,
                  "snippet": {
                    "text": "statusFilter"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 151,
                  "startColumn": 1,
                  "charOffset": 4555,
                  "charLength": 188,
                  "snippet": {
                    "text": "                statusFilter = \"ACTIVE\"\n            else:\n                statusFilter = \"DISABLED\"\n\n            response.append(f\"Prefix `{entry.prefix}`:\\n{Emoji.barrow} {statusFilter}\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e2bf65c9306405407588724e8b41c34f8b4ca6e2075538b2b9907f0f4e9c9016"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 259,
                  "startColumn": 9,
                  "charOffset": 8011,
                  "charLength": 7,
                  "snippet": {
                    "text": "hostDir"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 257,
                  "startColumn": 1,
                  "charOffset": 7924,
                  "charLength": 143,
                  "snippet": {
                    "text": "    async def _gitpull(self, ctx, mode=\"-a\", branch=None):\n        output = \"\"\n        hostDir = get_host_dir()\n\n        if branch is not None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7c49382f8ea07b65a7361383437bc09b8c86f0a65fba1c3d5f8ecf0e69a907dd"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 331,
                  "startColumn": 9,
                  "charOffset": 10344,
                  "charLength": 7,
                  "snippet": {
                    "text": "hostDir"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 329,
                  "startColumn": 1,
                  "charOffset": 10315,
                  "charLength": 126,
                  "snippet": {
                    "text": "        output = \"\"\n\n        hostDir = get_host_dir()\n        if hostDir == \"/home/timmya\":\n            branch = \"origin/main\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e30dd6a1f7232e2edbbbe6b765c760405024b95678b608a391506affba27a096"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 413,
                  "startColumn": 9,
                  "charOffset": 13117,
                  "charLength": 9,
                  "snippet": {
                    "text": "adminList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 411,
                  "startColumn": 1,
                  "charOffset": 13061,
                  "charLength": 128,
                  "snippet": {
                    "text": "    @is_botAdmin\n    async def list(self, ctx):\n        adminList = []\n\n        query1 = database.Administrators.select().where("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "09e72bdd17cb4abed668e32149a474b96b0b602a0605ea8152a0f0a95fbd0268"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 422,
                  "startColumn": 9,
                  "charOffset": 13405,
                  "charLength": 11,
                  "snippet": {
                    "text": "adminLEVEL1"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 420,
                  "startColumn": 1,
                  "charOffset": 13334,
                  "charLength": 129,
                  "snippet": {
                    "text": "            adminList.append(f\"`{user.name}` -> `{user.id}`\")\n\n        adminLEVEL1 = \"\\n\".join(adminList)\n\n        adminList = []"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8307f56845f0d1eb39b3c6376eb94ba4664251cb482f356f0f838dedc4b0b99b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 424,
                  "startColumn": 9,
                  "charOffset": 13449,
                  "charLength": 9,
                  "snippet": {
                    "text": "adminList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 422,
                  "startColumn": 1,
                  "charOffset": 13397,
                  "charLength": 174,
                  "snippet": {
                    "text": "        adminLEVEL1 = \"\\n\".join(adminList)\n\n        adminList = []\n        query2 = database.Administrators.select().where(\n            database.Administrators.TierLevel == 2"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ee04f532602c87809a4742e8e368cb2f56ff4c98038217128480ec75af1bf054"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 432,
                  "startColumn": 9,
                  "charOffset": 13736,
                  "charLength": 11,
                  "snippet": {
                    "text": "adminLEVEL2"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 430,
                  "startColumn": 1,
                  "charOffset": 13665,
                  "charLength": 129,
                  "snippet": {
                    "text": "            adminList.append(f\"`{user.name}` -> `{user.id}`\")\n\n        adminLEVEL2 = \"\\n\".join(adminList)\n\n        adminList = []"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4c1b9fc377020ab05e9e1466c6b87d0f38cccc01ada050526eae8be12077f1c1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 434,
                  "startColumn": 9,
                  "charOffset": 13780,
                  "charLength": 9,
                  "snippet": {
                    "text": "adminList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 432,
                  "startColumn": 1,
                  "charOffset": 13728,
                  "charLength": 174,
                  "snippet": {
                    "text": "        adminLEVEL2 = \"\\n\".join(adminList)\n\n        adminList = []\n        query3 = database.Administrators.select().where(\n            database.Administrators.TierLevel == 3"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "92096c6902a73fa58f76161977bd8c64588ee9247ff85af77e3001e8d47cfe17"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 442,
                  "startColumn": 9,
                  "charOffset": 14067,
                  "charLength": 11,
                  "snippet": {
                    "text": "adminLEVEL3"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 440,
                  "startColumn": 1,
                  "charOffset": 13996,
                  "charLength": 129,
                  "snippet": {
                    "text": "            adminList.append(f\"`{user.name}` -> `{user.id}`\")\n\n        adminLEVEL3 = \"\\n\".join(adminList)\n\n        adminList = []"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c0248f02a0bdd33669e18a8fea2678c8c6d55be2d126457c16f6b6de75036209"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 444,
                  "startColumn": 9,
                  "charOffset": 14111,
                  "charLength": 9,
                  "snippet": {
                    "text": "adminList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 442,
                  "startColumn": 1,
                  "charOffset": 14059,
                  "charLength": 174,
                  "snippet": {
                    "text": "        adminLEVEL3 = \"\\n\".join(adminList)\n\n        adminList = []\n        query4 = database.Administrators.select().where(\n            database.Administrators.TierLevel == 4"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "090ac25bb62cb29c2dbb0a2f2841ee9a65f2bd3f1f163e051447cabb4daf2553"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 452,
                  "startColumn": 9,
                  "charOffset": 14398,
                  "charLength": 11,
                  "snippet": {
                    "text": "adminLEVEL4"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 450,
                  "startColumn": 1,
                  "charOffset": 14327,
                  "charLength": 137,
                  "snippet": {
                    "text": "            adminList.append(f\"`{user.name}` -> `{user.id}`\")\n\n        adminLEVEL4 = \"\\n\".join(adminList)\n\n        embed = discord.Embed("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9d9291d52bcf4d0e86a5d4e860e294a41ceea19fa10e0c12b190db414aba5674"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 475,
                  "startColumn": 33,
                  "charOffset": 15277,
                  "charLength": 16,
                  "snippet": {
                    "text": "ID: discord.User"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 473,
                  "startColumn": 1,
                  "charOffset": 15210,
                  "charLength": 134,
                  "snippet": {
                    "text": "    @w.command()\n    @is_botAdmin4\n    async def remove(self, ctx, ID: discord.User):\n        database.db.connect(reuse_if_open=True)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3b5deea0d49663ae805a63d1881cd53786b4a65a2283be14a8f3c755c4b0c8c7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 505,
                  "startColumn": 30,
                  "charOffset": 16174,
                  "charLength": 16,
                  "snippet": {
                    "text": "ID: discord.User"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 503,
                  "startColumn": 1,
                  "charOffset": 16110,
                  "charLength": 143,
                  "snippet": {
                    "text": "    @w.command()\n    @is_botAdmin4\n    async def add(self, ctx, ID: discord.User, level: int):\n        database.db.connect(reuse_if_open=True)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ade57b6754d9c13c3993d879064a1dc48c338bd0c6ddc90f0925521dd8d4e6d4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 550,
                  "startColumn": 13,
                  "charOffset": 17594,
                  "charLength": 9,
                  "snippet": {
                    "text": "runThread"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 548,
                  "startColumn": 1,
                  "charOffset": 17513,
                  "charLength": 158,
                  "snippet": {
                    "text": "            theproc = subprocess.Popen([sys.executable, \"main.py\"])\n\n            runThread = Thread(target=theproc.communicate)\n            runThread.start()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4d1c2180df5cb09f4baf6816bd1a1f517b1cf1af5380a2b3e813e55ad4495f7f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/GSuiteCreation.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 9,
                  "charOffset": 2204,
                  "charLength": 11,
                  "snippet": {
                    "text": "respChannel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 78,
                  "startColumn": 1,
                  "charOffset": 2130,
                  "charLength": 164,
                  "snippet": {
                    "text": "\n    async def on_submit(self, interaction: discord.Interaction):\n        respChannel = self.bot.get_channel(968345000100384788)\n        await respChannel.send(\"\")\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "144089169d76dfea1874af8c8844ca41668e002fd01ae9869b78bf37921c492a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/GSuiteCreation.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 9,
                  "charOffset": 3560,
                  "charLength": 7,
                  "snippet": {
                    "text": "HR_Role"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 131,
                  "startColumn": 1,
                  "charOffset": 3474,
                  "charLength": 273,
                  "snippet": {
                    "text": "        organizationunit: Literal[\"Personal Account\", \"Team Account\"],\n    ):\n        HR_Role = discord.utils.get(interaction.user.guild.roles, id=HRID.r_hr_staff)\n        if HR_Role not in interaction.user.roles:\n            return await interaction.response.send_message("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ed9e59bf446bf9eacb9298e08e335fa4c6005f680d129e08088b9b5c9b0a4b31"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/GSuiteCreation.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 9,
                  "charOffset": 5261,
                  "charLength": 7,
                  "snippet": {
                    "text": "HR_Role"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 168,
                  "startColumn": 1,
                  "charOffset": 5136,
                  "charLength": 307,
                  "snippet": {
                    "text": "    @app_commands.guilds(HRID.g_hr)\n    async def delete_gsuite(self, interaction: discord.Interaction, email: str):\n        HR_Role = discord.utils.get(interaction.guild.roles, id=HRID.r_hr_staff)\n        if HR_Role not in interaction.user.roles:\n            return await interaction.response.send_message("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6f1f175228bb1d54d5d7a612d63aaf7ab4e687b9ab9abbb5072c2e86750e1c12"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/GSuiteCreation.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 194,
                  "startColumn": 9,
                  "charOffset": 6299,
                  "charLength": 7,
                  "snippet": {
                    "text": "HR_Role"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 192,
                  "startColumn": 1,
                  "charOffset": 6188,
                  "charLength": 293,
                  "snippet": {
                    "text": "    )\n    async def suspend_gsuite(self, interaction: discord.Interaction, email: str, suspend: bool):\n        HR_Role = discord.utils.get(interaction.guild.roles, id=HRID.r_hr_staff)\n        if HR_Role not in interaction.user.roles:\n            return await interaction.response.send_message("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c444c7390f10bad9ca02afacbd0133713d09c3ad16395fbbc208160c1f98e5be"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/RedirectService.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 29,
                  "charOffset": 1129,
                  "charLength": 2,
                  "snippet": {
                    "text": "ID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 34,
                  "startColumn": 1,
                  "charOffset": 1015,
                  "charLength": 207,
                  "snippet": {
                    "text": "    @commands.command(alliases=[\"redirectremove\", \"removeredirect\"])\n    @is_botAdmin\n    async def rr(self, ctx, ID):\n        self.raOBJ.del_redirect(ID)\n        await ctx.send(f\"Redirect removed for {ID}\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a046dbd3de650f7b2457486b25903c248d57dbfe10a38399efee82b1c9738239"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/techCommissions.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 15,
                  "charOffset": 5150,
                  "charLength": 9,
                  "snippet": {
                    "text": "techEmbed"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 153,
                  "startColumn": 1,
                  "charOffset": 5095,
                  "charLength": 188,
                  "snippet": {
                    "text": "    @commands.command()\n    @is_botAdmin\n    async def techEmbed(self, ctx):\n        embed = discord.Embed(\n            title=\"Bot Developer Commissions\", color=discord.Color.brand_green()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c01a90b3b04c4a916be2591b0e980e9be59a8eaa35662bc69b4b5dea77d613ac"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/techCommissions.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 224,
                  "startColumn": 15,
                  "charOffset": 8082,
                  "charLength": 14,
                  "snippet": {
                    "text": "leadershipPost"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 222,
                  "startColumn": 1,
                  "charOffset": 8043,
                  "charLength": 173,
                  "snippet": {
                    "text": "\n    @commands.command()\n    async def leadershipPost(self, ctx: commands.Context):\n        \"\"\"\n        Post the Bot Development Commission Process in the leadership server."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fcd287b0a281b51ccc7d2b83496eb3e8ad1c9c4e760813dc2f45df3a1855666b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/techCommissions.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 240,
                  "startColumn": 15,
                  "charOffset": 8961,
                  "charLength": 19,
                  "snippet": {
                    "text": "autoUnarchiveThread"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 238,
                  "startColumn": 1,
                  "charOffset": 8916,
                  "charLength": 179,
                  "snippet": {
                    "text": "\n    @tasks.loop(seconds=60.0)\n    async def autoUnarchiveThread(self):\n        \"\"\"\n        Creates a task loop to make sure threads don't automatically archive due to inactivity."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fea67cb48418d11a634019e0e957c3939110a97ce82fee7c3085aa4d6bd87180"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 5,
                  "charOffset": 669,
                  "charLength": 14,
                  "snippet": {
                    "text": "showFutureTime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 36,
                  "startColumn": 1,
                  "charOffset": 663,
                  "charLength": 98,
                  "snippet": {
                    "text": "\n\ndef showFutureTime(time):\n    now = datetime.now(EST)\n    output = convert_time_to_seconds(time)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cbb1cc7d09512f39f97ff7b033fe93fb87a790783bdbac4aca4c66758480bf78"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 5,
                  "charOffset": 950,
                  "charLength": 16,
                  "snippet": {
                    "text": "showTotalMinutes"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 49,
                  "startColumn": 1,
                  "charOffset": 944,
                  "charLength": 71,
                  "snippet": {
                    "text": "\n\ndef showTotalMinutes(dateObj: datetime):\n    now = datetime.now(EST)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1c59ed09debdc35e4c0de3282fce2d7f9d83ae434eb296d700f01a1a399bf2c5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 22,
                  "charOffset": 967,
                  "charLength": 17,
                  "snippet": {
                    "text": "dateObj: datetime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 49,
                  "startColumn": 1,
                  "charOffset": 944,
                  "charLength": 71,
                  "snippet": {
                    "text": "\n\ndef showTotalMinutes(dateObj: datetime):\n    now = datetime.now(EST)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b7c471b510ae374f3a2634a2aeac60f958979cd296e902627badc2869537cad6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 5,
                  "charOffset": 1020,
                  "charLength": 9,
                  "snippet": {
                    "text": "deltaTime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 52,
                  "startColumn": 1,
                  "charOffset": 987,
                  "charLength": 110,
                  "snippet": {
                    "text": "    now = datetime.now(EST)\n\n    deltaTime = now - dateObj\n\n    minutes = str(deltaTime.total_seconds() // 60)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2604bb9acfbc2eb66f07efe5a02d139119448b793e4668d42e9220ef794eb23d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 237,
                  "startColumn": 21,
                  "charOffset": 7352,
                  "charLength": 12,
                  "snippet": {
                    "text": "SelectedGame"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 235,
                  "startColumn": 1,
                  "charOffset": 7256,
                  "charLength": 223,
                  "snippet": {
                    "text": "                timeout = await view.wait()\n                if not timeout:\n                    SelectedGame = var.view_response\n                else:\n                    return await ctx.send(\"Timed out, try again later.\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7f292649c2959b5e9bee1315d75551f93c62cd7e7db1490b9d1e6e01700fb115"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 240,
                  "startColumn": 17,
                  "charOffset": 7496,
                  "charLength": 6,
                  "snippet": {
                    "text": "GameID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 238,
                  "startColumn": 1,
                  "charOffset": 7385,
                  "charLength": 267,
                  "snippet": {
                    "text": "                else:\n                    return await ctx.send(\"Timed out, try again later.\")\n                GameID = GameDict[SelectedGame]\n                code = str(await self._create_invite(ctx.author.voice, GameID))\n                await ctx.send(\"Loading...\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2eb73b79d7d591685804abf84ef2507f7d06bf7633e7767b0373efbaf49a2509"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 298,
                  "startColumn": 21,
                  "charOffset": 10081,
                  "charLength": 12,
                  "snippet": {
                    "text": "SelectedGame"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 296,
                  "startColumn": 1,
                  "charOffset": 9985,
                  "charLength": 223,
                  "snippet": {
                    "text": "                timeout = await view.wait()\n                if not timeout:\n                    SelectedGame = var.view_response\n                else:\n                    return await ctx.send(\"Timed out, try again later.\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "44821a896b1fb46cebc96df1176538ca1a46a4d4da63625fb14bf59a2e067cb0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 302,
                  "startColumn": 17,
                  "charOffset": 10261,
                  "charLength": 6,
                  "snippet": {
                    "text": "GameID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 300,
                  "startColumn": 1,
                  "charOffset": 10136,
                  "charLength": 268,
                  "snippet": {
                    "text": "                    return await ctx.send(\"Timed out, try again later.\")\n                print(SelectedGame)\n                GameID = GameDict[SelectedGame]\n                code = str(await self._create_invite(ctx.author.voice, GameID))\n                await ctx.send("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "94cc72ced4b2a5a0c8ebbbf7287b6aee0f5720b85ec002a75014a9cde7072eec"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 397,
                  "startColumn": 9,
                  "charOffset": 14591,
                  "charLength": 2,
                  "snippet": {
                    "text": "SB"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 395,
                  "startColumn": 1,
                  "charOffset": 14488,
                  "charLength": 227,
                  "snippet": {
                    "text": "    async def rename(self, ctx, *, name=None):\n        database.db.connect(reuse_if_open=True)\n        SB = discord.utils.get(ctx.guild.roles, name=self.SB)\n        legend = discord.utils.get(ctx.guild.roles, name=self.Legend)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "261415239a888f5dfc59986ae5408b51e8c864449abb6780e5372031403d9a1e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 400,
                  "startColumn": 9,
                  "charOffset": 14724,
                  "charLength": 2,
                  "snippet": {
                    "text": "MT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 398,
                  "startColumn": 1,
                  "charOffset": 14645,
                  "charLength": 259,
                  "snippet": {
                    "text": "        legend = discord.utils.get(ctx.guild.roles, name=self.Legend)\n\n        MT = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        MAT = discord.utils.get(ctx.guild.roles, name=self.MAT)\n        TT = discord.utils.get(ctx.guild.roles, name=self.TT)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ff42b95790bdeaa9a120611976038a0e63038bd5a1802a51eae5640372b6bb6f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 401,
                  "startColumn": 9,
                  "charOffset": 14787,
                  "charLength": 3,
                  "snippet": {
                    "text": "MAT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 399,
                  "startColumn": 1,
                  "charOffset": 14715,
                  "charLength": 251,
                  "snippet": {
                    "text": "\n        MT = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        MAT = discord.utils.get(ctx.guild.roles, name=self.MAT)\n        TT = discord.utils.get(ctx.guild.roles, name=self.TT)\n        AT = discord.utils.get(ctx.guild.roles, name=self.AT)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1eb77c4463ca7ef9088b324003c60c43bfddd2d9fa4d9a51c25ff2d55f348454"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 402,
                  "startColumn": 9,
                  "charOffset": 14851,
                  "charLength": 2,
                  "snippet": {
                    "text": "TT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 400,
                  "startColumn": 1,
                  "charOffset": 14716,
                  "charLength": 312,
                  "snippet": {
                    "text": "        MT = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        MAT = discord.utils.get(ctx.guild.roles, name=self.MAT)\n        TT = discord.utils.get(ctx.guild.roles, name=self.TT)\n        AT = discord.utils.get(ctx.guild.roles, name=self.AT)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "45c0c87c5337d69e3d57ee755263a18c462134f24083fb7809b70732453979fb"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 403,
                  "startColumn": 9,
                  "charOffset": 14913,
                  "charLength": 2,
                  "snippet": {
                    "text": "AT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 401,
                  "startColumn": 1,
                  "charOffset": 14779,
                  "charLength": 311,
                  "snippet": {
                    "text": "        MAT = discord.utils.get(ctx.guild.roles, name=self.MAT)\n        TT = discord.utils.get(ctx.guild.roles, name=self.TT)\n        AT = discord.utils.get(ctx.guild.roles, name=self.AT)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "352a0420812a4a14a5d7dc9a3d73509a7ef70af9299af95d0d3142d7acd3dd27"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 404,
                  "startColumn": 9,
                  "charOffset": 14975,
                  "charLength": 2,
                  "snippet": {
                    "text": "VP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 402,
                  "startColumn": 1,
                  "charOffset": 14843,
                  "charLength": 248,
                  "snippet": {
                    "text": "        TT = discord.utils.get(ctx.guild.roles, name=self.TT)\n        AT = discord.utils.get(ctx.guild.roles, name=self.AT)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "326e3d53db2f453ce74c0ce5ab243c62765786f6811d1b93f2703e9953720da2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 405,
                  "startColumn": 9,
                  "charOffset": 15037,
                  "charLength": 2,
                  "snippet": {
                    "text": "CO"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 403,
                  "startColumn": 1,
                  "charOffset": 14905,
                  "charLength": 252,
                  "snippet": {
                    "text": "        AT = discord.utils.get(ctx.guild.roles, name=self.AT)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n\n        L120 = discord.utils.get(ctx.guild.roles, name=self.L120)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "07d6c187c3882082d7e19e3a2023925de099771d41f4e92bdb910068968ca9b8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 407,
                  "startColumn": 9,
                  "charOffset": 15100,
                  "charLength": 4,
                  "snippet": {
                    "text": "L120"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 405,
                  "startColumn": 1,
                  "charOffset": 15029,
                  "charLength": 260,
                  "snippet": {
                    "text": "        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n\n        L120 = discord.utils.get(ctx.guild.roles, name=self.L120)\n        L110 = discord.utils.get(ctx.guild.roles, name=self.L110)\n        L100 = discord.utils.get(ctx.guild.roles, name=self.L100)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8bf7f7ff1266317ada21ae2fdc6e655137b097ac11931845e1afeedb0ccee2a9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 408,
                  "startColumn": 9,
                  "charOffset": 15166,
                  "charLength": 4,
                  "snippet": {
                    "text": "L110"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 406,
                  "startColumn": 1,
                  "charOffset": 15091,
                  "charLength": 262,
                  "snippet": {
                    "text": "\n        L120 = discord.utils.get(ctx.guild.roles, name=self.L120)\n        L110 = discord.utils.get(ctx.guild.roles, name=self.L110)\n        L100 = discord.utils.get(ctx.guild.roles, name=self.L100)\n        L90 = discord.utils.get(ctx.guild.roles, name=self.L90)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1b4906a4c386327cc0ced446722866025ce60b9ff00e680ab342745f545b9ed6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 409,
                  "startColumn": 9,
                  "charOffset": 15232,
                  "charLength": 4,
                  "snippet": {
                    "text": "L100"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 407,
                  "startColumn": 1,
                  "charOffset": 15092,
                  "charLength": 325,
                  "snippet": {
                    "text": "        L120 = discord.utils.get(ctx.guild.roles, name=self.L120)\n        L110 = discord.utils.get(ctx.guild.roles, name=self.L110)\n        L100 = discord.utils.get(ctx.guild.roles, name=self.L100)\n        L90 = discord.utils.get(ctx.guild.roles, name=self.L90)\n        L80 = discord.utils.get(ctx.guild.roles, name=self.L80)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ca9ff41d275c099fe47fd616559c20bdea15655000129ebc0dcfa5ee19f1cdeb"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 410,
                  "startColumn": 9,
                  "charOffset": 15298,
                  "charLength": 3,
                  "snippet": {
                    "text": "L90"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 408,
                  "startColumn": 1,
                  "charOffset": 15158,
                  "charLength": 323,
                  "snippet": {
                    "text": "        L110 = discord.utils.get(ctx.guild.roles, name=self.L110)\n        L100 = discord.utils.get(ctx.guild.roles, name=self.L100)\n        L90 = discord.utils.get(ctx.guild.roles, name=self.L90)\n        L80 = discord.utils.get(ctx.guild.roles, name=self.L80)\n        L70 = discord.utils.get(ctx.guild.roles, name=self.L70)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0f7cb7bc36366887360c358a6f74799617b97036eb1d031fe1ab41db86ce2ad6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 411,
                  "startColumn": 9,
                  "charOffset": 15362,
                  "charLength": 3,
                  "snippet": {
                    "text": "L80"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 409,
                  "startColumn": 1,
                  "charOffset": 15224,
                  "charLength": 321,
                  "snippet": {
                    "text": "        L100 = discord.utils.get(ctx.guild.roles, name=self.L100)\n        L90 = discord.utils.get(ctx.guild.roles, name=self.L90)\n        L80 = discord.utils.get(ctx.guild.roles, name=self.L80)\n        L70 = discord.utils.get(ctx.guild.roles, name=self.L70)\n        L60 = discord.utils.get(ctx.guild.roles, name=self.L60)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d6d3360d1b6ed75bdbdb3255ab4081d096dfc3bb5a54fd514e228840387a2326"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 412,
                  "startColumn": 9,
                  "charOffset": 15426,
                  "charLength": 3,
                  "snippet": {
                    "text": "L70"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 410,
                  "startColumn": 1,
                  "charOffset": 15290,
                  "charLength": 319,
                  "snippet": {
                    "text": "        L90 = discord.utils.get(ctx.guild.roles, name=self.L90)\n        L80 = discord.utils.get(ctx.guild.roles, name=self.L80)\n        L70 = discord.utils.get(ctx.guild.roles, name=self.L70)\n        L60 = discord.utils.get(ctx.guild.roles, name=self.L60)\n        L50 = discord.utils.get(ctx.guild.roles, name=self.L50)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0ff47051baeb3695002f18887994bc9cde65a499bb457adc487f22dee022eed1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 413,
                  "startColumn": 9,
                  "charOffset": 15490,
                  "charLength": 3,
                  "snippet": {
                    "text": "L60"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 411,
                  "startColumn": 1,
                  "charOffset": 15354,
                  "charLength": 319,
                  "snippet": {
                    "text": "        L80 = discord.utils.get(ctx.guild.roles, name=self.L80)\n        L70 = discord.utils.get(ctx.guild.roles, name=self.L70)\n        L60 = discord.utils.get(ctx.guild.roles, name=self.L60)\n        L50 = discord.utils.get(ctx.guild.roles, name=self.L50)\n        L40 = discord.utils.get(ctx.guild.roles, name=self.L40)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4343cbf7d0127c8c4a208df2a033fe597cd432ad4464ff298216817468fbda25"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 414,
                  "startColumn": 9,
                  "charOffset": 15554,
                  "charLength": 3,
                  "snippet": {
                    "text": "L50"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 412,
                  "startColumn": 1,
                  "charOffset": 15418,
                  "charLength": 256,
                  "snippet": {
                    "text": "        L70 = discord.utils.get(ctx.guild.roles, name=self.L70)\n        L60 = discord.utils.get(ctx.guild.roles, name=self.L60)\n        L50 = discord.utils.get(ctx.guild.roles, name=self.L50)\n        L40 = discord.utils.get(ctx.guild.roles, name=self.L40)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "17f9fc7ffb89fdd22183edb00f1f4b45715e9f6fd1eee882c71951f59a75590f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 415,
                  "startColumn": 9,
                  "charOffset": 15618,
                  "charLength": 3,
                  "snippet": {
                    "text": "L40"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 413,
                  "startColumn": 1,
                  "charOffset": 15482,
                  "charLength": 213,
                  "snippet": {
                    "text": "        L60 = discord.utils.get(ctx.guild.roles, name=self.L60)\n        L50 = discord.utils.get(ctx.guild.roles, name=self.L50)\n        L40 = discord.utils.get(ctx.guild.roles, name=self.L40)\n\n        roleList = ["
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6a28875ad5bc9692649006439cbc0e4b9cadf4714b04c055f16fec42f44c3bfe"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 417,
                  "startColumn": 9,
                  "charOffset": 15683,
                  "charLength": 8,
                  "snippet": {
                    "text": "roleList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 415,
                  "startColumn": 1,
                  "charOffset": 15610,
                  "charLength": 117,
                  "snippet": {
                    "text": "        L40 = discord.utils.get(ctx.guild.roles, name=self.L40)\n\n        roleList = [\n            SB,\n            AT,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "328248c8b95af2b182209f98b8b295db4e30c24c31bb3411f87efac7532d55d5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 569,
                  "startColumn": 17,
                  "charOffset": 21677,
                  "charLength": 10,
                  "snippet": {
                    "text": "VCDatetime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 567,
                  "startColumn": 1,
                  "charOffset": 21588,
                  "charLength": 201,
                  "snippet": {
                    "text": "                )\n                print(f\"T: {query.TutorBotSessionID}\")\n                VCDatetime = pytz.timezone(\"America/New_York\").localize(\n                    query.datetimeObj\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bb94c026c40f69c846fc722fd1b1097701d125e02227a96115c1129006fc36a6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 574,
                  "startColumn": 17,
                  "charOffset": 21863,
                  "charLength": 6,
                  "snippet": {
                    "text": "daySTR"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 572,
                  "startColumn": 1,
                  "charOffset": 21790,
                  "charLength": 186,
                  "snippet": {
                    "text": "\n                day, now = showTotalMinutes(VCDatetime)\n                daySTR = int(VCDatetime.timestamp())\n                nowSTR = int(now.timestamp())\n                day = str(day)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "721fa9f78af71edbc20b87888b3597b1d539793cb4171c7ef8de1b6e96d40fea"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 575,
                  "startColumn": 17,
                  "charOffset": 21916,
                  "charLength": 6,
                  "snippet": {
                    "text": "nowSTR"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 573,
                  "startColumn": 1,
                  "charOffset": 21791,
                  "charLength": 186,
                  "snippet": {
                    "text": "                day, now = showTotalMinutes(VCDatetime)\n                daySTR = int(VCDatetime.timestamp())\n                nowSTR = int(now.timestamp())\n                day = str(day)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4bdf01d65d029b0d0442cf9a0c5986d607b23646a7017458bf72ac780a616ff9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 594,
                  "startColumn": 17,
                  "charOffset": 22738,
                  "charLength": 12,
                  "snippet": {
                    "text": "tutorSession"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 592,
                  "startColumn": 1,
                  "charOffset": 22674,
                  "charLength": 223,
                  "snippet": {
                    "text": "\n                print(query.TutorBotSessionID)\n                tutorSession = database.TutorBot_Sessions.select().where(\n                    database.TutorBot_Sessions.SessionID == query.TutorBotSessionID\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4f4f549cd3d7228245ebf9085b8d76c4acbf8ef0e6808ed9ab5bcda5355eb790"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 601,
                  "startColumn": 21,
                  "charOffset": 23002,
                  "charLength": 12,
                  "snippet": {
                    "text": "tutorSession"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 599,
                  "startColumn": 1,
                  "charOffset": 22939,
                  "charLength": 169,
                  "snippet": {
                    "text": "\n                if tutorSession.exists():\n                    tutorSession = tutorSession.get()\n\n                    student = self.bot.get_user(tutorSession.StudentID)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0604996607352069deeaa4e96135b64de5cb53bef67757ba227fb276b4b752ba"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 606,
                  "startColumn": 21,
                  "charOffset": 23198,
                  "charLength": 6,
                  "snippet": {
                    "text": "HOURCH"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 604,
                  "startColumn": 1,
                  "charOffset": 23109,
                  "charLength": 181,
                  "snippet": {
                    "text": "                    tutor = self.bot.get_user(tutorSession.TutorID)\n\n                    HOURCH = self.bot.get_channel(self.TutorLogID)\n\n                    hourlog = discord.Embed("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9cba0d94b966cefda0c205f651f7f1366c7f95a0de9472b7596b276bbe258296"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 673,
                  "startColumn": 17,
                  "charOffset": 26153,
                  "charLength": 10,
                  "snippet": {
                    "text": "VCDatetime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 671,
                  "startColumn": 1,
                  "charOffset": 26092,
                  "charLength": 188,
                  "snippet": {
                    "text": "                )\n                tag.save()\n                VCDatetime = pytz.timezone(\"America/New_York\").localize(q.datetimeObj)\n\n                day, now = showTotalMinutes(VCDatetime)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e9b3602acc48f7b07fec8000e03da6f5330b93019f748a09becb7820a909e45b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 676,
                  "startColumn": 17,
                  "charOffset": 26297,
                  "charLength": 6,
                  "snippet": {
                    "text": "daySTR"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 674,
                  "startColumn": 1,
                  "charOffset": 26224,
                  "charLength": 186,
                  "snippet": {
                    "text": "\n                day, now = showTotalMinutes(VCDatetime)\n                daySTR = int(VCDatetime.timestamp())\n                nowSTR = int(now.timestamp())\n                day = str(day)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "aefe0fae70be60b91d3ee8abb97fac62c9846c8306c82b111e12a9b2e9985e2d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 677,
                  "startColumn": 17,
                  "charOffset": 26350,
                  "charLength": 6,
                  "snippet": {
                    "text": "nowSTR"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 675,
                  "startColumn": 1,
                  "charOffset": 26225,
                  "charLength": 186,
                  "snippet": {
                    "text": "                day, now = showTotalMinutes(VCDatetime)\n                daySTR = int(VCDatetime.timestamp())\n                nowSTR = int(now.timestamp())\n                day = str(day)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8285fa35962b207375a62ec4aaaae7374395251a5e6e933da39b0e89ef0fe4cf"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 694,
                  "startColumn": 17,
                  "charOffset": 27094,
                  "charLength": 12,
                  "snippet": {
                    "text": "tutorSession"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 692,
                  "startColumn": 1,
                  "charOffset": 27034,
                  "charLength": 215,
                  "snippet": {
                    "text": "\n                print(q.TutorBotSessionID)\n                tutorSession = database.TutorBot_Sessions.select().where(\n                    database.TutorBot_Sessions.SessionID == q.TutorBotSessionID\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "78c7943d5016cd5b35b54362ac6dce94c3f3d799f57605d5fe2a11c93c191bd6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 698,
                  "startColumn": 21,
                  "charOffset": 27312,
                  "charLength": 12,
                  "snippet": {
                    "text": "tutorSession"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 696,
                  "startColumn": 1,
                  "charOffset": 27232,
                  "charLength": 186,
                  "snippet": {
                    "text": "                )\n                if tutorSession.exists():\n                    tutorSession = tutorSession.get()\n\n                    student = self.bot.get_user(tutorSession.StudentID)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "93ec38d6115aca524950843dbf563e01a66365e03239659c537913aaccffbe1f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 703,
                  "startColumn": 21,
                  "charOffset": 27508,
                  "charLength": 6,
                  "snippet": {
                    "text": "HOURCH"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 701,
                  "startColumn": 1,
                  "charOffset": 27419,
                  "charLength": 178,
                  "snippet": {
                    "text": "                    tutor = self.bot.get_user(tutorSession.TutorID)\n\n                    HOURCH = self.bot.get_user(self.TutorLogID)\n\n                    hourlog = discord.Embed("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "525da73d4697c5f29306e97d74004cfce0262a68d15b51eb5d0ebf065148c946"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 833,
                  "startColumn": 17,
                  "charOffset": 33208,
                  "charLength": 10,
                  "snippet": {
                    "text": "VCDatetime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 831,
                  "startColumn": 1,
                  "charOffset": 33147,
                  "charLength": 188,
                  "snippet": {
                    "text": "                    .get()\n                )\n                VCDatetime = pytz.timezone(\"America/New_York\").localize(q.datetimeObj)\n\n                day, now = showTotalMinutes(VCDatetime)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c0943d84dbc075068b9c9ff867f5cbd7a5690eecf9b9ef7a403eb2a68153ea65"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 889,
                  "startColumn": 9,
                  "charOffset": 35506,
                  "charLength": 3,
                  "snippet": {
                    "text": "BOT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 887,
                  "startColumn": 1,
                  "charOffset": 35444,
                  "charLength": 223,
                  "snippet": {
                    "text": "        member = ctx.guild.get_member(ctx.author.id)\n\n        BOT = ctx.guild.get_member(self.bot.user.id)\n        OWNER = ctx.guild.get_member(self.ownerID)\n        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4e607271c7e491ef9e3f8f239ec32ccc1b19700fcd90fc6b55a87f04f6ab2c7f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 890,
                  "startColumn": 9,
                  "charOffset": 35559,
                  "charLength": 5,
                  "snippet": {
                    "text": "OWNER"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 888,
                  "startColumn": 1,
                  "charOffset": 35497,
                  "charLength": 234,
                  "snippet": {
                    "text": "\n        BOT = ctx.guild.get_member(self.bot.user.id)\n        OWNER = ctx.guild.get_member(self.ownerID)\n        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)\n        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c711809fed5e7f4602943621533096e49db32330772ef62927454e4aac10622c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 891,
                  "startColumn": 9,
                  "charOffset": 35610,
                  "charLength": 4,
                  "snippet": {
                    "text": "TMOD"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 889,
                  "startColumn": 1,
                  "charOffset": 35498,
                  "charLength": 299,
                  "snippet": {
                    "text": "        BOT = ctx.guild.get_member(self.bot.user.id)\n        OWNER = ctx.guild.get_member(self.ownerID)\n        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)\n        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4ab2ccb7c6741fea05a01e8b4667c6c9b78df0c5ec6c479fcb79360b92176e78"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 892,
                  "startColumn": 9,
                  "charOffset": 35676,
                  "charLength": 3,
                  "snippet": {
                    "text": "MOD"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 890,
                  "startColumn": 1,
                  "charOffset": 35551,
                  "charLength": 308,
                  "snippet": {
                    "text": "        OWNER = ctx.guild.get_member(self.ownerID)\n        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)\n        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2283934277bb7dbd0c7ed0056cf38c521ae7897834a1aae084f6bd713b19585d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 893,
                  "startColumn": 9,
                  "charOffset": 35740,
                  "charLength": 4,
                  "snippet": {
                    "text": "SMOD"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 891,
                  "startColumn": 1,
                  "charOffset": 35602,
                  "charLength": 319,
                  "snippet": {
                    "text": "        TMOD = discord.utils.get(ctx.guild.roles, name=self.TMOD)\n        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e5be996aadddf0287a234d7a49153870927d0a464ed5dd08ae8bc6d7d82ff733"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 894,
                  "startColumn": 9,
                  "charOffset": 35806,
                  "charLength": 2,
                  "snippet": {
                    "text": "CO"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 892,
                  "startColumn": 1,
                  "charOffset": 35668,
                  "charLength": 315,
                  "snippet": {
                    "text": "        MOD = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        ST = discord.utils.get(ctx.guild.roles, name=self.ST)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cbc666bb3799bb0eca745da17b5081c54326a4d47d0b73db2d9c5769ac4f7796"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 895,
                  "startColumn": 9,
                  "charOffset": 35868,
                  "charLength": 2,
                  "snippet": {
                    "text": "VP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 893,
                  "startColumn": 1,
                  "charOffset": 35732,
                  "charLength": 252,
                  "snippet": {
                    "text": "        SMOD = discord.utils.get(ctx.guild.roles, name=self.SMOD)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        ST = discord.utils.get(ctx.guild.roles, name=self.ST)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e8fd97d1c9c4acce952e21107cfdaefaa34379187d516d683c88ee6353c08a48"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 896,
                  "startColumn": 9,
                  "charOffset": 35930,
                  "charLength": 2,
                  "snippet": {
                    "text": "ST"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 894,
                  "startColumn": 1,
                  "charOffset": 35798,
                  "charLength": 259,
                  "snippet": {
                    "text": "        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        ST = discord.utils.get(ctx.guild.roles, name=self.ST)\n\n        SE = discord.utils.get(ctx.guild.roles, name=\"Senior Executive\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "48e7e352f2d8bba3ee14e2ac9b4f20b632f261d48c30ca10fd0aefc20e74cb53"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 898,
                  "startColumn": 9,
                  "charOffset": 35993,
                  "charLength": 2,
                  "snippet": {
                    "text": "SE"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 896,
                  "startColumn": 1,
                  "charOffset": 35922,
                  "charLength": 269,
                  "snippet": {
                    "text": "        ST = discord.utils.get(ctx.guild.roles, name=self.ST)\n\n        SE = discord.utils.get(ctx.guild.roles, name=\"Senior Executive\")\n        BM = discord.utils.get(ctx.guild.roles, name=\"Board Member\")\n        E = discord.utils.get(ctx.guild.roles, name=\"Executive\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "eac1854231245c5ec0aecefd22facf759eb751de4fb710d6a9d88e15f680c57f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 899,
                  "startColumn": 9,
                  "charOffset": 36066,
                  "charLength": 2,
                  "snippet": {
                    "text": "BM"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 897,
                  "startColumn": 1,
                  "charOffset": 35984,
                  "charLength": 242,
                  "snippet": {
                    "text": "\n        SE = discord.utils.get(ctx.guild.roles, name=\"Senior Executive\")\n        BM = discord.utils.get(ctx.guild.roles, name=\"Board Member\")\n        E = discord.utils.get(ctx.guild.roles, name=\"Executive\")\n        roles = [BM, SE, E, OWNER]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1a008a378f997ace50bd691be4209d9b6ddd56684fa0dc770232854f95b8bf45"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 900,
                  "startColumn": 9,
                  "charOffset": 36135,
                  "charLength": 1,
                  "snippet": {
                    "text": "E"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 898,
                  "startColumn": 1,
                  "charOffset": 35985,
                  "charLength": 242,
                  "snippet": {
                    "text": "        SE = discord.utils.get(ctx.guild.roles, name=\"Senior Executive\")\n        BM = discord.utils.get(ctx.guild.roles, name=\"Board Member\")\n        E = discord.utils.get(ctx.guild.roles, name=\"Executive\")\n        roles = [BM, SE, E, OWNER]\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7ada0880c98f5b9862416c29a8277742817cd6a94bef1256c499bb669502b176"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 932,
                  "startColumn": 21,
                  "charOffset": 37527,
                  "charLength": 4,
                  "snippet": {
                    "text": "LOCK"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 930,
                  "startColumn": 1,
                  "charOffset": 37471,
                  "charLength": 176,
                  "snippet": {
                    "text": "\n                if query.exists():\n                    LOCK: database.VCChannelInfo = (\n                        database.VCChannelInfo.select()\n                        .where("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "df184d35446ec8a771166c1d5c26d90745267a1a561f360498e232bbcef7781e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1011,
                  "startColumn": 9,
                  "charOffset": 41210,
                  "charLength": 2,
                  "snippet": {
                    "text": "TR"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1009,
                  "startColumn": 1,
                  "charOffset": 41132,
                  "charLength": 213,
                  "snippet": {
                    "text": "    @commands.command()\n    async def settutor(self, ctx, tutorcode):\n        TR = discord.utils.get(ctx.guild.roles, name=self.TutorRole)\n\n        if TR not in ctx.author.roles or ctx.guild.id == StaffID.g_staff:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "47fdb15b50bce84e828daf468ec31e84fea446dd69d11ea464b0a61cf1b1d519"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1028,
                  "startColumn": 13,
                  "charOffset": 41887,
                  "charLength": 12,
                  "snippet": {
                    "text": "tutorSession"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1026,
                  "startColumn": 1,
                  "charOffset": 41823,
                  "charLength": 201,
                  "snippet": {
                    "text": "                return await ctx.send(embed=embed)\n\n            tutorSession = database.TutorBot_Sessions.select().where(\n                database.TutorBot_Sessions.SessionID == tutorcode\n            )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1571ea40590db86f0499725f1e30082c3c8499a381f310c04f6070d8bab88c3b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1032,
                  "startColumn": 17,
                  "charOffset": 42079,
                  "charLength": 12,
                  "snippet": {
                    "text": "tutorSession"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1030,
                  "startColumn": 1,
                  "charOffset": 42011,
                  "charLength": 174,
                  "snippet": {
                    "text": "            )\n            if tutorSession.exists():\n                tutorSession = tutorSession.get()\n                if member.voice.channel.category_id in self.categoryID:\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0475f553a126312324a6ecb9728f771909cb85f6a7dc7a03fde137ce339436ca"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1120,
                  "startColumn": 21,
                  "charOffset": 46264,
                  "charLength": 4,
                  "snippet": {
                    "text": "LOCK"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1118,
                  "startColumn": 1,
                  "charOffset": 46208,
                  "charLength": 176,
                  "snippet": {
                    "text": "\n                if query.exists():\n                    LOCK: database.VCChannelInfo = (\n                        database.VCChannelInfo.select()\n                        .where("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9b80679a01c52a86c083d060094a9b1d3ff7144d29b6d4ef4d73e66f4dbf5e0a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1200,
                  "startColumn": 33,
                  "charOffset": 49855,
                  "charLength": 10,
                  "snippet": {
                    "text": "typeAction"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1198,
                  "startColumn": 1,
                  "charOffset": 49744,
                  "charLength": 253,
                  "snippet": {
                    "text": "    @commands.command()\n    @commands.cooldown(1, 5, commands.BucketType.user)\n    async def permit(self, ctx, typeAction, user: discord.Member = None):\n        database.db.connect(reuse_if_open=True)\n        member = ctx.guild.get_member(ctx.author.id)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "97cc9e1296994ca6cc95bccc01fb150556b7ea084b4f9b9b381c5da9a35e9776"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1300,
                  "startColumn": 29,
                  "charOffset": 54739,
                  "charLength": 9,
                  "snippet": {
                    "text": "formatVer"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1298,
                  "startColumn": 1,
                  "charOffset": 54640,
                  "charLength": 184,
                  "snippet": {
                    "text": "                                    randomlist.append(x.display_name)\n\n                            formatVer = \"\\n\".join(randomlist)\n\n                            embed = discord.Embed("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "526a2547000765a0757a315db4e5dac8761c137901ff904ca2acdaf228a8efb3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1375,
                  "startColumn": 9,
                  "charOffset": 58630,
                  "charLength": 2,
                  "snippet": {
                    "text": "MT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1373,
                  "startColumn": 1,
                  "charOffset": 58568,
                  "charLength": 242,
                  "snippet": {
                    "text": "        member = ctx.guild.get_member(ctx.author.id)\n\n        MT = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        MAT = discord.utils.get(ctx.guild.roles, name=self.MAT)\n        TT = discord.utils.get(ctx.guild.roles, name=self.TT)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "27e76641528c9ed71781d079f77ea772cb804661c2f4211ed50a8be2e5f74082"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1376,
                  "startColumn": 9,
                  "charOffset": 58693,
                  "charLength": 3,
                  "snippet": {
                    "text": "MAT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1374,
                  "startColumn": 1,
                  "charOffset": 58621,
                  "charLength": 251,
                  "snippet": {
                    "text": "\n        MT = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        MAT = discord.utils.get(ctx.guild.roles, name=self.MAT)\n        TT = discord.utils.get(ctx.guild.roles, name=self.TT)\n        AT = discord.utils.get(ctx.guild.roles, name=self.AT)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e7981079a1e32c3e595d033b84165636b4425ad8ffcf1a82a5d84a4b978aec6c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1377,
                  "startColumn": 9,
                  "charOffset": 58757,
                  "charLength": 2,
                  "snippet": {
                    "text": "TT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1375,
                  "startColumn": 1,
                  "charOffset": 58622,
                  "charLength": 312,
                  "snippet": {
                    "text": "        MT = discord.utils.get(ctx.guild.roles, name=self.MOD)\n        MAT = discord.utils.get(ctx.guild.roles, name=self.MAT)\n        TT = discord.utils.get(ctx.guild.roles, name=self.TT)\n        AT = discord.utils.get(ctx.guild.roles, name=self.AT)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c7020a387804e9d2631f5510b3a394ec2ffcb25d794c60fa60ace49e956c71e6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1378,
                  "startColumn": 9,
                  "charOffset": 58819,
                  "charLength": 2,
                  "snippet": {
                    "text": "AT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1376,
                  "startColumn": 1,
                  "charOffset": 58685,
                  "charLength": 311,
                  "snippet": {
                    "text": "        MAT = discord.utils.get(ctx.guild.roles, name=self.MAT)\n        TT = discord.utils.get(ctx.guild.roles, name=self.TT)\n        AT = discord.utils.get(ctx.guild.roles, name=self.AT)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "818fe290446390a40ac6654523ed7f0204ebfebea514c571cb03e9000e2891d6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1379,
                  "startColumn": 9,
                  "charOffset": 58881,
                  "charLength": 2,
                  "snippet": {
                    "text": "VP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1377,
                  "startColumn": 1,
                  "charOffset": 58749,
                  "charLength": 248,
                  "snippet": {
                    "text": "        TT = discord.utils.get(ctx.guild.roles, name=self.TT)\n        AT = discord.utils.get(ctx.guild.roles, name=self.AT)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "eec7761284d706a27a7e5c65465b9a85fb66f3af64027c8ed629dbcbc77e84e9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1380,
                  "startColumn": 9,
                  "charOffset": 58943,
                  "charLength": 2,
                  "snippet": {
                    "text": "CO"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1378,
                  "startColumn": 1,
                  "charOffset": 58811,
                  "charLength": 231,
                  "snippet": {
                    "text": "        AT = discord.utils.get(ctx.guild.roles, name=self.AT)\n        VP = discord.utils.get(ctx.guild.roles, name=self.VP)\n        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n\n        roleList = [MT, MAT, TT, AT, VP, CO]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "64abef22040d80178836853790508a5d5258335c06904724c29f1327830be8c4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1382,
                  "startColumn": 9,
                  "charOffset": 59006,
                  "charLength": 8,
                  "snippet": {
                    "text": "roleList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1380,
                  "startColumn": 1,
                  "charOffset": 58935,
                  "charLength": 143,
                  "snippet": {
                    "text": "        CO = discord.utils.get(ctx.guild.roles, name=self.CO)\n\n        roleList = [MT, MAT, TT, AT, VP, CO]\n\n        voice_state = member.voice"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5f25930da41efd9684ce23b1841bee59b29cfbf8edee2056e86612b268d6cc54"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1414,
                  "startColumn": 25,
                  "charOffset": 60385,
                  "charLength": 10,
                  "snippet": {
                    "text": "voiceLIMIT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1412,
                  "startColumn": 1,
                  "charOffset": 60301,
                  "charLength": 228,
                  "snippet": {
                    "text": "                if query.exists():\n                    try:\n                        voiceLIMIT = int(new_voice_limit)\n                    except:\n                        return await ctx.send(f\"{Emoji.deny} Not a valid number!\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "83ecf6d9b1026022b6ee49bfbe9514b13ab6ebb951802d60b57e58dedeb71f19"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1578,
                  "startColumn": 15,
                  "charOffset": 68253,
                  "charLength": 7,
                  "snippet": {
                    "text": "startVC"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1576,
                  "startColumn": 1,
                  "charOffset": 68197,
                  "charLength": 144,
                  "snippet": {
                    "text": "\n    @commands.command(aliases=[\"start\"])\n    async def startVC(self, ctx):\n        embed = discord.Embed(\n            title=\"Private Channels\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "dc8410046d854f5d1da6aea2800e1a657ba379bde7f32b97506356d8e15eb810"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 5,
                  "charOffset": 568,
                  "charLength": 14,
                  "snippet": {
                    "text": "showFutureTime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 26,
                  "startColumn": 1,
                  "charOffset": 562,
                  "charLength": 98,
                  "snippet": {
                    "text": "\n\ndef showFutureTime(time):\n    now = datetime.now(EST)\n    output = convert_time_to_seconds(time)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "73f1a130eee2c9ae7038ff0db4958c9a9fd19138f3369cea3c2bf67d89c1def4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 5,
                  "charOffset": 826,
                  "charLength": 16,
                  "snippet": {
                    "text": "showTotalMinutes"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 38,
                  "startColumn": 1,
                  "charOffset": 820,
                  "charLength": 71,
                  "snippet": {
                    "text": "\n\ndef showTotalMinutes(dateObj: datetime):\n    now = datetime.now(EST)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8459b478dd7c655ae8078b4ba971252f7de18704627ee52caa5942830fe48444"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 22,
                  "charOffset": 843,
                  "charLength": 17,
                  "snippet": {
                    "text": "dateObj: datetime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 38,
                  "startColumn": 1,
                  "charOffset": 820,
                  "charLength": 71,
                  "snippet": {
                    "text": "\n\ndef showTotalMinutes(dateObj: datetime):\n    now = datetime.now(EST)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b1730986fa6b3cb338501e82c19694ec8f453b1a7599fc8e5af0e494039387d8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 5,
                  "charOffset": 896,
                  "charLength": 9,
                  "snippet": {
                    "text": "deltaTime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 41,
                  "startColumn": 1,
                  "charOffset": 863,
                  "charLength": 106,
                  "snippet": {
                    "text": "    now = datetime.now(EST)\n\n    deltaTime = now - dateObj\n\n    totalmin = deltaTime.total_seconds() // 60"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c684caaa527545ef412b3bdf90c0450798477c13d657a23996d6f640e7bc5eb8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 5,
                  "charOffset": 1002,
                  "charLength": 12,
                  "snippet": {
                    "text": "getConsoleCH"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 48,
                  "startColumn": 1,
                  "charOffset": 996,
                  "charLength": 148,
                  "snippet": {
                    "text": "\n\ndef getConsoleCH(column_id):\n    q: database.SandboxConfig = (\n        database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0872e36688502584164b8146177585b950736a8c8265f88caf7dcb5dc64872b1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 5,
                  "charOffset": 1155,
                  "charLength": 10,
                  "snippet": {
                    "text": "ColumnDict"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 52,
                  "startColumn": 1,
                  "charOffset": 1061,
                  "charLength": 164,
                  "snippet": {
                    "text": "        database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()\n    )\n    ColumnDict = {\n        0: q.ch_tv_console,\n        1: q.ch_tv_startvc,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7fc261b9799b1daefcbba66df021c5ba32a3d212cc7b8ff738508ba110dd343f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 9,
                  "charOffset": 3294,
                  "charLength": 10,
                  "snippet": {
                    "text": "lobbyStart"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 126,
                  "startColumn": 1,
                  "charOffset": 3187,
                  "charLength": 229,
                  "snippet": {
                    "text": "        database.db.connect(reuse_if_open=True)\n        print(self.LobbyStartIDs[member.guild.id])\n        lobbyStart = member.guild.get_channel(self.LobbyStartIDs[member.guild.id])\n        if lobbyStart == None:\n            try:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a23312de5fafc2f2ad34cb1ae8b98b2d60ee02ecf0444195a9bac716624eb091"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 17,
                  "charOffset": 3433,
                  "charLength": 10,
                  "snippet": {
                    "text": "lobbyStart"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 129,
                  "startColumn": 1,
                  "charOffset": 3369,
                  "charLength": 201,
                  "snippet": {
                    "text": "        if lobbyStart == None:\n            try:\n                lobbyStart = self.bot.get_channel(self.LobbyStartIDs[member.guild.id])\n            except Exception as e:\n                return print(e)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1289054770634afb45c325a3e60598c621859c08bbb20e78301a81c7b3abe51d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 13,
                  "charOffset": 3903,
                  "charLength": 11,
                  "snippet": {
                    "text": "acadChannel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 144,
                  "startColumn": 1,
                  "charOffset": 3879,
                  "charLength": 214,
                  "snippet": {
                    "text": "        ):\n\n            acadChannel = self.bot.get_channel(self.channel_id[member.guild.id])\n            query = database.VCChannelInfo.select().where(\n                (database.VCChannelInfo.authorID == member.id)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "dd34086be72bba3e02ab0dbf504df971acfd87fbd5e517c1ffb62ad25eca1d56"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 13,
                  "charOffset": 4272,
                  "charLength": 11,
                  "snippet": {
                    "text": "ignoreQuery"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 150,
                  "startColumn": 1,
                  "charOffset": 4168,
                  "charLength": 284,
                  "snippet": {
                    "text": "                & (database.VCChannelInfo.GuildID == before.channel.guild.id)\n            )\n            ignoreQuery = database.IgnoreThis.select().where(\n                (database.IgnoreThis.authorID == member.id)\n                & (database.IgnoreThis.channelID == before.channel.id)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fa68cdccbca990520140376870f55a9d2ec88050ad50e439b24b86c9f183f215"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 21,
                  "charOffset": 5618,
                  "charLength": 12,
                  "snippet": {
                    "text": "tutorChannel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 180,
                  "startColumn": 1,
                  "charOffset": 5559,
                  "charLength": 180,
                  "snippet": {
                    "text": "                )\n                try:\n                    tutorChannel = self.bot.get_channel(int(query.ChannelID))\n                except:\n                    tutorChannel = None"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "12ca4e13fd6ad65de4ea556ae2436db83ae145ac3899a7e7e95b10f3de050ada"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 21,
                  "charOffset": 5720,
                  "charLength": 12,
                  "snippet": {
                    "text": "tutorChannel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 182,
                  "startColumn": 1,
                  "charOffset": 5598,
                  "charLength": 204,
                  "snippet": {
                    "text": "                    tutorChannel = self.bot.get_channel(int(query.ChannelID))\n                except:\n                    tutorChannel = None\n\n                if query.ChannelID == str(before.channel.id):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5fa33d9e283b0721a7adeb1068ed35d04ed884bc8c75b5fe372959fb2105b14c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 243,
                  "startColumn": 29,
                  "charOffset": 8601,
                  "charLength": 10,
                  "snippet": {
                    "text": "VCDatetime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 241,
                  "startColumn": 1,
                  "charOffset": 8504,
                  "charLength": 233,
                  "snippet": {
                    "text": "                                .get()\n                            )\n                            VCDatetime = pytz.timezone(\"America/New_York\").localize(\n                                query.datetimeObj\n                            )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0b3280f76bab9f2cf08d3d03f390d1d5e336dd048e6a67f6844963b3f9935647"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 248,
                  "startColumn": 29,
                  "charOffset": 8835,
                  "charLength": 6,
                  "snippet": {
                    "text": "daySTR"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 246,
                  "startColumn": 1,
                  "charOffset": 8738,
                  "charLength": 192,
                  "snippet": {
                    "text": "\n                            day, now = showTotalMinutes(VCDatetime)\n                            daySTR = int(VCDatetime.timestamp())\n                            nowSTR = int(now.timestamp())\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "00201bfc157a7f9493adb59e751f2ad8a155b828764edf0e389d7d726f23b549"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 249,
                  "startColumn": 29,
                  "charOffset": 8900,
                  "charLength": 6,
                  "snippet": {
                    "text": "nowSTR"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 247,
                  "startColumn": 1,
                  "charOffset": 8739,
                  "charLength": 243,
                  "snippet": {
                    "text": "                            day, now = showTotalMinutes(VCDatetime)\n                            daySTR = int(VCDatetime.timestamp())\n                            nowSTR = int(now.timestamp())\n\n                            query.delete_instance()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fa0967d396818274477870ca4fc49de84d2e0ebf5be378e57268212d1dc14e39"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 272,
                  "startColumn": 33,
                  "charOffset": 10130,
                  "charLength": 12,
                  "snippet": {
                    "text": "tutorSession"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 270,
                  "startColumn": 1,
                  "charOffset": 9992,
                  "charLength": 310,
                  "snippet": {
                    "text": "                                    content=member.mention, embed=embed\n                                )\n                                tutorSession = (\n                                    database.TutorBot_Sessions.select().where(\n                                        database.TutorBot_Sessions.SessionID"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a2be40735ab2a87bef85388a106cc49a701e4f67ccd715057a5dff03f435db61"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 37,
                  "charOffset": 10537,
                  "charLength": 12,
                  "snippet": {
                    "text": "tutorSession"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 278,
                  "startColumn": 1,
                  "charOffset": 10442,
                  "charLength": 217,
                  "snippet": {
                    "text": "                                if tutorSession.exists():\n\n                                    tutorSession = tutorSession.get()\n\n                                    student = self.bot.get_user(tutorSession.StudentID)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b6bd2ec1a9a5618bd425dea91576aafc30540adc48a27ed37552d863cf18b353"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 284,
                  "startColumn": 37,
                  "charOffset": 10780,
                  "charLength": 6,
                  "snippet": {
                    "text": "HOURCH"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 282,
                  "startColumn": 1,
                  "charOffset": 10572,
                  "charLength": 316,
                  "snippet": {
                    "text": "                                    student = self.bot.get_user(tutorSession.StudentID)\n                                    tutor = self.bot.get_user(tutorSession.TutorID)\n                                    HOURCH = self.bot.get_channel(self.TutorLogID)\n\n                                    hourlog = discord.Embed("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9fb93bc7ef023b82e6fb68a7f556634eb76836da7e72512ea460e98086f5f3fe"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 13,
                  "charOffset": 13734,
                  "charLength": 11,
                  "snippet": {
                    "text": "acadChannel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 334,
                  "startColumn": 1,
                  "charOffset": 13680,
                  "charLength": 249,
                  "snippet": {
                    "text": "            and not member.bot\n        ):\n            acadChannel = self.bot.get_channel(self.LobbyStartIDs[member.guild.id])\n            print(acadChannel, after.channel.guild.id)\n            SB = discord.utils.get(member.guild.roles, name=self.SB)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4ff514d4643a5ac1fc3e17b384c694987b1e79fd5b9aa4be9469f4f7825efc1f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 338,
                  "startColumn": 13,
                  "charOffset": 13873,
                  "charLength": 2,
                  "snippet": {
                    "text": "SB"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 336,
                  "startColumn": 1,
                  "charOffset": 13722,
                  "charLength": 285,
                  "snippet": {
                    "text": "            acadChannel = self.bot.get_channel(self.LobbyStartIDs[member.guild.id])\n            print(acadChannel, after.channel.guild.id)\n            SB = discord.utils.get(member.guild.roles, name=self.SB)\n\n            legend = discord.utils.get(member.guild.roles, name=self.Legend)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b22086772d175055aae22c1684530de4c19d293d3f91d89d238f26754a93af3a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 342,
                  "startColumn": 13,
                  "charOffset": 14021,
                  "charLength": 2,
                  "snippet": {
                    "text": "MT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 340,
                  "startColumn": 1,
                  "charOffset": 13931,
                  "charLength": 287,
                  "snippet": {
                    "text": "            legend = discord.utils.get(member.guild.roles, name=self.Legend)\n\n            MT = discord.utils.get(member.guild.roles, name=self.MOD)\n            MAT = discord.utils.get(member.guild.roles, name=self.MAT)\n            TT = discord.utils.get(member.guild.roles, name=self.TT)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2e70c3ee01966729da3d963a807289b53856c750057e56892ff91b168d7d1c9c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 343,
                  "startColumn": 13,
                  "charOffset": 14091,
                  "charLength": 3,
                  "snippet": {
                    "text": "MAT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 341,
                  "startColumn": 1,
                  "charOffset": 14008,
                  "charLength": 279,
                  "snippet": {
                    "text": "\n            MT = discord.utils.get(member.guild.roles, name=self.MOD)\n            MAT = discord.utils.get(member.guild.roles, name=self.MAT)\n            TT = discord.utils.get(member.guild.roles, name=self.TT)\n            AT = discord.utils.get(member.guild.roles, name=self.AT)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9df58fcbebd156cfbc4c2552c344c55d056cbd20986e562ecb31295517f0db37"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 344,
                  "startColumn": 13,
                  "charOffset": 14162,
                  "charLength": 2,
                  "snippet": {
                    "text": "TT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 342,
                  "startColumn": 1,
                  "charOffset": 14009,
                  "charLength": 347,
                  "snippet": {
                    "text": "            MT = discord.utils.get(member.guild.roles, name=self.MOD)\n            MAT = discord.utils.get(member.guild.roles, name=self.MAT)\n            TT = discord.utils.get(member.guild.roles, name=self.TT)\n            AT = discord.utils.get(member.guild.roles, name=self.AT)\n            VP = discord.utils.get(member.guild.roles, name=self.VP)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c9abcfd98fa67cc1ec795b969884155a23dde4bc070556d9d26686623752b375"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 345,
                  "startColumn": 13,
                  "charOffset": 14231,
                  "charLength": 2,
                  "snippet": {
                    "text": "AT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 343,
                  "startColumn": 1,
                  "charOffset": 14079,
                  "charLength": 346,
                  "snippet": {
                    "text": "            MAT = discord.utils.get(member.guild.roles, name=self.MAT)\n            TT = discord.utils.get(member.guild.roles, name=self.TT)\n            AT = discord.utils.get(member.guild.roles, name=self.AT)\n            VP = discord.utils.get(member.guild.roles, name=self.VP)\n            CO = discord.utils.get(member.guild.roles, name=self.CO)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "030820ade0d2fc7c2cfddadda842e3bc3b02f191644fbad3187e7bb89ca62eb8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 346,
                  "startColumn": 13,
                  "charOffset": 14300,
                  "charLength": 2,
                  "snippet": {
                    "text": "VP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 344,
                  "startColumn": 1,
                  "charOffset": 14150,
                  "charLength": 276,
                  "snippet": {
                    "text": "            TT = discord.utils.get(member.guild.roles, name=self.TT)\n            AT = discord.utils.get(member.guild.roles, name=self.AT)\n            VP = discord.utils.get(member.guild.roles, name=self.VP)\n            CO = discord.utils.get(member.guild.roles, name=self.CO)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c2759b0d3fbab62b54b60ed0e3a8f48a61f39f29534c24c9e5541d9b6b0ddd11"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 347,
                  "startColumn": 13,
                  "charOffset": 14369,
                  "charLength": 2,
                  "snippet": {
                    "text": "CO"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 345,
                  "startColumn": 1,
                  "charOffset": 14219,
                  "charLength": 268,
                  "snippet": {
                    "text": "            AT = discord.utils.get(member.guild.roles, name=self.AT)\n            VP = discord.utils.get(member.guild.roles, name=self.VP)\n            CO = discord.utils.get(member.guild.roles, name=self.CO)\n\n            roleList = [SB, legend, MT, MAT, TT, AT, VP, CO]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "625c46cb6a0a1c1882f588fffbab375fa51ecc37c2aaf817ef7330836df8334c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 349,
                  "startColumn": 13,
                  "charOffset": 14439,
                  "charLength": 8,
                  "snippet": {
                    "text": "roleList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 347,
                  "startColumn": 1,
                  "charOffset": 14357,
                  "charLength": 214,
                  "snippet": {
                    "text": "            CO = discord.utils.get(member.guild.roles, name=self.CO)\n\n            roleList = [SB, legend, MT, MAT, TT, AT, VP, CO]\n\n            TutorRole = discord.utils.get(member.guild.roles, name=self.TutorRole)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "da410fdc9da13042d50b01ba1c22ba48e646be8f84d16dc36f865bb522cc7f1e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 351,
                  "startColumn": 13,
                  "charOffset": 14501,
                  "charLength": 9,
                  "snippet": {
                    "text": "TutorRole"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 349,
                  "startColumn": 1,
                  "charOffset": 14427,
                  "charLength": 187,
                  "snippet": {
                    "text": "            roleList = [SB, legend, MT, MAT, TT, AT, VP, CO]\n\n            TutorRole = discord.utils.get(member.guild.roles, name=self.TutorRole)\n\n            category = discord.utils.get("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c009733fa0b81bdfd111fb34c5fd4ded5a377af5a27e4bf4e457c4d875be7583"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 372,
                  "startColumn": 17,
                  "charOffset": 15586,
                  "charLength": 13,
                  "snippet": {
                    "text": "moveToChannel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 370,
                  "startColumn": 1,
                  "charOffset": 15525,
                  "charLength": 158,
                  "snippet": {
                    "text": "            )\n            if query.exists():\n                moveToChannel = (\n                    database.VCChannelInfo.select()\n                    .where("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "701fd1c8677f1613cbad026e09febbb26c248e3f821a35528aa3159212df715e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 388,
                  "startColumn": 21,
                  "charOffset": 16399,
                  "charLength": 12,
                  "snippet": {
                    "text": "tutorChannel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 386,
                  "startColumn": 1,
                  "charOffset": 16340,
                  "charLength": 204,
                  "snippet": {
                    "text": "                )\n                try:\n                    tutorChannel = self.bot.get_channel(int(moveToChannel.ChannelID))\n                    await member.move_to(\n                        tutorChannel,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c961393d7d824190a00c795a404f4418a47f59de0d91493307fd4f96cd10ea15"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 15,
                  "charOffset": 661,
                  "charLength": 12,
                  "snippet": {
                    "text": "TTSWeekCheck"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 23,
                  "startColumn": 1,
                  "charOffset": 618,
                  "charLength": 146,
                  "snippet": {
                    "text": "\n    @tasks.loop(seconds=10)\n    async def TTSWeekCheck(self):\n        now = datetime.datetime.now(self.est)\n        weekdayNow = now.isoweekday()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e788efbef84f59c969d02ed703b8ddca398c30296f86a618394aa8ff30371777"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 9,
                  "charOffset": 735,
                  "charLength": 10,
                  "snippet": {
                    "text": "weekdayNow"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 25,
                  "startColumn": 1,
                  "charOffset": 647,
                  "charLength": 147,
                  "snippet": {
                    "text": "    async def TTSWeekCheck(self):\n        now = datetime.datetime.now(self.est)\n        weekdayNow = now.isoweekday()\n        timeNow = now.time()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5888671e48c529e30cf7b14b2eae14a46b601aa79d15f772296ed9516857eb83"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 9,
                  "charOffset": 773,
                  "charLength": 7,
                  "snippet": {
                    "text": "timeNow"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 26,
                  "startColumn": 1,
                  "charOffset": 681,
                  "charLength": 168,
                  "snippet": {
                    "text": "        now = datetime.datetime.now(self.est)\n        weekdayNow = now.isoweekday()\n        timeNow = now.time()\n\n        queryLeaderboard = StudyVCLeaderboard.select()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3b617d11c34e93d77a66578bdbec8e8c0a8c67e8ae0e1b8da0f1cf8df7436c89"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 9,
                  "charOffset": 803,
                  "charLength": 16,
                  "snippet": {
                    "text": "queryLeaderboard"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 1,
                  "charOffset": 765,
                  "charLength": 144,
                  "snippet": {
                    "text": "        timeNow = now.time()\n\n        queryLeaderboard = StudyVCLeaderboard.select()\n        entries = [entry.id for entry in queryLeaderboard]\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "50f1d602d2d12909c0a01ce1eb61c29fb9b96569086de97b1082a01d5c8b215e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 13,
                  "charOffset": 1084,
                  "charLength": 9,
                  "snippet": {
                    "text": "lastReset"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 36,
                  "startColumn": 1,
                  "charOffset": 1020,
                  "charLength": 181,
                  "snippet": {
                    "text": "            and timeNow >= self.midnight\n        ):\n            lastReset = now\n            for entry in entries:\n                queryLeaderboard = queryLeaderboard.select().where("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "50a6b6534376a85620c2a92269ed7559bdb149f54138c3df1e734eca70937209"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 17,
                  "charOffset": 1150,
                  "charLength": 16,
                  "snippet": {
                    "text": "queryLeaderboard"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 38,
                  "startColumn": 1,
                  "charOffset": 1072,
                  "charLength": 198,
                  "snippet": {
                    "text": "            lastReset = now\n            for entry in entries:\n                queryLeaderboard = queryLeaderboard.select().where(\n                    StudyVCLeaderboard.id == entry\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "af7d1ba97aeb870bdeed28a62f7eaee8fc1154ed10aed4b4b4859b87ff4cbbc9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 17,
                  "charOffset": 1287,
                  "charLength": 16,
                  "snippet": {
                    "text": "queryLeaderboard"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 41,
                  "startColumn": 1,
                  "charOffset": 1202,
                  "charLength": 211,
                  "snippet": {
                    "text": "                    StudyVCLeaderboard.id == entry\n                )\n                queryLeaderboard = queryLeaderboard.get()\n                queryLeaderboard.TTSWeek = 0\n                queryLeaderboard.save()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "488435a63dc00667f97e295728783b322f307b3f4abc37ec53ec48b80981ff47"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 5,
                  "charOffset": 1017,
                  "charLength": 14,
                  "snippet": {
                    "text": "showFutureTime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 44,
                  "startColumn": 1,
                  "charOffset": 1011,
                  "charLength": 98,
                  "snippet": {
                    "text": "\n\ndef showFutureTime(time):\n    now = datetime.now(EST)\n    output = convert_time_to_seconds(time)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7ec8cc1b810d87218543148bf62e4145b29ab0df58adcb8516aab21ae7f4a0c8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 5,
                  "charOffset": 1275,
                  "charLength": 16,
                  "snippet": {
                    "text": "showTotalMinutes"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 56,
                  "startColumn": 1,
                  "charOffset": 1269,
                  "charLength": 136,
                  "snippet": {
                    "text": "\n\ndef showTotalMinutes(dateObj: datetime):\n    now = datetime.now(EST)\n    dateObj = pytz.timezone(\"America/New_York\").localize(dateObj)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fa397654f75793df31fdcdc1369b393ce6c115613271f696a7d9c377675caa7c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 22,
                  "charOffset": 1292,
                  "charLength": 17,
                  "snippet": {
                    "text": "dateObj: datetime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 56,
                  "startColumn": 1,
                  "charOffset": 1269,
                  "charLength": 136,
                  "snippet": {
                    "text": "\n\ndef showTotalMinutes(dateObj: datetime):\n    now = datetime.now(EST)\n    dateObj = pytz.timezone(\"America/New_York\").localize(dateObj)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b4ff9b50e8c7fac011e14132699fa4953e9e609ba2ecb58b3d7d9b7f61f0cdb7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 5,
                  "charOffset": 1344,
                  "charLength": 7,
                  "snippet": {
                    "text": "dateObj"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 58,
                  "startColumn": 1,
                  "charOffset": 1271,
                  "charLength": 165,
                  "snippet": {
                    "text": "def showTotalMinutes(dateObj: datetime):\n    now = datetime.now(EST)\n    dateObj = pytz.timezone(\"America/New_York\").localize(dateObj)\n\n    deltaTime = now - dateObj"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cf024934db7d8a6beeaa15fdb52aed4df4065b37a555b43750ce23f5259397cf"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 5,
                  "charOffset": 1411,
                  "charLength": 9,
                  "snippet": {
                    "text": "deltaTime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 60,
                  "startColumn": 1,
                  "charOffset": 1340,
                  "charLength": 144,
                  "snippet": {
                    "text": "    dateObj = pytz.timezone(\"America/New_York\").localize(dateObj)\n\n    deltaTime = now - dateObj\n\n    totalmin = deltaTime.total_seconds() // 60"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c7cd2672f65fb49a7eee54cf78ff4d8784236924032833335627e8710c8e689d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 5,
                  "charOffset": 1517,
                  "charLength": 16,
                  "snippet": {
                    "text": "_getXPForNextLvl"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 67,
                  "startColumn": 1,
                  "charOffset": 1511,
                  "charLength": 96,
                  "snippet": {
                    "text": "\n\ndef _getXPForNextLvl(lvl: int):\n    \"\"\"\n    Get the XP the user needs to reach the next level."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "db1678eada0b4f28a52bf28587c39102ee614bec17af3edd5efb4c57df78f40f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 5,
                  "charOffset": 1695,
                  "charLength": 8,
                  "snippet": {
                    "text": "xpNeeded"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 76,
                  "startColumn": 1,
                  "charOffset": 1682,
                  "charLength": 79,
                  "snippet": {
                    "text": "    \"\"\"\n\n    xpNeeded = (5 * lvl * lvl) + (50 * lvl) + 100\n\n    return xpNeeded"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "25d71f49cbf1a311477cd63151cab430176f0f3a1faa40b96e9cb388bc24082d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 5,
                  "charOffset": 1768,
                  "charLength": 12,
                  "snippet": {
                    "text": "_shortNumber"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 81,
                  "startColumn": 1,
                  "charOffset": 1762,
                  "charLength": 107,
                  "snippet": {
                    "text": "\n\ndef _shortNumber(number: int) -> str:\n    \"\"\"\n    Shorts a number and adds the number abbreviation to it."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b5a6f8190d962b4ce740bfe88b6364777c8fe6d99e01df6299f961e819b86336"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 5,
                  "charOffset": 2116,
                  "charLength": 9,
                  "snippet": {
                    "text": "numberStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 94,
                  "startColumn": 1,
                  "charOffset": 2103,
                  "charLength": 64,
                  "snippet": {
                    "text": "    \"\"\"\n\n    numberStr = ...  # type: str\n\n    if number < 1000:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "162596950be2443a111b250c6eea28985608571c744c22b722b22d3b02c9f0eb"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 9,
                  "charOffset": 2176,
                  "charLength": 9,
                  "snippet": {
                    "text": "numberStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 97,
                  "startColumn": 1,
                  "charOffset": 2145,
                  "charLength": 82,
                  "snippet": {
                    "text": "\n    if number < 1000:\n        numberStr = f\"{number}\"\n\n    elif number < 1000000:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2ec1e37fa09cc0a1025ca90fc8d464092c96e044053774fd0daf58bd55906674"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 9,
                  "charOffset": 2293,
                  "charLength": 9,
                  "snippet": {
                    "text": "numberStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 102,
                  "startColumn": 1,
                  "charOffset": 2228,
                  "charLength": 120,
                  "snippet": {
                    "text": "        number /= 1000\n        number = round(number, 2)\n        numberStr = f\"{number}K\"\n\n    elif number < 1000000000:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a0e9a90c1dc2876855ae1333b069336f38906bede9cecba760e6697543124241"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 9,
                  "charOffset": 2417,
                  "charLength": 9,
                  "snippet": {
                    "text": "numberStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 107,
                  "startColumn": 1,
                  "charOffset": 2349,
                  "charLength": 126,
                  "snippet": {
                    "text": "        number /= 1000000\n        number = round(number, 2)\n        numberStr = f\"{number}M\"\n\n    elif number < 1000000000000:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ac2471f3b7603404b5dda34f0e881bae0e0ebe2e14e7da586e8e4ef75739b53e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 9,
                  "charOffset": 2547,
                  "charLength": 9,
                  "snippet": {
                    "text": "numberStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 112,
                  "startColumn": 1,
                  "charOffset": 2476,
                  "charLength": 132,
                  "snippet": {
                    "text": "        number /= 1000000000\n        number = round(number, 2)\n        numberStr = f\"{number}B\"\n\n    elif number < 1000000000000000:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fdd54d2d056e6ee51b6c53265479b19d77a13db577ad90d04f97b9f9a0f8c22d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 9,
                  "charOffset": 2683,
                  "charLength": 9,
                  "snippet": {
                    "text": "numberStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 117,
                  "startColumn": 1,
                  "charOffset": 2609,
                  "charLength": 109,
                  "snippet": {
                    "text": "        number /= 1000000000000\n        number = round(number, 2)\n        numberStr = f\"{number}T\"\n\n    else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "65edea7fdbc473b6f12c6c9e404d752ba4f93d37c2b608a19244c9943bbe5f33"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 11,
                  "charOffset": 2810,
                  "charLength": 22,
                  "snippet": {
                    "text": "addLeaderboardProgress"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 125,
                  "startColumn": 1,
                  "charOffset": 2798,
                  "charLength": 198,
                  "snippet": {
                    "text": "\n\nasync def addLeaderboardProgress(member: discord.Member):\n    \"\"\"\n    Updates the data in the database table `StudyVCLeaderboard` of a specific member and adds level roles to the member if needed."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ff3a9ede6b11524ff2de2f043b3c448a92dba1785011e378baa96275d8480a37"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 5,
                  "charOffset": 3148,
                  "charLength": 11,
                  "snippet": {
                    "text": "xpPerMinute"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 133,
                  "startColumn": 1,
                  "charOffset": 3068,
                  "charLength": 152,
                  "snippet": {
                    "text": "    :return: Whenever the user has been found in the database: bool\n    \"\"\"\n    xpPerMinute = 30\n\n    StudySessionQ = database.StudyVCDB.select().where("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4d367212a90dec1e6f1ccd09386bb2afa8de35d07446c4e3c83b6eb9bb166e2a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 5,
                  "charOffset": 3170,
                  "charLength": 13,
                  "snippet": {
                    "text": "StudySessionQ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 135,
                  "startColumn": 1,
                  "charOffset": 3144,
                  "charLength": 132,
                  "snippet": {
                    "text": "    xpPerMinute = 30\n\n    StudySessionQ = database.StudyVCDB.select().where(\n        database.StudyVCDB.discordID == member.id\n    )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "12797cea9a8f148e199032c81d808a92be8f8a5abbffe3177e2a244e142cbb3f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 9,
                  "charOffset": 3316,
                  "charLength": 13,
                  "snippet": {
                    "text": "StudySessionQ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 139,
                  "startColumn": 1,
                  "charOffset": 3271,
                  "charLength": 217,
                  "snippet": {
                    "text": "    )\n    if StudySessionQ.exists():\n        StudySessionQ = StudySessionQ.get()\n        totalmin, now = showTotalMinutes(StudySessionQ.StartTime)\n        leaderboardQuery = database.StudyVCLeaderboard.select().where("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b723ab13b6bd5f33fb3e389b4ef8b21824592778b531de5cb3e38f103c5f8042"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 9,
                  "charOffset": 3426,
                  "charLength": 16,
                  "snippet": {
                    "text": "leaderboardQuery"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 141,
                  "startColumn": 1,
                  "charOffset": 3308,
                  "charLength": 253,
                  "snippet": {
                    "text": "        StudySessionQ = StudySessionQ.get()\n        totalmin, now = showTotalMinutes(StudySessionQ.StartTime)\n        leaderboardQuery = database.StudyVCLeaderboard.select().where(\n            database.StudyVCLeaderboard.discordID == member.id\n        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "79d774155666a18c94280e28a3ecb50eaad0c142662445896ad4318d0ab72869"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 9,
                  "charOffset": 3571,
                  "charLength": 8,
                  "snippet": {
                    "text": "isNewLvl"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 145,
                  "startColumn": 1,
                  "charOffset": 3552,
                  "charLength": 127,
                  "snippet": {
                    "text": "        )\n\n        isNewLvl = False\n        if leaderboardQuery.exists():\n            leaderboardQuery = leaderboardQuery.get()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9de37936100efa4c05d1fec6c19d0baa0813f464d9a53a7e6179f1020e43dca4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 13,
                  "charOffset": 3638,
                  "charLength": 16,
                  "snippet": {
                    "text": "leaderboardQuery"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 147,
                  "startColumn": 1,
                  "charOffset": 3563,
                  "charLength": 258,
                  "snippet": {
                    "text": "        isNewLvl = False\n        if leaderboardQuery.exists():\n            leaderboardQuery = leaderboardQuery.get()\n            leaderboardQuery.TTS = totalmin + leaderboardQuery.TTS\n            leaderboardQuery.TTSWeek = totalmin + leaderboardQuery.TTSWeek"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "839cdf090f07116a6af0192a3e242b664a4ec20ee97841e3f363a06194fdb961"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 13,
                  "charOffset": 3915,
                  "charLength": 10,
                  "snippet": {
                    "text": "currentLvl"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 152,
                  "startColumn": 1,
                  "charOffset": 3822,
                  "charLength": 226,
                  "snippet": {
                    "text": "            leaderboardQuery.totalSessions = leaderboardQuery.totalSessions + 1\n\n            currentLvl = leaderboardQuery.level\n            currentXP = leaderboardQuery.xp\n            currentTotalXP = leaderboardQuery.totalXP"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6ca1da72931290c028d182673766b1f818302cc85d01ad35f39007bacd1a26c7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 13,
                  "charOffset": 3963,
                  "charLength": 9,
                  "snippet": {
                    "text": "currentXP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 153,
                  "startColumn": 1,
                  "charOffset": 3902,
                  "charLength": 147,
                  "snippet": {
                    "text": "\n            currentLvl = leaderboardQuery.level\n            currentXP = leaderboardQuery.xp\n            currentTotalXP = leaderboardQuery.totalXP\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1401bca1efa0d7f9d75a75a272031b4a22aff1a1826912a79195a099db830e6b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 13,
                  "charOffset": 4007,
                  "charLength": 14,
                  "snippet": {
                    "text": "currentTotalXP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 154,
                  "startColumn": 1,
                  "charOffset": 3903,
                  "charLength": 198,
                  "snippet": {
                    "text": "            currentLvl = leaderboardQuery.level\n            currentXP = leaderboardQuery.xp\n            currentTotalXP = leaderboardQuery.totalXP\n\n            xpNeeded = _getXPForNextLvl(currentLvl)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3d11eead71332067b324e9a03575ea3e0b27aa37fe76e615e494b59af4a6b175"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 13,
                  "charOffset": 4062,
                  "charLength": 8,
                  "snippet": {
                    "text": "xpNeeded"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 156,
                  "startColumn": 1,
                  "charOffset": 3995,
                  "charLength": 153,
                  "snippet": {
                    "text": "            currentTotalXP = leaderboardQuery.totalXP\n\n            xpNeeded = _getXPForNextLvl(currentLvl)\n            xpEarned = totalmin * xpPerMinute\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d6be4c31b3dc7b40dbb4aaff264eba87e584ae86b3e22b6e21a3be4f2c39b181"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 13,
                  "charOffset": 4114,
                  "charLength": 8,
                  "snippet": {
                    "text": "xpEarned"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 157,
                  "startColumn": 1,
                  "charOffset": 4049,
                  "charLength": 140,
                  "snippet": {
                    "text": "\n            xpNeeded = _getXPForNextLvl(currentLvl)\n            xpEarned = totalmin * xpPerMinute\n\n            newXP = currentXP + xpEarned"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fff42f6e198c978372ef96d8c40b9970d33cc4be6e7e13c10737fc2528a152b8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 13,
                  "charOffset": 4161,
                  "charLength": 5,
                  "snippet": {
                    "text": "newXP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 159,
                  "startColumn": 1,
                  "charOffset": 4102,
                  "charLength": 170,
                  "snippet": {
                    "text": "            xpEarned = totalmin * xpPerMinute\n\n            newXP = currentXP + xpEarned\n            newTotalXP = currentTotalXP + xpEarned\n            newLvl = currentLvl"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3d1b673d3f05038aa5b4dc7f5c73e45847471d8c89d567e53794d985661f5ec3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 13,
                  "charOffset": 4202,
                  "charLength": 10,
                  "snippet": {
                    "text": "newTotalXP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 160,
                  "startColumn": 1,
                  "charOffset": 4148,
                  "charLength": 125,
                  "snippet": {
                    "text": "\n            newXP = currentXP + xpEarned\n            newTotalXP = currentTotalXP + xpEarned\n            newLvl = currentLvl\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3f8bf106b2e1a207262c09a607e3eca450ec1043ead84f3f612d3c17e82c3912"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 13,
                  "charOffset": 4253,
                  "charLength": 6,
                  "snippet": {
                    "text": "newLvl"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 161,
                  "startColumn": 1,
                  "charOffset": 4149,
                  "charLength": 158,
                  "snippet": {
                    "text": "            newXP = currentXP + xpEarned\n            newTotalXP = currentTotalXP + xpEarned\n            newLvl = currentLvl\n\n            if newXP >= xpNeeded:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7674a812ef263eb3d2152e4606eba5443506498ee6420d9d7dd919e50beb0a5a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 167,
                  "startColumn": 17,
                  "charOffset": 4325,
                  "charLength": 8,
                  "snippet": {
                    "text": "isNewLvl"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 165,
                  "startColumn": 1,
                  "charOffset": 4274,
                  "charLength": 149,
                  "snippet": {
                    "text": "            if newXP >= xpNeeded:\n\n                isNewLvl = True\n                newXPNeeded = xpNeeded\n                while newXP >= newXPNeeded:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "58a0a694789eb39215778e175daa123fcb0b16fcc8925c6e097691f8fbc4c013"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 17,
                  "charOffset": 4357,
                  "charLength": 11,
                  "snippet": {
                    "text": "newXPNeeded"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 166,
                  "startColumn": 1,
                  "charOffset": 4308,
                  "charLength": 156,
                  "snippet": {
                    "text": "\n                isNewLvl = True\n                newXPNeeded = xpNeeded\n                while newXP >= newXPNeeded:\n                    newXP -= newXPNeeded"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "45a999d852e49175290c1aa4efc5d5beec4376ff6ddc38e052e46c6ee9867621"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 172,
                  "startColumn": 21,
                  "charOffset": 4517,
                  "charLength": 11,
                  "snippet": {
                    "text": "newXPNeeded"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 170,
                  "startColumn": 1,
                  "charOffset": 4424,
                  "charLength": 172,
                  "snippet": {
                    "text": "                    newXP -= newXPNeeded\n                    newLvl += 1\n                    newXPNeeded = _getXPForNextLvl(newLvl)\n\n            leaderboardQuery.xp = newXP"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7db9fdf829fdcac60ee700340e24f65763f746b604a49d7f9aeacd4c7b2ef053"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 181,
                  "startColumn": 13,
                  "charOffset": 4755,
                  "charLength": 10,
                  "snippet": {
                    "text": "currentLvl"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 179,
                  "startColumn": 1,
                  "charOffset": 4728,
                  "charLength": 98,
                  "snippet": {
                    "text": "\n        else:\n            currentLvl = 0\n            currentXP = 0\n            currentTotalXP = 0"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c96d9ec797d8294dc983f0a046f43e6d0e8bd2bb89bb58d9a32a8decc7477a22"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 13,
                  "charOffset": 4782,
                  "charLength": 9,
                  "snippet": {
                    "text": "currentXP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 180,
                  "startColumn": 1,
                  "charOffset": 4729,
                  "charLength": 98,
                  "snippet": {
                    "text": "        else:\n            currentLvl = 0\n            currentXP = 0\n            currentTotalXP = 0\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "83804c2c2513038efd36e3bef428fbff7baabec9bd77d5a8f274ece44b1e023a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 13,
                  "charOffset": 4808,
                  "charLength": 14,
                  "snippet": {
                    "text": "currentTotalXP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 181,
                  "startColumn": 1,
                  "charOffset": 4743,
                  "charLength": 136,
                  "snippet": {
                    "text": "            currentLvl = 0\n            currentXP = 0\n            currentTotalXP = 0\n\n            xpNeeded = _getXPForNextLvl(currentLvl)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "05b05bc04fb78b76bf08969080195410bb9fe47b4161c9d2e20a633b7fecaeb5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 13,
                  "charOffset": 4840,
                  "charLength": 8,
                  "snippet": {
                    "text": "xpNeeded"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 183,
                  "startColumn": 1,
                  "charOffset": 4796,
                  "charLength": 130,
                  "snippet": {
                    "text": "            currentTotalXP = 0\n\n            xpNeeded = _getXPForNextLvl(currentLvl)\n            xpEarned = totalmin * xpPerMinute\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "70629f3062896bf60a1b274ccca9a62b5ef505ff4139796646ea71682b22a14b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 13,
                  "charOffset": 4892,
                  "charLength": 8,
                  "snippet": {
                    "text": "xpEarned"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 184,
                  "startColumn": 1,
                  "charOffset": 4827,
                  "charLength": 140,
                  "snippet": {
                    "text": "\n            xpNeeded = _getXPForNextLvl(currentLvl)\n            xpEarned = totalmin * xpPerMinute\n\n            newXP = currentXP + xpEarned"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "93b69c9d16239b43b0f2a1ebc1acefd7dc71cc28a84ae01fd39cf7a8abbaf46f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 188,
                  "startColumn": 13,
                  "charOffset": 4939,
                  "charLength": 5,
                  "snippet": {
                    "text": "newXP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 186,
                  "startColumn": 1,
                  "charOffset": 4880,
                  "charLength": 170,
                  "snippet": {
                    "text": "            xpEarned = totalmin * xpPerMinute\n\n            newXP = currentXP + xpEarned\n            newTotalXP = currentTotalXP + xpEarned\n            newLvl = currentLvl"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7b736baafe0fa6f160e6afad51a1242c80c45721cf8e0b5fb92af27d8600d19f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 13,
                  "charOffset": 4980,
                  "charLength": 10,
                  "snippet": {
                    "text": "newTotalXP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 187,
                  "startColumn": 1,
                  "charOffset": 4926,
                  "charLength": 125,
                  "snippet": {
                    "text": "\n            newXP = currentXP + xpEarned\n            newTotalXP = currentTotalXP + xpEarned\n            newLvl = currentLvl\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "70bc892302a007e0f9e83b94f754854cfdc2d4ecdeb875286b8d96290242af80"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 190,
                  "startColumn": 13,
                  "charOffset": 5031,
                  "charLength": 6,
                  "snippet": {
                    "text": "newLvl"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 188,
                  "startColumn": 1,
                  "charOffset": 4927,
                  "charLength": 158,
                  "snippet": {
                    "text": "            newXP = currentXP + xpEarned\n            newTotalXP = currentTotalXP + xpEarned\n            newLvl = currentLvl\n\n            if newXP >= xpNeeded:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a3bf86e439b9216d91d728b22e44240f24c12657569b77058729d92dd7a1e130"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 194,
                  "startColumn": 17,
                  "charOffset": 5103,
                  "charLength": 8,
                  "snippet": {
                    "text": "isNewLvl"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 192,
                  "startColumn": 1,
                  "charOffset": 5052,
                  "charLength": 149,
                  "snippet": {
                    "text": "            if newXP >= xpNeeded:\n\n                isNewLvl = True\n                newXPNeeded = xpNeeded\n                while newXP >= newXPNeeded:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "602b6d367b965e8b83558454284e6b0070bd351f44afba4145690c630c306a33"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 195,
                  "startColumn": 17,
                  "charOffset": 5135,
                  "charLength": 11,
                  "snippet": {
                    "text": "newXPNeeded"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 193,
                  "startColumn": 1,
                  "charOffset": 5086,
                  "charLength": 156,
                  "snippet": {
                    "text": "\n                isNewLvl = True\n                newXPNeeded = xpNeeded\n                while newXP >= newXPNeeded:\n                    newXP -= newXPNeeded"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "91925cbe2908c75eba85559468226805c1a8e1646dc39974e08d5f26f4c48680"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 21,
                  "charOffset": 5295,
                  "charLength": 11,
                  "snippet": {
                    "text": "newXPNeeded"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 197,
                  "startColumn": 1,
                  "charOffset": 5202,
                  "charLength": 184,
                  "snippet": {
                    "text": "                    newXP -= newXPNeeded\n                    newLvl += 1\n                    newXPNeeded = _getXPForNextLvl(newLvl)\n\n            q = database.StudyVCLeaderboard.create("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b21ab184ce7f032634dada7d4e797852de61e70df245c0c03a94225f62e22617"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 212,
                  "startColumn": 9,
                  "charOffset": 5657,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 210,
                  "startColumn": 1,
                  "charOffset": 5627,
                  "charLength": 82,
                  "snippet": {
                    "text": "            q.save()\n\n        roleStr = \"\"\n        if newLvl < 5:\n            pass"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9255d66040b32e8c28a6813a6cf27c12337972d0c391fe41baae89965abe1539"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 220,
                  "startColumn": 17,
                  "charOffset": 5849,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 218,
                  "startColumn": 1,
                  "charOffset": 5801,
                  "charLength": 113,
                  "snippet": {
                    "text": "\n            if currentLvl < 5:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1b7d5748436ac41534714bd1a713551e908bf1e364551dfdd7b01ad53c910c9c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 227,
                  "startColumn": 17,
                  "charOffset": 6055,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 225,
                  "startColumn": 1,
                  "charOffset": 6006,
                  "charLength": 114,
                  "snippet": {
                    "text": "\n            if currentLvl < 10:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d69909ac21818b0ff795073c1ab68168cb39f828b92f8e45b9e5ad52fc58b955"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 234,
                  "startColumn": 17,
                  "charOffset": 6261,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 232,
                  "startColumn": 1,
                  "charOffset": 6212,
                  "charLength": 114,
                  "snippet": {
                    "text": "\n            if currentLvl < 20:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a50922f7b1c5fc97136befa6d7b05ba1a63b4baa70ce96d715b6a077018d9876"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 17,
                  "charOffset": 6467,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 239,
                  "startColumn": 1,
                  "charOffset": 6418,
                  "charLength": 114,
                  "snippet": {
                    "text": "\n            if currentLvl < 30:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d74f410085efd9224034814e16c751e7579f162cd4ca7b91b5a84b7ddf1080c4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 248,
                  "startColumn": 17,
                  "charOffset": 6673,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 246,
                  "startColumn": 1,
                  "charOffset": 6624,
                  "charLength": 114,
                  "snippet": {
                    "text": "\n            if currentLvl < 40:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "01675ba91b6a6899dc9d6e69066a8f71b0b7c1663806cf6d84b9bf9985f89ca5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 17,
                  "charOffset": 6879,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 253,
                  "startColumn": 1,
                  "charOffset": 6830,
                  "charLength": 114,
                  "snippet": {
                    "text": "\n            if currentLvl < 50:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ddc95ff205ba4558d7a4f183efc44c1eedddb335df209752c038da0251c0b973"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 262,
                  "startColumn": 17,
                  "charOffset": 7085,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 260,
                  "startColumn": 1,
                  "charOffset": 7036,
                  "charLength": 114,
                  "snippet": {
                    "text": "\n            if currentLvl < 60:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f9e8344a11e219e092e379cdf946fefbd13129d14182d876ff99a02ec105fb79"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 269,
                  "startColumn": 17,
                  "charOffset": 7291,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 267,
                  "startColumn": 1,
                  "charOffset": 7242,
                  "charLength": 114,
                  "snippet": {
                    "text": "\n            if currentLvl < 70:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9a4cc9eba53de4b0e11fe1c0ecf16b4ada5b267b437c1fd11dee41bb55dcb465"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 276,
                  "startColumn": 17,
                  "charOffset": 7497,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 274,
                  "startColumn": 1,
                  "charOffset": 7448,
                  "charLength": 114,
                  "snippet": {
                    "text": "\n            if currentLvl < 80:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a59b740de0203044438e3033cfcf5254c2b9989721f8999789122af7ebef3b21"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 283,
                  "startColumn": 17,
                  "charOffset": 7704,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 281,
                  "startColumn": 1,
                  "charOffset": 7655,
                  "charLength": 114,
                  "snippet": {
                    "text": "\n            if currentLvl < 90:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "93d67208ff17c9fd6897b56c0e9644944f970c081f4284b33b74c3974f948e87"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 290,
                  "startColumn": 17,
                  "charOffset": 7914,
                  "charLength": 7,
                  "snippet": {
                    "text": "roleStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 288,
                  "startColumn": 1,
                  "charOffset": 7864,
                  "charLength": 115,
                  "snippet": {
                    "text": "\n            if currentLvl < 100:\n                roleStr = f\"\\nYou've earned a new role: {role}\"\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5fe020525bffae5b66ea23d0b8e8728efb809b1a3d8d93a93c24d6e992f6e2e3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 295,
                  "startColumn": 13,
                  "charOffset": 8014,
                  "charLength": 5,
                  "snippet": {
                    "text": "dmMSG"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 293,
                  "startColumn": 1,
                  "charOffset": 7980,
                  "charLength": 156,
                  "snippet": {
                    "text": "        if isNewLvl:\n\n            dmMSG = (\n                f\"{member.mention}, you've reached level **{newLvl}** in Study VC!\"\n                f\"{roleStr}\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "83596b1546cdb21a8408be78737aba39c04572344cdd70145412a51cc8775f0c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 307,
                  "startColumn": 5,
                  "charOffset": 8287,
                  "charLength": 13,
                  "snippet": {
                    "text": "StudySessionQ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 305,
                  "startColumn": 1,
                  "charOffset": 8261,
                  "charLength": 141,
                  "snippet": {
                    "text": "        return False\n\n    StudySessionQ = StudySessionQ.get()\n    StudySessionQ.StartTime = datetime.now(EST)\n    StudySessionQ.Paused = True"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b3e5c5f8ebf3b2a63a4280857c9959ce8cbfb77005a32835821ddd8897531f83"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 315,
                  "startColumn": 11,
                  "charOffset": 8457,
                  "charLength": 10,
                  "snippet": {
                    "text": "endSession"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 313,
                  "startColumn": 1,
                  "charOffset": 8445,
                  "charLength": 180,
                  "snippet": {
                    "text": "\n\nasync def endSession(member: discord.Member):\n    \"\"\"\n    Ends the session by kicking the user out of the voice channel and removing the user from the database table `StudyVCDB`."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "784127ee0528b599c28d6948e39f8b4c6b918a5c5a55e4381239706cc19bd512"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 324,
                  "startColumn": 5,
                  "charOffset": 8783,
                  "charLength": 13,
                  "snippet": {
                    "text": "StudySessionQ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 322,
                  "startColumn": 1,
                  "charOffset": 8770,
                  "charLength": 119,
                  "snippet": {
                    "text": "    \"\"\"\n\n    StudySessionQ = database.StudyVCDB.select().where(\n        database.StudyVCDB.discordID == member.id\n    )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d831c6ca8d2ed82100b96f8e68e0aa4e3e6a59a15c82fa999acee8c5425b5917"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 328,
                  "startColumn": 9,
                  "charOffset": 8929,
                  "charLength": 13,
                  "snippet": {
                    "text": "StudySessionQ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 326,
                  "startColumn": 1,
                  "charOffset": 8884,
                  "charLength": 149,
                  "snippet": {
                    "text": "    )\n    if StudySessionQ.exists():\n        StudySessionQ = StudySessionQ.get()\n        StudySessionQ.delete_instance()\n        StudySessionQ.save()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cb10660a2be5d621af42fbf1e43d5536c1f0d6476a3ff7e9f5052e6c12c55b16"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 406,
                  "startColumn": 9,
                  "charOffset": 11660,
                  "charLength": 12,
                  "snippet": {
                    "text": "isInDatabase"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 404,
                  "startColumn": 1,
                  "charOffset": 11569,
                  "charLength": 178,
                  "snippet": {
                    "text": "        Removes an item from the study to-do list of the author/owner.\n        \"\"\"\n        isInDatabase = await addLeaderboardProgress(interaction.user)\n\n        if isInDatabase:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "001b63eb18bb17e0624c23d1b34b623bc8a156b9700f96878a7e027a465d8b96"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 444,
                  "startColumn": 9,
                  "charOffset": 13080,
                  "charLength": 6,
                  "snippet": {
                    "text": "lbList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 442,
                  "startColumn": 1,
                  "charOffset": 13015,
                  "charLength": 158,
                  "snippet": {
                    "text": "        guild = self.bot.get_guild(self.StudyVCGuildID)\n\n        lbList = []\n        i = 1\n        for entry in database.StudyVCLeaderboard.select().order_by("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4539dcce411a8156e10aed4dd5f3bde8207b75e374594fef00115c82456ccf2e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 466,
                  "startColumn": 17,
                  "charOffset": 13669,
                  "charLength": 10,
                  "snippet": {
                    "text": "totalXPStr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 464,
                  "startColumn": 1,
                  "charOffset": 13613,
                  "charLength": 193,
                  "snippet": {
                    "text": "                    place = f\"`{i}th`\"\n\n                totalXPStr = _shortNumber(entry.totalXP)\n                lbList.append(f\"{place} **{member}**: `{totalXPStr} XP`\")\n                i += 1"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4867a9744cefa79dcfaed709295562752012625023fbca7dc05820ddfbc8de39"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 470,
                  "startColumn": 9,
                  "charOffset": 13837,
                  "charLength": 13,
                  "snippet": {
                    "text": "FormattedList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 468,
                  "startColumn": 1,
                  "charOffset": 13784,
                  "charLength": 156,
                  "snippet": {
                    "text": "                i += 1\n        print(lbList)\n        FormattedList = \"\\n\".join(lbList)\n        embed = discord.Embed(\n            title=\"Study Leaderboard\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3619ba74bfb50f00155d43bc8234dbf06adc7cd1a7289a4c849c360afce66d8a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 11,
                  "charOffset": 794,
                  "charLength": 15,
                  "snippet": {
                    "text": "setNewStudyGoal"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 30,
                  "startColumn": 1,
                  "charOffset": 782,
                  "charLength": 109,
                  "snippet": {
                    "text": "\n\nasync def setNewStudyGoal(self, console, member: discord.Member, renew: bool):\n    now = datetime.now(EST)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "87addaf20b59b7ad155d2ba648c59d931d453777b78cabac47935f1414369bc0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 5,
                  "charOffset": 1060,
                  "charLength": 3,
                  "snippet": {
                    "text": "MSV"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 1,
                  "charOffset": 1045,
                  "charLength": 163,
                  "snippet": {
                    "text": "        )\n\n    MSV = discord.ui.View(timeout=60)\n    var = SelectMenuHandler(\n        SSTypes, \"temp_view:studybot_st1\", \"Select a duration for your study session\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cf84f8fcbf6ac8f825a93a10f263b3d3e2c223f2af4dfabd5341e8a2b8c901aa"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 5,
                  "charOffset": 1242,
                  "charLength": 7,
                  "snippet": {
                    "text": "msgView"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 46,
                  "startColumn": 1,
                  "charOffset": 1215,
                  "charLength": 186,
                  "snippet": {
                    "text": "    MSV.add_item(var)\n\n    msgView = await console.send(\n        f\"{member.mention} You have joined a study channel. Please choose the duration of your study session!\",\n        view=MSV,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cb268c9388b4f3151e18f2ae6cb322f6199a9c6778be39a6cabf17c3d2712f9b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 9,
                  "charOffset": 1521,
                  "charLength": 12,
                  "snippet": {
                    "text": "MSV_disabled"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 56,
                  "startColumn": 1,
                  "charOffset": 1502,
                  "charLength": 158,
                  "snippet": {
                    "text": "\n    else:\n        MSV_disabled = discord.ui.View()\n        var = SelectMenuHandler(\n            SSTypes, \"temp_view:studybot_st1\", \"Timed out\", disabled=True"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "70f25e9704c4613a6335dbc49a73ed9a7952647cd61eaff35bba484919d92567"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 5,
                  "charOffset": 3124,
                  "charLength": 12,
                  "snippet": {
                    "text": "getConsoleCH"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 111,
                  "startColumn": 1,
                  "charOffset": 3118,
                  "charLength": 148,
                  "snippet": {
                    "text": "\n\ndef getConsoleCH(column_id):\n    q: database.SandboxConfig = (\n        database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "167643351bad8eee8eeaa20bf6019ce94c03e9e132a7a676af90bf04547191e7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 5,
                  "charOffset": 3277,
                  "charLength": 10,
                  "snippet": {
                    "text": "ColumnDict"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 115,
                  "startColumn": 1,
                  "charOffset": 3183,
                  "charLength": 164,
                  "snippet": {
                    "text": "        database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()\n    )\n    ColumnDict = {\n        0: q.ch_tv_console,\n        1: q.ch_tv_startvc,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6f9fa391f8f9c8c4353e97f61a5e3950e827ade78469cd83e709aa3f0fe046e5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 15,
                  "charOffset": 3886,
                  "charLength": 13,
                  "snippet": {
                    "text": "StudyVCModule"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 137,
                  "startColumn": 1,
                  "charOffset": 3819,
                  "charLength": 127,
                  "snippet": {
                    "text": "\n    @commands.Cog.listener(\"on_voice_state_update\")\n    async def StudyVCModule(\n        self,\n        member: discord.Member,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3c74d7a386d20a7acb20749aa22086ff98ece04ad218091042e8380862f6a8ad"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 13,
                  "charOffset": 4483,
                  "charLength": 13,
                  "snippet": {
                    "text": "StudySessionQ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 155,
                  "startColumn": 1,
                  "charOffset": 4429,
                  "charLength": 176,
                  "snippet": {
                    "text": "            and not member.bot\n        ):\n            StudySessionQ = database.StudyVCDB.select().where(\n                database.StudyVCDB.discordID == member.id\n            )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0172b85dd3919d27bad7d1b9feb44b18688bbca8201ddef4c509951cff380c11"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 17,
                  "charOffset": 5431,
                  "charLength": 7,
                  "snippet": {
                    "text": "dateObj"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 180,
                  "startColumn": 1,
                  "charOffset": 5385,
                  "charLength": 191,
                  "snippet": {
                    "text": "                query.save()\n\n                dateObj = pytz.timezone(\"America/New_York\").localize(query.RenewalTime)\n                val = int((dateObj - datetime.now(EST)).total_seconds())\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "61223c0fe700ce822e6a8a052f6cfa12a57baf69818c51f1368ba6c71ae8cbd4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 206,
                  "startColumn": 15,
                  "charOffset": 6850,
                  "charLength": 14,
                  "snippet": {
                    "text": "StudyVCChecker"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 204,
                  "startColumn": 1,
                  "charOffset": 6765,
                  "charLength": 199,
                  "snippet": {
                    "text": "\n    @tasks.loop(seconds=60)  # TODO: change to 60s due of rate limits\n    async def StudyVCChecker(self):\n        \"\"\"Loop through each session and check if a user's study session is about to end\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "923728ecd78f2f37e359944bf19f7bbf59bbe394bc125d7d08efcadacd72cc83"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 9,
                  "charOffset": 6973,
                  "charLength": 15,
                  "snippet": {
                    "text": "StudyVCGuildObj"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 207,
                  "startColumn": 1,
                  "charOffset": 6872,
                  "charLength": 234,
                  "snippet": {
                    "text": "        \"\"\"Loop through each session and check if a user's study session is about to end\"\"\"\n\n        StudyVCGuildObj = self.bot.get_guild(self.StudyVCGuild)\n        StudyVCConsoleObj = StudyVCGuildObj.get_channel(self.StudyVCConsole)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e8a91449b641c97b37b71267182362b2073cf3e2a48f0c2f3872474cfb68abb1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 210,
                  "startColumn": 9,
                  "charOffset": 7037,
                  "charLength": 17,
                  "snippet": {
                    "text": "StudyVCConsoleObj"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 208,
                  "startColumn": 1,
                  "charOffset": 6964,
                  "charLength": 179,
                  "snippet": {
                    "text": "\n        StudyVCGuildObj = self.bot.get_guild(self.StudyVCGuild)\n        StudyVCConsoleObj = StudyVCGuildObj.get_channel(self.StudyVCConsole)\n\n        for q in database.StudyVCDB:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bbcd619ac025dd63fc5fb9a3bcc41fdafcf6b7fec193462b72474ea67ab255e7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 13,
                  "charOffset": 7156,
                  "charLength": 7,
                  "snippet": {
                    "text": "dateObj"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 211,
                  "startColumn": 1,
                  "charOffset": 7106,
                  "charLength": 179,
                  "snippet": {
                    "text": "\n        for q in database.StudyVCDB:\n            dateObj = pytz.timezone(\"America/New_York\").localize(q.RenewalTime)\n\n            member = StudyVCGuildObj.get_member(q.discordID)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "45cfe10f2cd3c4ecd56d5d349870cff32e6123e532388124bd5d381bb30d6300"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/Tutor.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 9,
                  "charOffset": 390,
                  "charLength": 2,
                  "snippet": {
                    "text": "ID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 1,
                  "charOffset": 304,
                  "charLength": 255,
                  "snippet": {
                    "text": "async def id_generator(size=3, chars=string.ascii_uppercase):\n    while True:\n        ID = \"\".join(random.choice(chars) for _ in range(size))\n        query = database.TutorBot_Sessions.select().where(\n            database.TutorBot_Sessions.SessionID == ID"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ef9d27641e412fac726e66ed7832bc39f0901b75ee5067f8bdf8aab8573e5c92"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/Tutor.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 565,
                  "startColumn": 9,
                  "charOffset": 20703,
                  "charLength": 13,
                  "snippet": {
                    "text": "DropdownClass"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 563,
                  "startColumn": 1,
                  "charOffset": 20644,
                  "charLength": 123,
                  "snippet": {
                    "text": "    def __init__(self):\n        super().__init__()\n        DropdownClass = Dropdown()\n\n        self.add_item(DropdownClass)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "301272231716b6f0e6900ebbd5ad60475ab48e26bffb3b4b7cde5e13599b427f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/TutorLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 13,
                  "charOffset": 625,
                  "charLength": 12,
                  "snippet": {
                    "text": "TutorSession"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 23,
                  "startColumn": 1,
                  "charOffset": 527,
                  "charLength": 228,
                  "snippet": {
                    "text": "        now = datetime.now(self.est)\n        for entry in database.TutorBot_Sessions:\n            TutorSession = pytz.timezone(\"America/New_York\").localize(entry.Date)\n            val = int((TutorSession - now).total_seconds())\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c4ecc66a856f2978685dd2766933c6ef76c00341f618d5f4987d5d55def94a8e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/TutorLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 17,
                  "charOffset": 3248,
                  "charLength": 7,
                  "snippet": {
                    "text": "GP_DATE"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 89,
                  "startColumn": 1,
                  "charOffset": 3202,
                  "charLength": 127,
                  "snippet": {
                    "text": "                geten.save()\n\n                GP_DATE = old + new\n\n                gp_en: database.TutorSession_GracePeriod = ("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2af57c604678e6612f92b0915f4e7b6fb0e90cec405a0c2961e50e2239093684"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/TutorLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 13,
                  "charOffset": 4416,
                  "charLength": 12,
                  "snippet": {
                    "text": "TutorSession"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 122,
                  "startColumn": 1,
                  "charOffset": 4311,
                  "charLength": 238,
                  "snippet": {
                    "text": "        now = datetime.now(self.est)\n        for entry in database.TutorSession_GracePeriod:\n            TutorSession = pytz.timezone(\"America/New_York\").localize(entry.GP_DATE)\n            val = int((TutorSession - now).total_seconds())\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "57e2826e65471dc8d133902467049d2118d30a1c57fef1b913ee26c22b785e83"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/EvaluationCenter/cogs/SimCreator.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 15,
                  "charOffset": 187,
                  "charLength": 16,
                  "snippet": {
                    "text": "create_TicketSys"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 8,
                  "startColumn": 1,
                  "charOffset": 131,
                  "charLength": 222,
                  "snippet": {
                    "text": "class SimulatorProfile:\n    @staticmethod\n    async def create_TicketSys(ctx: commands.Context):\n        # category = discord.utils.get(ctx.guild.categories, id=TechID.cat_sandbox)\n        query: database.SandboxConfig = ("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8e63ced240b35f1419da9d470abaf9fce54eac9e0a23bc66d084070ca993cefa"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/EvaluationCenter/cogs/SimCreator.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 9,
                  "charOffset": 554,
                  "charLength": 9,
                  "snippet": {
                    "text": "ListofCat"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 16,
                  "startColumn": 1,
                  "charOffset": 485,
                  "charLength": 192,
                  "snippet": {
                    "text": "\n        await ctx.guild.create_text_channel(\"🧧┃chat-help\")\n        ListofCat = [\n            [\"Math Tickets\", query.cat_mathticket],\n            [\"Science Tickets\", query.cat_scienceticket],"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e4e800a31a8bb82383f57fd99ef9bc719920a467aae6173a8235c01eef1db6d5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/EvaluationCenter/cogs/SimCreator.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 9,
                  "charOffset": 1508,
                  "charLength": 9,
                  "snippet": {
                    "text": "ListofCat"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 39,
                  "startColumn": 1,
                  "charOffset": 1402,
                  "charLength": 229,
                  "snippet": {
                    "text": "            database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()\n        )\n        ListofCat = [\n            [\"Math Tickets\", query.cat_mathticket],\n            [\"Science Tickets\", query.cat_scienceticket],"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "37a563ccdf8f84bde8f498cb545d63ccbd4c96b9f07a06745a55d29b2f63daf7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/EvaluationCenter/cogs/SimCreator.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 15,
                  "charOffset": 2271,
                  "charLength": 16,
                  "snippet": {
                    "text": "create_PrivVCSys"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 58,
                  "startColumn": 1,
                  "charOffset": 2238,
                  "charLength": 200,
                  "snippet": {
                    "text": "\n    @staticmethod\n    async def create_PrivVCSys(ctx: commands.Context):\n        category = discord.utils.get(ctx.guild.categories, id=SandboxConfig.cat_sandbox)\n        q: database.SandboxConfig = ("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "531a631a06c9e694a144332fc68f22d87014ef87195fe8545b7b44ee85f4c016"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/EvaluationCenter/cogs/SimCreator.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 15,
                  "charOffset": 2877,
                  "charLength": 17,
                  "snippet": {
                    "text": "cleanup_PrivVCSys"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 74,
                  "startColumn": 1,
                  "charOffset": 2844,
                  "charLength": 200,
                  "snippet": {
                    "text": "\n    @staticmethod\n    async def cleanup_PrivVCSys(ctx: commands.Context):\n        q: database.SandboxConfig = (\n            database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "234d2dcd2f28d6295fa795b6f53f636f377705e3c8e0f180aa7a7ffac1658ec9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/EvaluationCenter/cogs/SimCreator.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 9,
                  "charOffset": 3759,
                  "charLength": 2,
                  "snippet": {
                    "text": "SP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 105,
                  "startColumn": 1,
                  "charOffset": 3672,
                  "charLength": 236,
                  "snippet": {
                    "text": "    @sim.command()\n    async def create(self, ctx: commands.Context, profile):\n        SP = SimulatorProfile()\n        q: database.SandboxConfig = (\n            database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c673663aa24565c3d72d07f1f4556b5d867f3db105f92f435f78d1c16fae26a6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/EvaluationCenter/cogs/SimCreator.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 9,
                  "charOffset": 4800,
                  "charLength": 2,
                  "snippet": {
                    "text": "SP"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 132,
                  "startColumn": 1,
                  "charOffset": 4723,
                  "charLength": 226,
                  "snippet": {
                    "text": "    @sim.command()\n    async def clear(self, ctx: commands.Context):\n        SP = SimulatorProfile()\n        q: database.SandboxConfig = (\n            database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3a558d88e60f9117f118ab6b3636a91cf87eff42359ddd63c09517569680454c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudentEngadgement/cogs/guess_submit.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 15,
                  "charOffset": 3133,
                  "charLength": 12,
                  "snippet": {
                    "text": "mayEventPost"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 70,
                  "startColumn": 1,
                  "charOffset": 3088,
                  "charLength": 172,
                  "snippet": {
                    "text": "\n    @tasks.loop(minutes=60.0)\n    async def mayEventPost(self):\n        now = datetime.now(self.est)\n        TutorSession = pytz.timezone(\"America/New_York\").localize(now)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9d6d5cb1e751398447e5b2af0b15c1b8be45c6da6a1bcb36a5cea33e624a4dd6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudentEngadgement/cogs/guess_submit.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 9,
                  "charOffset": 3198,
                  "charLength": 12,
                  "snippet": {
                    "text": "TutorSession"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 72,
                  "startColumn": 1,
                  "charOffset": 3119,
                  "charLength": 296,
                  "snippet": {
                    "text": "    async def mayEventPost(self):\n        now = datetime.now(self.est)\n        TutorSession = pytz.timezone(\"America/New_York\").localize(now)\n        channel = self.bot.get_channel(MainID.ch_event_announcements)\n        q = database.BaseQueue.select().where(database.BaseQueue.queueID == 2).get()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "86ad3bc67bacb1bb87a391956e173685278aaee978dd0dc5c2c04af4ef724b8c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 5,
                  "charOffset": 234,
                  "charLength": 12,
                  "snippet": {
                    "text": "getEqualRank"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 17,
                  "startColumn": 1,
                  "charOffset": 228,
                  "charLength": 74,
                  "snippet": {
                    "text": "\n\ndef getEqualRank(query):\n    if query not in config:\n        return None"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "938f4b9f57d0744ad079fd24625f65d9cfd1c664759aaee32e0c89b98e99dde3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 11,
                  "charOffset": 360,
                  "charLength": 13,
                  "snippet": {
                    "text": "roleNameCheck"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 24,
                  "startColumn": 1,
                  "charOffset": 348,
                  "charLength": 119,
                  "snippet": {
                    "text": "\n\nasync def roleNameCheck(self, name: str, guild: discord.Guild, user: discord.Member):\n    check = getEqualRank(name)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "25f3d95081b2cc0d5c910f5c639dc5570595552e628cf1bb74d520334b68a161"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 15,
                  "charOffset": 1191,
                  "charLength": 17,
                  "snippet": {
                    "text": "StaffVerification"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 48,
                  "startColumn": 1,
                  "charOffset": 1131,
                  "charLength": 166,
                  "snippet": {
                    "text": "\n    @commands.Cog.listener(\"on_interaction\")\n    async def StaffVerification(self, interaction: discord.Interaction):\n        InteractionResponse = interaction.data\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0ddd8ce545f78cbd6f8bc8a044df169d50e85fa0b1663ab18fcd1a8253f985af"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 9,
                  "charOffset": 1258,
                  "charLength": 19,
                  "snippet": {
                    "text": "InteractionResponse"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 49,
                  "startColumn": 1,
                  "charOffset": 1132,
                  "charLength": 205,
                  "snippet": {
                    "text": "    @commands.Cog.listener(\"on_interaction\")\n    async def StaffVerification(self, interaction: discord.Interaction):\n        InteractionResponse = interaction.data\n\n        if interaction.message is None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "da0c9337b0a310f855cbb6e9dd58915315893684bfebd56bfab45736c2dba38e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 13,
                  "charOffset": 1553,
                  "charLength": 11,
                  "snippet": {
                    "text": "staffServer"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 60,
                  "startColumn": 1,
                  "charOffset": 1501,
                  "charLength": 224,
                  "snippet": {
                    "text": "            print(interaction.user.id)\n\n            staffServer: discord.Guild = self.bot.get_guild(interaction.guild_id)\n            print(staffServer)\n            StaffServerMember: discord.Member = staffServer.get_member("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3be5a6dd3ab4fa66e7d759fcda9eb570bd7eaed17e03593c6de28ee14e57ff35"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 13,
                  "charOffset": 1666,
                  "charLength": 17,
                  "snippet": {
                    "text": "StaffServerMember"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 62,
                  "startColumn": 1,
                  "charOffset": 1541,
                  "charLength": 234,
                  "snippet": {
                    "text": "            staffServer: discord.Guild = self.bot.get_guild(interaction.guild_id)\n            print(staffServer)\n            StaffServerMember: discord.Member = staffServer.get_member(\n                interaction.user.id\n            )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2e8d9e9f890f02d9faf3c0644f1c7a4119af6a3c61d630833018e2a5d0ea7c08"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 17,
                  "charOffset": 1899,
                  "charLength": 17,
                  "snippet": {
                    "text": "StaffServerMember"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 69,
                  "startColumn": 1,
                  "charOffset": 1814,
                  "charLength": 202,
                  "snippet": {
                    "text": "            if StaffServerMember is None:\n                print(\"h\")\n                StaffServerMember: discord.Member = staffServer.get_member(\n                    interaction.user.id\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4515959d7bc4bce082639fd31761f0d8d56b823059be7abe4d2799466081e850"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 13,
                  "charOffset": 3232,
                  "charLength": 19,
                  "snippet": {
                    "text": "VerificationChannel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 97,
                  "startColumn": 1,
                  "charOffset": 3192,
                  "charLength": 168,
                  "snippet": {
                    "text": "                    return\n\n            VerificationChannel = interaction.channel\n            logchannel = self.bot.get_channel(self.staffServer[interaction.guild_id])\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4a2592b48f6e87b91fb3b0c9f4d296dfa1bbfec44a5cea2ed81bd082af17d7a3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 13,
                  "charOffset": 3373,
                  "charLength": 13,
                  "snippet": {
                    "text": "VerifiedRoles"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 100,
                  "startColumn": 1,
                  "charOffset": 3274,
                  "charLength": 150,
                  "snippet": {
                    "text": "            logchannel = self.bot.get_channel(self.staffServer[interaction.guild_id])\n\n            VerifiedRoles = []\n            VerifiedGuilds = []\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "335ceddca0c1fd9d6ad99da5fd1fe6a7faa4aaf485049183702b46cccece28f1"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 13,
                  "charOffset": 3404,
                  "charLength": 14,
                  "snippet": {
                    "text": "VerifiedGuilds"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 101,
                  "startColumn": 1,
                  "charOffset": 3360,
                  "charLength": 102,
                  "snippet": {
                    "text": "\n            VerifiedRoles = []\n            VerifiedGuilds = []\n\n            for ID in self.ServerIDs:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "18cd07d360c4d348db9a48429768b70e5906ccb8ab79f3a0681ab3057df56893"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 21,
                  "charOffset": 3567,
                  "charLength": 12,
                  "snippet": {
                    "text": "ServerMember"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 106,
                  "startColumn": 1,
                  "charOffset": 3463,
                  "charLength": 219,
                  "snippet": {
                    "text": "                server: discord.Guild = self.bot.get_guild(ID)\n                try:\n                    ServerMember: discord.Member = server.get_member(\n                        interaction.user.id\n                    )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6afe7cae669ab4488dff1310a79b6f282a67e2a47f1225bf01961c8c24a52efc"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 21,
                  "charOffset": 3841,
                  "charLength": 9,
                  "snippet": {
                    "text": "roleNames"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 115,
                  "startColumn": 1,
                  "charOffset": 3798,
                  "charLength": 136,
                  "snippet": {
                    "text": "\n                else:\n                    roleNames = [role for role in ServerMember.roles]\n\n                    for role in roleNames:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b83c2b95e4200f9adb9f15f556196ae7c1ca7f7ba86e756f6c7ff6d60f6c2563"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 29,
                  "charOffset": 4115,
                  "charLength": 8,
                  "snippet": {
                    "text": "checkSTR"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 122,
                  "startColumn": 1,
                  "charOffset": 4040,
                  "charLength": 243,
                  "snippet": {
                    "text": "\n                        if check is not None:\n                            checkSTR = \", \".join(check)\n                            markdownRole = f\"`{checkSTR}` -> *{server.name}*\"\n                            markdownGuild = f\"`{server.name}`\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cbdfaec1aa1e431fbc04f2fb744747696afede444ce3c92a4c3c56f3b93745d6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 29,
                  "charOffset": 4171,
                  "charLength": 12,
                  "snippet": {
                    "text": "markdownRole"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 123,
                  "startColumn": 1,
                  "charOffset": 4041,
                  "charLength": 243,
                  "snippet": {
                    "text": "                        if check is not None:\n                            checkSTR = \", \".join(check)\n                            markdownRole = f\"`{checkSTR}` -> *{server.name}*\"\n                            markdownGuild = f\"`{server.name}`\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3273435596f87afd270013a59fe29ce14c438dccf40aa41fba91c35871ed0d6f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 29,
                  "charOffset": 4249,
                  "charLength": 13,
                  "snippet": {
                    "text": "markdownGuild"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 124,
                  "startColumn": 1,
                  "charOffset": 4087,
                  "charLength": 263,
                  "snippet": {
                    "text": "                            checkSTR = \", \".join(check)\n                            markdownRole = f\"`{checkSTR}` -> *{server.name}*\"\n                            markdownGuild = f\"`{server.name}`\"\n\n                            if markdownRole not in VerifiedRoles:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fb5b68499180c06bf5516a6b1d1fe7629764e80bf146e6d0ce977db629cc7e2b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 37,
                  "charOffset": 4752,
                  "charLength": 8,
                  "snippet": {
                    "text": "jsonROLE"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 133,
                  "startColumn": 1,
                  "charOffset": 4583,
                  "charLength": 305,
                  "snippet": {
                    "text": "                            for elem in check:\n                                if elem in [role.name for role in staffServer.roles]:\n                                    jsonROLE = discord.utils.get(\n                                        staffServer.roles, name=elem\n                                    )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "13a5b33cbe5c6b3c4d654631a2d80689ce99509ea76bb11595917915bd3f8600"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 164,
                  "startColumn": 17,
                  "charOffset": 6201,
                  "charLength": 12,
                  "snippet": {
                    "text": "VerifiedRole"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 162,
                  "startColumn": 1,
                  "charOffset": 6133,
                  "charLength": 186,
                  "snippet": {
                    "text": "                await logchannel.send(embed=embed)\n\n                VerifiedRole: discord.Role = discord.utils.get(\n                    staffServer.roles, name=\"Member\"\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "50ad0f85ee35094875cb5435d3bf0ed1ec7c22c5331deaf8cf3deb072ff416a7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 227,
                  "startColumn": 15,
                  "charOffset": 9028,
                  "charLength": 23,
                  "snippet": {
                    "text": "pasteVerificationButton"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 225,
                  "startColumn": 1,
                  "charOffset": 8989,
                  "charLength": 166,
                  "snippet": {
                    "text": "\n    @commands.command()\n    async def pasteVerificationButton(self, ctx):\n        button = VerifyButton()\n        await ctx.send(\"Click here to verify\", view=button)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ddf02649551f063badca1be61255ff1348a83dd4454677e594cd7086bcb8bc00"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 15,
                  "charOffset": 9195,
                  "charLength": 22,
                  "snippet": {
                    "text": "pasteVerificationEmbed"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 230,
                  "startColumn": 1,
                  "charOffset": 9156,
                  "charLength": 156,
                  "snippet": {
                    "text": "\n    @commands.command()\n    async def pasteVerificationEmbed(self, ctx: commands.Context):\n        embed = discord.Embed(\n            title=\"Verification\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "006dd06de9f4d5910bab119287aa363a67a88b732c8595d15ac68b77f769c869"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 11,
                  "charOffset": 2394,
                  "charLength": 12,
                  "snippet": {
                    "text": "TicketExport"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 91,
                  "startColumn": 1,
                  "charOffset": 2382,
                  "charLength": 69,
                  "snippet": {
                    "text": "\n\nasync def TicketExport(\n    self,\n    channel: discord.TextChannel,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "275bcdd6a8671beea9190984042e77b0f74bd474cb952e438b8a5bf79374bc9b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 5,
                  "charOffset": 2584,
                  "charLength": 30,
                  "snippet": {
                    "text": "directTranscript: bool = False"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 97,
                  "startColumn": 1,
                  "charOffset": 2494,
                  "charLength": 183,
                  "snippet": {
                    "text": "    user: discord.User = None,\n    responsesauthor: typing.List[discord.User] = None,\n    directTranscript: bool = False,\n):\n    transcript = await chat_exporter.export(channel, None)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a357edd50a0902f3a36853b1a9ff405c53ec0823be27ed557ccd89dfddd329a6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 5,
                  "charOffset": 2814,
                  "charLength": 11,
                  "snippet": {
                    "text": "TicketOwner"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 105,
                  "startColumn": 1,
                  "charOffset": 2789,
                  "charLength": 164,
                  "snippet": {
                    "text": "        .get()\n    )\n    TicketOwner = self.bot.get_user(query.authorID)\n    if TicketOwner is None:\n        TicketOwner = await self.bot.fetch_user(query.authorID)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1a401e97fa2698e35c2feb0431fbf577583f2990a9dded072a1de13a745b71a9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 9,
                  "charOffset": 2898,
                  "charLength": 11,
                  "snippet": {
                    "text": "TicketOwner"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 107,
                  "startColumn": 1,
                  "charOffset": 2810,
                  "charLength": 171,
                  "snippet": {
                    "text": "    TicketOwner = self.bot.get_user(query.authorID)\n    if TicketOwner is None:\n        TicketOwner = await self.bot.fetch_user(query.authorID)\n\n    if transcript is None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "46bc7cf23801e3d04e835f8dd26964fb51c668f130f8f307d3ff49c9d12af663"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 5,
                  "charOffset": 3652,
                  "charLength": 4,
                  "snippet": {
                    "text": "myIO"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 128,
                  "startColumn": 1,
                  "charOffset": 3641,
                  "charLength": 108,
                  "snippet": {
                    "text": "    )\n\n    myIO = BytesIO()\n    myIO.write(var)\n    with open(f\"transcript-{channel.name}.html\", \"wb\") as f:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "38f01bd355696d5c6c1d363b06ceb1a0f5d44982bdb994353ae133ecc5ba0cae"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 5,
                  "charOffset": 3864,
                  "charLength": 6,
                  "snippet": {
                    "text": "S3_URL"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 134,
                  "startColumn": 1,
                  "charOffset": 3784,
                  "charLength": 253,
                  "snippet": {
                    "text": "\n    S3_upload_file(f\"transcript-{channel.name}.html\", \"ch-transcriptlogs\")\n    S3_URL = f\"[Direct Transcript Link](https://acad-transcripts.schoolsimplified.org/transcript-{channel.name}.html)\"\n    embed.add_field(name=\"Transcript Link\", value=S3_URL)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "31153f35ee3848a191c80ded1ffa7568b8909935350913fcea0762ded7def3d4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 5,
                  "charOffset": 4635,
                  "charLength": 10,
                  "snippet": {
                    "text": "decodeDict"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 160,
                  "startColumn": 1,
                  "charOffset": 4629,
                  "charLength": 148,
                  "snippet": {
                    "text": "\n\ndef decodeDict(self, value: str, sandbox: bool = False) -> typing.Union[str, int]:\n    \"\"\"Returns the true value of a dict output and pair value.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7a6aa12070a50103de3e7a661882f02e7d71d64e1afab8a3854523ab6d4d7876"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 172,
                  "startColumn": 5,
                  "charOffset": 4919,
                  "charLength": 12,
                  "snippet": {
                    "text": "EssayOptions"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 170,
                  "startColumn": 1,
                  "charOffset": 4906,
                  "charLength": 127,
                  "snippet": {
                    "text": "    \"\"\"\n\n    EssayOptions = [\n        discord.SelectOption(label=\"Essay Reviser\"),\n        discord.SelectOption(label=\"Other\"),"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6afcc114459ff252db90d985a8e1db7888f1de7cedf922b9dc7c99ab36dec8f9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 5,
                  "charOffset": 5045,
                  "charLength": 14,
                  "snippet": {
                    "text": "EnglishOptions"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 175,
                  "startColumn": 1,
                  "charOffset": 5034,
                  "charLength": 143,
                  "snippet": {
                    "text": "    ]\n\n    EnglishOptions = [\n        discord.SelectOption(label=\"English Language\"),\n        discord.SelectOption(label=\"English Literature\"),"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e4491b3518f9c357bae773806dc1e9ca7277204256fc9f3791d2427bc6fd2b3e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 5,
                  "charOffset": 5234,
                  "charLength": 11,
                  "snippet": {
                    "text": "MathOptions"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 181,
                  "startColumn": 1,
                  "charOffset": 5223,
                  "charLength": 121,
                  "snippet": {
                    "text": "    ]\n\n    MathOptions = [\n        discord.SelectOption(label=\"Algebra\"),\n        discord.SelectOption(label=\"Geometry\"),"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e7185041a99a2921b7d377e9f4c2f196f2d14972cac72b2a514294aedee6d637"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 192,
                  "startColumn": 5,
                  "charOffset": 5562,
                  "charLength": 14,
                  "snippet": {
                    "text": "ScienceOptions"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 190,
                  "startColumn": 1,
                  "charOffset": 5551,
                  "charLength": 125,
                  "snippet": {
                    "text": "    ]\n\n    ScienceOptions = [\n        discord.SelectOption(label=\"Biology\"),\n        discord.SelectOption(label=\"Chemistry\"),"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "beb03afb0a48069af34794da9ef1b094801a107b71ff479b8fe62d7ae7c0745d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 5,
                  "charOffset": 5825,
                  "charLength": 20,
                  "snippet": {
                    "text": "SocialStudiesOptions"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 198,
                  "startColumn": 1,
                  "charOffset": 5814,
                  "charLength": 138,
                  "snippet": {
                    "text": "    ]\n\n    SocialStudiesOptions = [\n        discord.SelectOption(label=\"World History\"),\n        discord.SelectOption(label=\"US History\"),"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "727e356231ec43262d90a798b903c8433fba7913a4de3c90ee7e0b9be91f2cd4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 210,
                  "startColumn": 5,
                  "charOffset": 6195,
                  "charLength": 15,
                  "snippet": {
                    "text": "LanguageOptions"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 208,
                  "startColumn": 1,
                  "charOffset": 6184,
                  "charLength": 123,
                  "snippet": {
                    "text": "    ]\n\n    LanguageOptions = [\n        discord.SelectOption(label=\"French\"),\n        discord.SelectOption(label=\"Chinese\"),"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "89c20f405c94366041787ecfe99fd9ed530a46dfb45523f206ff883488a67b42"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 218,
                  "startColumn": 5,
                  "charOffset": 6457,
                  "charLength": 12,
                  "snippet": {
                    "text": "OtherOptions"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 216,
                  "startColumn": 1,
                  "charOffset": 6446,
                  "charLength": 132,
                  "snippet": {
                    "text": "    ]\n\n    OtherOptions = [\n        discord.SelectOption(label=\"Computer Science\"),\n        discord.SelectOption(label=\"Fine Arts\"),"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "96e4b6f38800dd57761d28d37e340fe92d28b0aae132a1afc278aa85e1d5b94b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 225,
                  "startColumn": 5,
                  "charOffset": 6685,
                  "charLength": 10,
                  "snippet": {
                    "text": "decodeName"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 223,
                  "startColumn": 1,
                  "charOffset": 6674,
                  "charLength": 119,
                  "snippet": {
                    "text": "    ]\n\n    decodeName = {\n        \"['Math Helpers']\": \"Math Helpers\",\n        \"['Science Helpers']\": \"Science Helpers\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4cda534c086418040c69ca3b06ac1a5bfb0e0900de9b90ee5cb5938c6f59d75d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 5,
                  "charOffset": 7063,
                  "charLength": 13,
                  "snippet": {
                    "text": "decodeOptList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 233,
                  "startColumn": 1,
                  "charOffset": 7052,
                  "charLength": 116,
                  "snippet": {
                    "text": "    }\n\n    decodeOptList = {\n        \"['Math Helpers']\": MathOptions,\n        \"['Science Helpers']\": ScienceOptions,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b0444567b012a956f57258208f5cf23109289c53dcf122760ac728751553d081"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 249,
                  "startColumn": 9,
                  "charOffset": 7578,
                  "charLength": 8,
                  "snippet": {
                    "text": "decodeID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 247,
                  "startColumn": 1,
                  "charOffset": 7472,
                  "charLength": 224,
                  "snippet": {
                    "text": "            database.SandboxConfig.select().where(database.SandboxConfig.id == 1).get()\n        )\n        decodeID = {\n            \"['Math Helpers']\": q.cat_mathticket,\n            \"['Science Helpers']\": q.cat_scienceticket,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "912cbfc42bd0d2fbffa2281dd05b2e2d52d7db0bffe70828cabc95e5d2a3bb61"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 259,
                  "startColumn": 9,
                  "charOffset": 8009,
                  "charLength": 8,
                  "snippet": {
                    "text": "decodeID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 257,
                  "startColumn": 1,
                  "charOffset": 7981,
                  "charLength": 158,
                  "snippet": {
                    "text": "        }\n    else:\n        decodeID = {\n            \"['Math Helpers']\": MainID.cat_math_ticket,\n            \"['Science Helpers']\": MainID.cat_science_ticket,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cbc0048bb6e09970fa277373ed8d06967ae89497ca5728937179e15de13e252d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 270,
                  "startColumn": 5,
                  "charOffset": 8499,
                  "charLength": 10,
                  "snippet": {
                    "text": "CategoryID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 268,
                  "startColumn": 1,
                  "charOffset": 8465,
                  "charLength": 127,
                  "snippet": {
                    "text": "\n    name = decodeName[value]\n    CategoryID = decodeID[value]\n    if type(decodeOptList[value]) == int:\n        OptList = name"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d8980bf0852bac82eb02d696657d2b972052beb9498a3af835f26c922a786790"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 272,
                  "startColumn": 9,
                  "charOffset": 8578,
                  "charLength": 7,
                  "snippet": {
                    "text": "OptList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 270,
                  "startColumn": 1,
                  "charOffset": 8495,
                  "charLength": 146,
                  "snippet": {
                    "text": "    CategoryID = decodeID[value]\n    if type(decodeOptList[value]) == int:\n        OptList = name\n    else:\n        OptList = decodeOptList[value]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e607c8b1c1920b4a4221f8e2167e5c9d925ab2aacdb76f63b9c5fcb9752b4edc"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 9,
                  "charOffset": 8611,
                  "charLength": 7,
                  "snippet": {
                    "text": "OptList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 272,
                  "startColumn": 1,
                  "charOffset": 8570,
                  "charLength": 109,
                  "snippet": {
                    "text": "        OptList = name\n    else:\n        OptList = decodeOptList[value]\n\n    return name, CategoryID, OptList"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "71ae1eb5b50b0b524ecdfe26e6b923a2709f6bf17ef4af54c76d0b9282318c7d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 279,
                  "startColumn": 5,
                  "charOffset": 8686,
                  "charLength": 7,
                  "snippet": {
                    "text": "getRole"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 277,
                  "startColumn": 1,
                  "charOffset": 8680,
                  "charLength": 113,
                  "snippet": {
                    "text": "\n\ndef getRole(\n    guild: discord.Guild, mainSubject: str, subject: str, sandbox: bool = False\n) -> discord.Role:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "dcb0447f79afef270e70d7ad4d4710d1d5af81793fd58775f49a63b4094e5e75"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Argument name should be lowercase",
            "markdown": "Argument name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 27,
                  "charOffset": 8721,
                  "charLength": 16,
                  "snippet": {
                    "text": "mainSubject: str"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 278,
                  "startColumn": 1,
                  "charOffset": 8681,
                  "charLength": 152,
                  "snippet": {
                    "text": "\ndef getRole(\n    guild: discord.Guild, mainSubject: str, subject: str, sandbox: bool = False\n) -> discord.Role:\n    \"\"\"Returns the role of the subject."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "64f70ec154ea38259c274e012d869ed6c699466211c9bd88be507c6fce7e1a8c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 293,
                  "startColumn": 5,
                  "charOffset": 9057,
                  "charLength": 11,
                  "snippet": {
                    "text": "mainSubject"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 291,
                  "startColumn": 1,
                  "charOffset": 9044,
                  "charLength": 77,
                  "snippet": {
                    "text": "    \"\"\"\n\n    mainSubject = mainSubject.title()\n    subject = subject.title()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "27aa4bbc6491e6ce778aae116cdd52beef22188242981eaff748b4732570401f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 331,
                  "startColumn": 9,
                  "charOffset": 10199,
                  "charLength": 7,
                  "snippet": {
                    "text": "Sandbox"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 329,
                  "startColumn": 1,
                  "charOffset": 10126,
                  "charLength": 173,
                  "snippet": {
                    "text": "\n    async def callback(self, interaction: discord.Interaction):\n        Sandbox = False\n        if interaction.message.guild.id == TechID.g_tech:\n            Sandbox = True"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "16c68913c09db5fd8da105087fd84e6c11533a361b543c62bc729919202a3499"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 333,
                  "startColumn": 13,
                  "charOffset": 10285,
                  "charLength": 7,
                  "snippet": {
                    "text": "Sandbox"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 331,
                  "startColumn": 1,
                  "charOffset": 10191,
                  "charLength": 179,
                  "snippet": {
                    "text": "        Sandbox = False\n        if interaction.message.guild.id == TechID.g_tech:\n            Sandbox = True\n\n        bucket = self.view.cd_mapping.get_bucket(interaction.message)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6ea0e7c3b2925233c554f86284b4af5e36747eb57b4be39438716c827790b20c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 346,
                  "startColumn": 13,
                  "charOffset": 10791,
                  "charLength": 9,
                  "snippet": {
                    "text": "DMChannel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 344,
                  "startColumn": 1,
                  "charOffset": 10695,
                  "charLength": 206,
                  "snippet": {
                    "text": "            guild = interaction.message.guild\n            author = interaction.user\n            DMChannel = await author.create_dm()\n            try:\n                await interaction.response.send_message("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bb848bb2e4756b4f1304ca1e64c620b6359dc7f5fea15ec6ba51d48498ad4f4b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 361,
                  "startColumn": 13,
                  "charOffset": 11310,
                  "charLength": 3,
                  "snippet": {
                    "text": "MSV"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 359,
                  "startColumn": 1,
                  "charOffset": 11279,
                  "charLength": 178,
                  "snippet": {
                    "text": "                )\n\n            MSV = discord.ui.View()\n            var = SelectMenuHandler(\n                MasterSubjectOptions, \"persistent_view:ticketdrop\", \"Click a subject!\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0277de4823174916446a6d7cdfbf56a0c66311f358e4c6674e3342e8453ea7fa"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 378,
                  "startColumn": 17,
                  "charOffset": 12063,
                  "charLength": 17,
                  "snippet": {
                    "text": "MasterSubjectView"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 376,
                  "startColumn": 1,
                  "charOffset": 11980,
                  "charLength": 213,
                  "snippet": {
                    "text": "            timeout = await MSV.wait()\n            if not timeout:\n                MasterSubjectView = var.view_response\n            else:\n                return await DMChannel.send(\"Timed out, try again later.\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ea192f71e08088e817fc547334eb9a0a83376af29539c6b8fbfc4b8dd409f6de"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 382,
                  "startColumn": 13,
                  "charOffset": 12207,
                  "charLength": 12,
                  "snippet": {
                    "text": "ViewResponse"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 380,
                  "startColumn": 1,
                  "charOffset": 12119,
                  "charLength": 237,
                  "snippet": {
                    "text": "                return await DMChannel.send(\"Timed out, try again later.\")\n\n            ViewResponse = str(MasterSubjectView)\n            TypeSubject, CategoryID, OptList = decodeDict(\n                self, f\"['{ViewResponse}']\", Sandbox"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8098f0ae54156498d340d8d6c916b1683c8aebd13a79ca9e39f5ae36f8420c31"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 383,
                  "startColumn": 13,
                  "charOffset": 12257,
                  "charLength": 11,
                  "snippet": {
                    "text": "TypeSubject"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 381,
                  "startColumn": 1,
                  "charOffset": 12194,
                  "charLength": 176,
                  "snippet": {
                    "text": "\n            ViewResponse = str(MasterSubjectView)\n            TypeSubject, CategoryID, OptList = decodeDict(\n                self, f\"['{ViewResponse}']\", Sandbox\n            )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6024daac39d7ecadcd011cf33ca82b7c004a1d25106def2965ff733c39c84b81"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 383,
                  "startColumn": 26,
                  "charOffset": 12270,
                  "charLength": 10,
                  "snippet": {
                    "text": "CategoryID"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 381,
                  "startColumn": 1,
                  "charOffset": 12194,
                  "charLength": 176,
                  "snippet": {
                    "text": "\n            ViewResponse = str(MasterSubjectView)\n            TypeSubject, CategoryID, OptList = decodeDict(\n                self, f\"['{ViewResponse}']\", Sandbox\n            )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "eadcda2a2e1157617b698d92d91e59282ed5dae2264cebac0a4d9a445977a4c3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 383,
                  "startColumn": 38,
                  "charOffset": 12282,
                  "charLength": 7,
                  "snippet": {
                    "text": "OptList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 381,
                  "startColumn": 1,
                  "charOffset": 12194,
                  "charLength": 176,
                  "snippet": {
                    "text": "\n            ViewResponse = str(MasterSubjectView)\n            TypeSubject, CategoryID, OptList = decodeDict(\n                self, f\"['{ViewResponse}']\", Sandbox\n            )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "061e25b41e5ecbfcc4780a387e25e41752417996a3ed7513c7a6bfa195e0e671"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 389,
                  "startColumn": 17,
                  "charOffset": 12503,
                  "charLength": 11,
                  "snippet": {
                    "text": "MiscOptList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 387,
                  "startColumn": 1,
                  "charOffset": 12443,
                  "charLength": 168,
                  "snippet": {
                    "text": "\n            if not TypeSubject == OptList:\n                MiscOptList = discord.ui.View()\n                MiscOptList.add_item(\n                    SelectMenuHandler("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b3ff1ce738b126940ab195147ab4991e57531e30a896cb1b1985980c35cee20c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 513,
                  "startColumn": 13,
                  "charOffset": 17917,
                  "charLength": 10,
                  "snippet": {
                    "text": "CounterNum"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 511,
                  "startColumn": 1,
                  "charOffset": 17827,
                  "charLength": 221,
                  "snippet": {
                    "text": "                        return await DMChannel.send(\"No attachments found.\")\n\n            CounterNum = (\n                database.BaseTickerInfo.select()\n                .where(database.BaseTickerInfo.guildID == guild.id)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7f899d461b3b5b0675dd755c31adbd01ca08bc57d2ae8479c91a3f9d62c80789"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 518,
                  "startColumn": 13,
                  "charOffset": 18098,
                  "charLength": 4,
                  "snippet": {
                    "text": "TNUM"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 516,
                  "startColumn": 1,
                  "charOffset": 18049,
                  "charLength": 160,
                  "snippet": {
                    "text": "                .get()\n            )\n            TNUM = CounterNum.counter\n            CounterNum.counter = CounterNum.counter + 1\n            CounterNum.save()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0aac498dbb62867125c10148b863822dffd330416f1953bf88f5afe8c5d5dff4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 522,
                  "startColumn": 13,
                  "charOffset": 18223,
                  "charLength": 3,
                  "snippet": {
                    "text": "LDC"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 520,
                  "startColumn": 1,
                  "charOffset": 18180,
                  "charLength": 156,
                  "snippet": {
                    "text": "            CounterNum.save()\n\n            LDC = await DMChannel.send(\n                f\"Please wait, creating your ticket {Emoji.loadingGIF}\"\n            )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "aebc9b063f0aafe4c8f47d6e605f5d5e7b3841dae3a72571d90d5a6ef562326c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 527,
                  "startColumn": 17,
                  "charOffset": 18404,
                  "charLength": 11,
                  "snippet": {
                    "text": "mainSubject"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 525,
                  "startColumn": 1,
                  "charOffset": 18337,
                  "charLength": 142,
                  "snippet": {
                    "text": "\n            if TypeSubject == \"Language Helpers\":\n                mainSubject = \"languages\"\n            else:\n                mainSubject = ("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b0e18de4b36ad4374a47f243b66492d4bbac49dbcdb85667a14ed0cf2877dfe4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 529,
                  "startColumn": 17,
                  "charOffset": 18464,
                  "charLength": 11,
                  "snippet": {
                    "text": "mainSubject"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 527,
                  "startColumn": 1,
                  "charOffset": 18388,
                  "charLength": 173,
                  "snippet": {
                    "text": "                mainSubject = \"languages\"\n            else:\n                mainSubject = (\n                    c.name.replace(\"═\", \"\")\n                    .replace(\"⁃\", \"\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "475c0de7f28bdd5d7592e4669d1e2a9351bb745d55c50f60bf9592d2f2e79a7e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 568,
                  "startColumn": 21,
                  "charOffset": 19868,
                  "charLength": 7,
                  "snippet": {
                    "text": "RoleOBJ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 566,
                  "startColumn": 1,
                  "charOffset": 19795,
                  "charLength": 190,
                  "snippet": {
                    "text": "                ]\n                for role in roles:\n                    RoleOBJ = discord.utils.get(\n                        interaction.message.guild.roles, name=role\n                    )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5fc3b098cfb5064fde7976807ce2f42c1c4258db9859933888ef8b41060b75a7"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 579,
                  "startColumn": 25,
                  "charOffset": 20369,
                  "charLength": 7,
                  "snippet": {
                    "text": "RoleOBJ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 577,
                  "startColumn": 1,
                  "charOffset": 20268,
                  "charLength": 215,
                  "snippet": {
                    "text": "                            reason=\"Ticket Perms\",\n                        )\n                        RoleOBJ = discord.utils.get(guild.roles, name=role)\n                        if (\n                            not ("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "555592e5dcc1c2aa786e20daf17e3a28029a206009f8c67c5b9a47e2630d2d85"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 611,
                  "startColumn": 25,
                  "charOffset": 21984,
                  "charLength": 7,
                  "snippet": {
                    "text": "RoleOBJ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 609,
                  "startColumn": 1,
                  "charOffset": 21875,
                  "charLength": 234,
                  "snippet": {
                    "text": "                    roles = [\"Essay Reviser\"]\n                    for role in roles:\n                        RoleOBJ = discord.utils.get(\n                            interaction.message.guild.roles, name=role\n                        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1b4e5935974115560b1c796806486e9b9b18893860de3e1fb953aa1fc89864af"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 623,
                  "startColumn": 25,
                  "charOffset": 22519,
                  "charLength": 7,
                  "snippet": {
                    "text": "RoleOBJ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 621,
                  "startColumn": 1,
                  "charOffset": 22397,
                  "charLength": 247,
                  "snippet": {
                    "text": "                    roles = [\"Chat Helper\", \"Lead Helper\"]\n                    for role in roles:\n                        RoleOBJ = discord.utils.get(\n                            interaction.message.guild.roles, name=role\n                        )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f87bb54e425a79d4a5cc8e812453bdd6c0991d1452db7dbf94ca8f6df0950eae"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 645,
                  "startColumn": 13,
                  "charOffset": 23357,
                  "charLength": 13,
                  "snippet": {
                    "text": "controlTicket"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 643,
                  "startColumn": 1,
                  "charOffset": 23330,
                  "charLength": 170,
                  "snippet": {
                    "text": "            )\n\n            controlTicket = discord.Embed(\n                title=\"Control Panel\",\n                description=\"To end this ticket, click the lock button!\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e086f02d6bba3e3145699d26d260ef0969acd1d36aaef93a91e37e8d75746981"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 650,
                  "startColumn": 13,
                  "charOffset": 23572,
                  "charLength": 17,
                  "snippet": {
                    "text": "LockControlButton"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 648,
                  "startColumn": 1,
                  "charOffset": 23501,
                  "charLength": 179,
                  "snippet": {
                    "text": "                color=discord.Colour.gold(),\n            )\n            LockControlButton = discord.ui.View()\n            LockControlButton.add_item(\n                ButtonHandler("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d79e6181c64947f8fc7a38994e98dfa046ab6bfdd43e99bfc51202590cdf5fa2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 662,
                  "startColumn": 13,
                  "charOffset": 23952,
                  "charLength": 3,
                  "snippet": {
                    "text": "LCM"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 660,
                  "startColumn": 1,
                  "charOffset": 23925,
                  "charLength": 152,
                  "snippet": {
                    "text": "            )\n\n            LCM = await channel.send(\n                interaction.user.mention, embed=controlTicket, view=LockControlButton\n            )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2ad210120d7f9f9225cb5c2f20787d48e430cf02c6c011df6427121053a2bc17"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 703,
                  "startColumn": 17,
                  "charOffset": 25757,
                  "charLength": 11,
                  "snippet": {
                    "text": "mentionRole"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 701,
                  "startColumn": 1,
                  "charOffset": 25718,
                  "charLength": 177,
                  "snippet": {
                    "text": "                    )\n\n                mentionRole = getRole(interaction.guild, mainSubject, selection_str)\n\n                await channel.send(mentionRole.mention, embed=embed)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5cd680168f07a2c8a8ae8f95b38a8504e43183432fcdda7e7ab1bb2fc99bfbf6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 763,
                  "startColumn": 15,
                  "charOffset": 27946,
                  "charLength": 14,
                  "snippet": {
                    "text": "TicketDropdown"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 761,
                  "startColumn": 1,
                  "charOffset": 27886,
                  "charLength": 163,
                  "snippet": {
                    "text": "\n    @commands.Cog.listener(\"on_interaction\")\n    async def TicketDropdown(self, interaction: discord.Interaction):\n        InteractionResponse = interaction.data\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7dd4692485684bf6d3597b2d7db208ca2d07c8babce2b2771478b10add522ba6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 764,
                  "startColumn": 9,
                  "charOffset": 28010,
                  "charLength": 19,
                  "snippet": {
                    "text": "InteractionResponse"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 762,
                  "startColumn": 1,
                  "charOffset": 27887,
                  "charLength": 202,
                  "snippet": {
                    "text": "    @commands.Cog.listener(\"on_interaction\")\n    async def TicketDropdown(self, interaction: discord.Interaction):\n        InteractionResponse = interaction.data\n\n        if interaction.message is None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e0ef9742804df6b27f59dfe90d2d21f9ba0364b50e177f22f26f80076a5a9562"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 795,
                  "startColumn": 13,
                  "charOffset": 29009,
                  "charLength": 11,
                  "snippet": {
                    "text": "ButtonViews"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 793,
                  "startColumn": 1,
                  "charOffset": 28939,
                  "charLength": 166,
                  "snippet": {
                    "text": "                color=discord.Colour.red(),\n            )\n            ButtonViews = discord.ui.View()\n            ButtonViews.add_item(\n                ButtonHandler("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bedf5e35ccaff70a3e7147e8ede18a041f37e66df8e194fb280a643f1577856a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 833,
                  "startColumn": 17,
                  "charOffset": 30370,
                  "charLength": 11,
                  "snippet": {
                    "text": "TicketOwner"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 831,
                  "startColumn": 1,
                  "charOffset": 30336,
                  "charLength": 146,
                  "snippet": {
                    "text": "\n            try:\n                TicketOwner = await guild.fetch_member(query.authorID)\n            except discord.NotFound:\n                try:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0d8d9aadd5a7c970bf5c52efd96b4e5a7098e6af386220cbe148ab607bc6e4cf"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 852,
                  "startColumn": 13,
                  "charOffset": 31290,
                  "charLength": 12,
                  "snippet": {
                    "text": "ButtonViews2"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 850,
                  "startColumn": 1,
                  "charOffset": 31198,
                  "charLength": 160,
                  "snippet": {
                    "text": "            )\n            embed.set_footer(text=\"This ticket has been closed!\")\n            ButtonViews2 = discord.ui.View()\n\n            ButtonViews2.add_item("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "59fabaf3fbe31e6193fa04efb5815991ecd53ab31a2a7a1c9a7100d41028c1eb"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 931,
                  "startColumn": 17,
                  "charOffset": 34280,
                  "charLength": 11,
                  "snippet": {
                    "text": "TicketOwner"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 929,
                  "startColumn": 1,
                  "charOffset": 34233,
                  "charLength": 159,
                  "snippet": {
                    "text": "            )\n            try:\n                TicketOwner = await guild.fetch_member(query.authorID)\n            except discord.NotFound:\n                try:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bc2ee8174e31647e0532dd4a8c4def59792d8e2d0c7ff022f422696be3a686b2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 962,
                  "startColumn": 17,
                  "charOffset": 35676,
                  "charLength": 18,
                  "snippet": {
                    "text": "ResponseLogChannel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 960,
                  "startColumn": 1,
                  "charOffset": 35543,
                  "charLength": 260,
                  "snippet": {
                    "text": "            channel: discord.TextChannel = interaction.channel\n            if interaction.guild.id == MainID.g_main:\n                ResponseLogChannel: discord.TextChannel = self.bot.get_channel(\n                    MainID.ch_transcript_logs\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "610ebc9f7532d3b401ae139621280125956d41c71886c0e8ce7f7bf58477499a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 966,
                  "startColumn": 17,
                  "charOffset": 35838,
                  "charLength": 18,
                  "snippet": {
                    "text": "ResponseLogChannel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 964,
                  "startColumn": 1,
                  "charOffset": 35786,
                  "charLength": 174,
                  "snippet": {
                    "text": "                )\n            else:\n                ResponseLogChannel: discord.TextChannel = self.bot.get_channel(\n                    TechID.ch_ticket_log\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "739550c32999e17526173c30497748f070e8b24d54692d4482c6455e35891b03"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 974,
                  "startColumn": 28,
                  "charOffset": 36237,
                  "charLength": 6,
                  "snippet": {
                    "text": "S3_URL"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 972,
                  "startColumn": 1,
                  "charOffset": 36155,
                  "charLength": 202,
                  "snippet": {
                    "text": "            )\n            async with channel.typing():\n                msg, file, S3_URL = await TicketExport(\n                    self, channel, ResponseLogChannel, author, None, True\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "78c6d8e87290004bb0a2c062270faf0cf2154a2878a566e8d9e8830fda476848"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1030,
                  "startColumn": 17,
                  "charOffset": 38702,
                  "charLength": 18,
                  "snippet": {
                    "text": "ResponseLogChannel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1028,
                  "startColumn": 1,
                  "charOffset": 38594,
                  "charLength": 235,
                  "snippet": {
                    "text": "            author = interaction.user\n            if interaction.guild.id == MainID.g_main:\n                ResponseLogChannel: discord.TextChannel = self.bot.get_channel(\n                    MainID.ch_transcript_logs\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3b16cfff484575f1df7c8cfb7c389b9925bb3994b710c9251a616af34674642c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1034,
                  "startColumn": 17,
                  "charOffset": 38864,
                  "charLength": 18,
                  "snippet": {
                    "text": "ResponseLogChannel"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1032,
                  "startColumn": 1,
                  "charOffset": 38812,
                  "charLength": 174,
                  "snippet": {
                    "text": "                )\n            else:\n                ResponseLogChannel: discord.TextChannel = self.bot.get_channel(\n                    TechID.ch_ticket_log\n                )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "755cc40d08cfd3e9e153c05c5030c6810581ce2926f57a8850ab2659020fdaf5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1042,
                  "startColumn": 13,
                  "charOffset": 39183,
                  "charLength": 4,
                  "snippet": {
                    "text": "msgO"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1040,
                  "startColumn": 1,
                  "charOffset": 39134,
                  "charLength": 224,
                  "snippet": {
                    "text": "                .get()\n            )\n            msgO = await interaction.channel.send(\n                f\"{author.mention}\\nPlease wait, generating a transcript {Emoji.loadingGIF2}\\n**THIS MAY TAKE SOME TIME**\"\n            )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5a9c5fe949e515f237e1ca25182759ec903a775890aefed7e7d06799011b9c2b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1046,
                  "startColumn": 17,
                  "charOffset": 39416,
                  "charLength": 11,
                  "snippet": {
                    "text": "TicketOwner"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1044,
                  "startColumn": 1,
                  "charOffset": 39345,
                  "charLength": 234,
                  "snippet": {
                    "text": "            )\n            async with channel.typing():\n                TicketOwner = self.bot.get_user(query.authorID)\n                if TicketOwner is None:\n                    TicketOwner = await self.bot.fetch_user(query.authorID)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "30f22787fd775e6b43933f63990d15a526ef392f429d788d158ecd84ef13a75d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1048,
                  "startColumn": 21,
                  "charOffset": 39524,
                  "charLength": 11,
                  "snippet": {
                    "text": "TicketOwner"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1046,
                  "startColumn": 1,
                  "charOffset": 39400,
                  "charLength": 266,
                  "snippet": {
                    "text": "                TicketOwner = self.bot.get_user(query.authorID)\n                if TicketOwner is None:\n                    TicketOwner = await self.bot.fetch_user(query.authorID)\n\n                messages = [message async for message in channel.history(limit=None)]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e73ba6b9213af1e43046896ca7c77266cc6b4e8dcedd406494e237d7e9489f09"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1051,
                  "startColumn": 17,
                  "charOffset": 39683,
                  "charLength": 10,
                  "snippet": {
                    "text": "authorList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1049,
                  "startColumn": 1,
                  "charOffset": 39580,
                  "charLength": 156,
                  "snippet": {
                    "text": "\n                messages = [message async for message in channel.history(limit=None)]\n                authorList = []\n\n                for msg in messages:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6c575ce7093bbe5d59057e4df12d9fb7faa1c6490645c3214edfefeeaee25bb5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1127,
                  "startColumn": 13,
                  "charOffset": 42994,
                  "charLength": 11,
                  "snippet": {
                    "text": "ButtonViews"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1125,
                  "startColumn": 1,
                  "charOffset": 42924,
                  "charLength": 166,
                  "snippet": {
                    "text": "                color=discord.Colour.red(),\n            )\n            ButtonViews = discord.ui.View()\n            ButtonViews.add_item(\n                ButtonHandler("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "09b376c4f7ab7118eabb20dfc9945df2ef6196814e131939cd40a22421504a7c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1151,
                  "startColumn": 15,
                  "charOffset": 43831,
                  "charLength": 14,
                  "snippet": {
                    "text": "TicketInactive"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1149,
                  "startColumn": 1,
                  "charOffset": 43787,
                  "charLength": 158,
                  "snippet": {
                    "text": "\n    @tasks.loop(minutes=1.0)\n    async def TicketInactive(self):\n        TicketInfoTB = database.TicketInfo\n        guild = self.bot.get_guild(MainID.g_main)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1d07023b108a8f0a0f9b240af7c77cf1ffba6c5ef9ae11dd6abbf55e6d0b598f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1152,
                  "startColumn": 9,
                  "charOffset": 43861,
                  "charLength": 12,
                  "snippet": {
                    "text": "TicketInfoTB"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1150,
                  "startColumn": 1,
                  "charOffset": 43788,
                  "charLength": 192,
                  "snippet": {
                    "text": "    @tasks.loop(minutes=1.0)\n    async def TicketInactive(self):\n        TicketInfoTB = database.TicketInfo\n        guild = self.bot.get_guild(MainID.g_main)\n        for entry in TicketInfoTB:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "66f76dc1eb2baa4cb6a9c4fdbc376c3ab9964b7008a332fbe52d466398efc6f3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1159,
                  "startColumn": 13,
                  "charOffset": 44132,
                  "charLength": 12,
                  "snippet": {
                    "text": "fetchMessage"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1157,
                  "startColumn": 1,
                  "charOffset": 44094,
                  "charLength": 249,
                  "snippet": {
                    "text": "                continue\n\n            fetchMessage = [message async for message in channel.history(limit=1)]\n            TicketOwner = guild.get_member(entry.authorID)\n            messages = [message async for message in channel.history(limit=None)]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "af6ec65309e0244d3b7fb17e1d75136812346a8c0f69d010c20640d65522073a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1160,
                  "startColumn": 13,
                  "charOffset": 44215,
                  "charLength": 11,
                  "snippet": {
                    "text": "TicketOwner"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1158,
                  "startColumn": 1,
                  "charOffset": 44119,
                  "charLength": 292,
                  "snippet": {
                    "text": "\n            fetchMessage = [message async for message in channel.history(limit=1)]\n            TicketOwner = guild.get_member(entry.authorID)\n            messages = [message async for message in channel.history(limit=None)]\n            LogCH = self.bot.get_channel(MainID.ch_transcript_logs)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2a26a55df9720a6db4e91acf0af201b1afc0fd4fa49132751df3955d1ad68f7a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1162,
                  "startColumn": 13,
                  "charOffset": 44356,
                  "charLength": 5,
                  "snippet": {
                    "text": "LogCH"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1160,
                  "startColumn": 1,
                  "charOffset": 44203,
                  "charLength": 271,
                  "snippet": {
                    "text": "            TicketOwner = guild.get_member(entry.authorID)\n            messages = [message async for message in channel.history(limit=None)]\n            LogCH = self.bot.get_channel(MainID.ch_transcript_logs)\n            authorList = []\n            if len(messages) == 0:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "97c147a88e2e92cc23911636b2529a50f444ef3fba5a170b9fb6a7e8c5b94df5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1163,
                  "startColumn": 13,
                  "charOffset": 44424,
                  "charLength": 10,
                  "snippet": {
                    "text": "authorList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1161,
                  "startColumn": 1,
                  "charOffset": 44262,
                  "charLength": 237,
                  "snippet": {
                    "text": "            messages = [message async for message in channel.history(limit=None)]\n            LogCH = self.bot.get_channel(MainID.ch_transcript_logs)\n            authorList = []\n            if len(messages) == 0:\n                continue"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "774cae9be055d1d24621c3f8dad87b06c13c99402de4e9cea9280feee0c5a023"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1171,
                  "startColumn": 17,
                  "charOffset": 44699,
                  "charLength": 12,
                  "snippet": {
                    "text": "ButtonViews2"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1169,
                  "startColumn": 1,
                  "charOffset": 44605,
                  "charLength": 166,
                  "snippet": {
                    "text": "                - timedelta(minutes=self.TICKET_INACTIVE_TIME)\n            ):\n                ButtonViews2 = discord.ui.View()\n\n                ButtonViews2.add_item("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "03f281bd32017f3806b7463cb06c3e1eed48355f09283f023a3bcae6b94c1ba6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1250,
                  "startColumn": 15,
                  "charOffset": 47963,
                  "charLength": 13,
                  "snippet": {
                    "text": "sendCHTKTView"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1248,
                  "startColumn": 1,
                  "charOffset": 47908,
                  "charLength": 162,
                  "snippet": {
                    "text": "    @commands.command()\n    @is_botAdmin\n    async def sendCHTKTView(self, ctx):\n        MasterSubjectView = discord.ui.View()\n        MasterSubjectView.add_item("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e142a3312b9edfaf23413cdd7537055feff78e00036e9a06fe41f21397ea0bf9"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1251,
                  "startColumn": 9,
                  "charOffset": 47997,
                  "charLength": 17,
                  "snippet": {
                    "text": "MasterSubjectView"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1249,
                  "startColumn": 1,
                  "charOffset": 47932,
                  "charLength": 169,
                  "snippet": {
                    "text": "    @is_botAdmin\n    async def sendCHTKTView(self, ctx):\n        MasterSubjectView = discord.ui.View()\n        MasterSubjectView.add_item(\n            SelectMenuHandler("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e9327f7c88803320e062e648fab9f257a1fcdbe43b4687beb8b95f35cea25db5"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/verifystaffGsuite.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 15,
                  "charOffset": 1300,
                  "charLength": 12,
                  "snippet": {
                    "text": "GSuiteVerify"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 37,
                  "startColumn": 1,
                  "charOffset": 1240,
                  "charLength": 200,
                  "snippet": {
                    "text": "\n    @commands.Cog.listener(\"on_interaction\")\n    async def GSuiteVerify(self, interaction: discord.Interaction):\n        InteractionResponse = interaction.data\n        if interaction.message is None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5c693aa7feeadb3a4c0e2792866e64365ca6afa5a7351f622bad9df3f49030d8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/verifystaffGsuite.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 9,
                  "charOffset": 1362,
                  "charLength": 19,
                  "snippet": {
                    "text": "InteractionResponse"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 38,
                  "startColumn": 1,
                  "charOffset": 1241,
                  "charLength": 218,
                  "snippet": {
                    "text": "    @commands.Cog.listener(\"on_interaction\")\n    async def GSuiteVerify(self, interaction: discord.Interaction):\n        InteractionResponse = interaction.data\n        if interaction.message is None:\n            return"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9d09fdcec1e5b16532c2972df645df1e9eba0db7c3b401a7297242e3518bd846"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/verifystaffGsuite.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 15,
                  "charOffset": 8090,
                  "charLength": 17,
                  "snippet": {
                    "text": "pasteGSuiteButton"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 184,
                  "startColumn": 1,
                  "charOffset": 8035,
                  "charLength": 166,
                  "snippet": {
                    "text": "    @commands.command()\n    @is_botAdmin\n    async def pasteGSuiteButton(self, ctx):\n        embed = discord.Embed(\n            title=\"Alternate Verification Method\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ce17f4e6de9dd6ee8baa1ec4d8970407b724bd14fb6cd126cdff605a6686194c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/verifystaffGsuite.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 9,
                  "charOffset": 8403,
                  "charLength": 12,
                  "snippet": {
                    "text": "GSuiteButton"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 191,
                  "startColumn": 1,
                  "charOffset": 8344,
                  "charLength": 144,
                  "snippet": {
                    "text": "            color=discord.Color.green(),\n        )\n        GSuiteButton = GSuiteVerify()\n        await ctx.send(embed=embed, view=GSuiteButton)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "85c2cba53ba4d3adceca733ac505f43e48d00897dc5a064b75d33ae29320d3b2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyAttributeOutsideInitInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Instance attribute index defined outside __init__",
            "markdown": "Instance attribute index defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 512,
                  "startColumn": 9,
                  "charOffset": 17780,
                  "charLength": 10,
                  "snippet": {
                    "text": "self.index"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 510,
                  "startColumn": 1,
                  "charOffset": 17681,
                  "charLength": 144,
                  "snippet": {
                    "text": "    async def get_page(self, page_number: int) -> Any:\n        # The front page is a dummy\n        self.index = page_number\n        return self\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "67459e9c7779da68cd92ef9e6bf32f503e5dd4c57b7336b32fcea9f56e7e8529"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyAttributeOutsideInitInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Instance attribute style defined outside __init__",
            "markdown": "Instance attribute style defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 13,
                  "charOffset": 1543,
                  "charLength": 10,
                  "snippet": {
                    "text": "self.style"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 51,
                  "startColumn": 1,
                  "charOffset": 1445,
                  "charLength": 200,
                  "snippet": {
                    "text": "\n        elif view.current_player == view.O and self.yUser.id == interaction.user.id:\n            self.style = discord.ButtonStyle.success\n            self.label = \"O\"\n            self.disabled = True"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8bd2a3000b03a0c3418ab974a932074b9fff40f91cb4ec6d7e6df35b1fc5d39b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyAttributeOutsideInitInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Instance attribute label defined outside __init__",
            "markdown": "Instance attribute label defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 13,
                  "charOffset": 1596,
                  "charLength": 10,
                  "snippet": {
                    "text": "self.label"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 52,
                  "startColumn": 1,
                  "charOffset": 1446,
                  "charLength": 247,
                  "snippet": {
                    "text": "        elif view.current_player == view.O and self.yUser.id == interaction.user.id:\n            self.style = discord.ButtonStyle.success\n            self.label = \"O\"\n            self.disabled = True\n            view.board[self.y][self.x] = view.O"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "22e8e0534a6c27e64107f24381288f33fda1574b7e2bdda40f05bb95c9023c1c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyAttributeOutsideInitInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Instance attribute disabled defined outside __init__",
            "markdown": "Instance attribute disabled defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 13,
                  "charOffset": 1625,
                  "charLength": 13,
                  "snippet": {
                    "text": "self.disabled"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 53,
                  "startColumn": 1,
                  "charOffset": 1531,
                  "charLength": 203,
                  "snippet": {
                    "text": "            self.style = discord.ButtonStyle.success\n            self.label = \"O\"\n            self.disabled = True\n            view.board[self.y][self.x] = view.O\n            view.current_player = view.X"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8203fe927cae45a2bb71ac3a7f7b6dbef8d4b0a3f55739b36fa369f0e00b9bff"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyAttributeOutsideInitInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Instance attribute disabled defined outside __init__",
            "markdown": "Instance attribute disabled defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/github_commands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 9,
                  "charOffset": 2292,
                  "charLength": 13,
                  "snippet": {
                    "text": "self.disabled"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 83,
                  "startColumn": 1,
                  "charOffset": 2167,
                  "charLength": 147,
                  "snippet": {
                    "text": "            f\"Added labels {' '.join(f'[`{val}`]' for val in self.values)} to Issue #{self._issue.number}\"\n        )\n        self.disabled = True\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d3cbe6789148a2356e9679bbfc118fac29890777cda9aeba3c96388e166e0426"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/common.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 319,
                  "startColumn": 9,
                  "charOffset": 10626,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 317,
                  "startColumn": 1,
                  "charOffset": 10565,
                  "charLength": 86,
                  "snippet": {
                    "text": "        try:\n            os.remove(\"cred_file.json\")\n        except:\n            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f24686ff733cfa5cf9a664233e3e1b17306bce7ff5e696032c7dbd7430ce58db"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 245,
                  "startColumn": 17,
                  "charOffset": 9017,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 243,
                  "startColumn": 1,
                  "charOffset": 8936,
                  "charLength": 114,
                  "snippet": {
                    "text": "                try:\n                    await msgError.delete()\n                except:\n                    pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9a77ac281db0c42e88ce05fc2814857b868a31b5e0ef7850b4d170d00cdc7b8d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 267,
                  "startColumn": 21,
                  "charOffset": 9805,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 265,
                  "startColumn": 1,
                  "charOffset": 9712,
                  "charLength": 130,
                  "snippet": {
                    "text": "                    try:\n                        await msgError.delete()\n                    except:\n                        pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "11088e6aa94cc8d8e4c29e3bcc22662be0dab1d5323b874a67b741059d5f1929"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 275,
                  "startColumn": 21,
                  "charOffset": 9994,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 273,
                  "startColumn": 1,
                  "charOffset": 9901,
                  "charLength": 130,
                  "snippet": {
                    "text": "                    try:\n                        await msgError.delete()\n                    except:\n                        pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0706584d61f8a685f85c6ca9dea2021bb92efa06c923d3a80a4658d2dd45b106"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 320,
                  "startColumn": 29,
                  "charOffset": 12111,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 318,
                  "startColumn": 1,
                  "charOffset": 11987,
                  "charLength": 169,
                  "snippet": {
                    "text": "                            try:\n                                await msgError.delete(delay=7)\n                            except:\n                                pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bb9745c3d2de8460c29ceb826f9132db864559668b0dbb20f00f6651412d7b44"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 341,
                  "startColumn": 29,
                  "charOffset": 12926,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 339,
                  "startColumn": 1,
                  "charOffset": 12802,
                  "charLength": 169,
                  "snippet": {
                    "text": "                            try:\n                                await msgError.delete(delay=7)\n                            except:\n                                pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "dc895404ec0d49a0250ceae407a569109659d72f413d0773b35737f621ee8bc0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 373,
                  "startColumn": 21,
                  "charOffset": 14247,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 371,
                  "startColumn": 1,
                  "charOffset": 14154,
                  "charLength": 130,
                  "snippet": {
                    "text": "                    try:\n                        await msgError.delete()\n                    except:\n                        pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "76ec267e068d370021b3b8bc3eb6e483e198389a974d766ceb6e624ae45ef30b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 389,
                  "startColumn": 25,
                  "charOffset": 15045,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 387,
                  "startColumn": 1,
                  "charOffset": 14931,
                  "charLength": 155,
                  "snippet": {
                    "text": "                        try:\n                            await msgTooLong.delete(delay=7)\n                        except:\n                            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "42eeeba1e7f4863af427e4eb9331d07e6a1c0f33eb1b1544928ce4391b089976"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 417,
                  "startColumn": 21,
                  "charOffset": 16182,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 415,
                  "startColumn": 1,
                  "charOffset": 16089,
                  "charLength": 130,
                  "snippet": {
                    "text": "                    try:\n                        await msgError.delete()\n                    except:\n                        pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f6adf1933a8971604f03bf7913d83b569e7c9eb83a810008f40b75d47b17b92e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 444,
                  "startColumn": 21,
                  "charOffset": 17284,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 442,
                  "startColumn": 1,
                  "charOffset": 17191,
                  "charLength": 130,
                  "snippet": {
                    "text": "                    try:\n                        await msgError.delete()\n                    except:\n                        pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "156d78c8cf8f1cbd9715cbd258b3864c87e9e94f6c7c4f673c6cf4efc47a0c91"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 471,
                  "startColumn": 25,
                  "charOffset": 18508,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 469,
                  "startColumn": 1,
                  "charOffset": 18396,
                  "charLength": 153,
                  "snippet": {
                    "text": "                        try:\n                            await msgError.delete(delay=7)\n                        except:\n                            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "86f78bfa5c1d7e03691915b24fc1356b50e16d9c22c79b7e18ef47a1bfa83e81"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 511,
                  "startColumn": 25,
                  "charOffset": 20205,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 509,
                  "startColumn": 1,
                  "charOffset": 20093,
                  "charLength": 153,
                  "snippet": {
                    "text": "                        try:\n                            await msgError.delete(delay=7)\n                        except:\n                            pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2e4b0af5e1e52d946062301e55b9272ae1eb3f2b8a35408e3dfed7a783e6404d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/voting.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 567,
                  "startColumn": 13,
                  "charOffset": 22383,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 565,
                  "startColumn": 1,
                  "charOffset": 22314,
                  "charLength": 98,
                  "snippet": {
                    "text": "            try:\n                await msgError.delete()\n            except:\n                pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d9b36408d1c579086535616b7c19692c911033930441d44c4a508d009855b518"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/GSuiteCreation.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 9,
                  "charOffset": 5648,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 176,
                  "startColumn": 1,
                  "charOffset": 5567,
                  "charLength": 234,
                  "snippet": {
                    "text": "        try:\n            service.users().delete(userKey=email).execute()\n        except:\n            return await interaction.response.send_message(\n                f\"{interaction.user.mention} The account **{email}** does not exist.\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a2d77e2f0a62521bbb9c692f41209996dd890b9d443c8ef241794d9792258e44"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/GSuiteCreation.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 9,
                  "charOffset": 7017,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 207,
                  "startColumn": 1,
                  "charOffset": 6898,
                  "charLength": 265,
                  "snippet": {
                    "text": "            user['suspended'] = suspend\n            service.users().update(userKey=email, body=user).execute()\n        except:\n            await interaction.response.send_message(\n                f\"{interaction.user.mention} The account **{email}** does not exist.\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8d4ddef1b59dc791af86cd412b28b77e826c2e47e8188ed16b2636df9b19eb9d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 5,
                  "charOffset": 535,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 27,
                  "startColumn": 1,
                  "charOffset": 466,
                  "charLength": 110,
                  "snippet": {
                    "text": "    try:\n        value = int(time[:-1]) * time_convert[time[-1]]\n    except:\n        value = time\n    finally:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e493692652b96ee1e3ab140f82fd0919c6cc76400799f9f4e6d52648d644ca0e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 9,
                  "charOffset": 2099,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 85,
                  "startColumn": 1,
                  "charOffset": 2054,
                  "charLength": 132,
                  "snippet": {
                    "text": "                .get()\n            )\n        except:\n            q = database.SandboxConfig.create(mode=\"None\")\n            q.save()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "abf79c93ab8dd41e6cf7c8cfaedc0f6bea912bc5b65d27b5ac3bd73c04a11625"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 758,
                  "startColumn": 17,
                  "charOffset": 30046,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 756,
                  "startColumn": 1,
                  "charOffset": 29977,
                  "charLength": 200,
                  "snippet": {
                    "text": "                        .get()\n                    )\n                except:\n                    embed = discord.Embed(\n                        title=f\"{Emoji.invalid_channel} Ownership Check Failed\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9a1c9cb3fa111964df7930da11ad262c357240aaed92462196a844abac5e9d68"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 981,
                  "startColumn": 21,
                  "charOffset": 39790,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 979,
                  "startColumn": 1,
                  "charOffset": 39709,
                  "charLength": 209,
                  "snippet": {
                    "text": "                            .get()\n                        )\n                    except:\n                        embed = discord.Embed(\n                            title=f\"{Emoji.deny} Ownership Check Failed\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "716774cacb8944f9b1bfa9b289b40881294dfaa43acb76e8440d16a2b4ca160d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1169,
                  "startColumn": 21,
                  "charOffset": 48408,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1167,
                  "startColumn": 1,
                  "charOffset": 48327,
                  "charLength": 209,
                  "snippet": {
                    "text": "                            .get()\n                        )\n                    except:\n                        embed = discord.Embed(\n                            title=f\"{Emoji.deny} Ownership Check Failed\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ed87d5d293115aef4d18dae053ae4d99ff46600ad24e3df1dc3ef12a6515bc6d"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1344,
                  "startColumn": 21,
                  "charOffset": 57142,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1342,
                  "startColumn": 1,
                  "charOffset": 57061,
                  "charLength": 220,
                  "snippet": {
                    "text": "                            .get()\n                        )\n                    except:\n                        embed = discord.Embed(\n                            title=f\"{Emoji.invalid_channel} Ownership Check Failed\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ac56fad0eb26295f92e857b3665e79753230a79747c8a49391a5229e5844d726"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1415,
                  "startColumn": 21,
                  "charOffset": 60439,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1413,
                  "startColumn": 1,
                  "charOffset": 60336,
                  "charLength": 219,
                  "snippet": {
                    "text": "                    try:\n                        voiceLIMIT = int(new_voice_limit)\n                    except:\n                        return await ctx.send(f\"{Emoji.deny} Not a valid number!\")\n                    else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bd0394ea11d00f0fe1ea4f930eeb6b61205b2e93dfdc3d4d1e7d6daa444fb680"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1471,
                  "startColumn": 21,
                  "charOffset": 63186,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1469,
                  "startColumn": 1,
                  "charOffset": 63105,
                  "charLength": 220,
                  "snippet": {
                    "text": "                            .get()\n                        )\n                    except:\n                        embed = discord.Embed(\n                            title=f\"{Emoji.invalid_channel} Ownership Check Failed\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cb40865acc025a0c37c0652ba8e5658cccf67dd619b3d2a81d108269701c57eb"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1551,
                  "startColumn": 21,
                  "charOffset": 66886,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1549,
                  "startColumn": 1,
                  "charOffset": 66805,
                  "charLength": 209,
                  "snippet": {
                    "text": "                            .get()\n                        )\n                    except:\n                        embed = discord.Embed(\n                            title=f\"{Emoji.deny} Ownership Check Failed\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "721d1b680a6eaec94988250c82fe6f415abb3c554ec4efbb43db37ec9d9d8296"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 5,
                  "charOffset": 434,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 17,
                  "startColumn": 1,
                  "charOffset": 365,
                  "charLength": 110,
                  "snippet": {
                    "text": "    try:\n        value = int(time[:-1]) * time_convert[time[-1]]\n    except:\n        value = time\n    finally:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9100c9b0fd8dade48db440a46d928d5d440b719381e9cc90ae4f968664f9c872"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 17,
                  "charOffset": 5692,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 181,
                  "startColumn": 1,
                  "charOffset": 5577,
                  "charLength": 163,
                  "snippet": {
                    "text": "                try:\n                    tutorChannel = self.bot.get_channel(int(query.ChannelID))\n                except:\n                    tutorChannel = None\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a958dbba88758fbe2eda601b07c6d1cf286f3639855d94446214189b4b31ca94"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 25,
                  "charOffset": 6573,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 198,
                  "startColumn": 1,
                  "charOffset": 6434,
                  "charLength": 273,
                  "snippet": {
                    "text": "                                tutorChannel, reason=\"Hogging the VC Start Channel.\"\n                            )\n                        except:\n                            await member.move_to(\n                                None, reason=\"Hogging the VC Start Channel.\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cf9e9763ac86f5825424a5af01b297701ed5a85f42bb7b57c6c04d4b64250de8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 393,
                  "startColumn": 17,
                  "charOffset": 16660,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 391,
                  "startColumn": 1,
                  "charOffset": 16545,
                  "charLength": 246,
                  "snippet": {
                    "text": "                        reason=\"Maximum Channel Ownership Allowance [TRUE]\",\n                    )\n                except:\n                    await member.move_to(\n                        None, reason=\"Maximum Channel Ownership Allowance [FAIL]\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "085a3fb059fe7c51ef6d1e9ca011a4e7458e22397f7a0bf79440037bedf2c24e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 5,
                  "charOffset": 883,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 35,
                  "startColumn": 1,
                  "charOffset": 814,
                  "charLength": 110,
                  "snippet": {
                    "text": "    try:\n        value = int(time[:-1]) * time_convert[time[-1]]\n    except:\n        value = time\n    finally:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0502670c4c876f56c4e342eeb24d4890cc0827fb50721e933c141b6ef0b0c792"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyMain.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 301,
                  "startColumn": 13,
                  "charOffset": 8221,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 299,
                  "startColumn": 1,
                  "charOffset": 8151,
                  "charLength": 99,
                  "snippet": {
                    "text": "            try:\n                await member.send(dmMSG)\n            except:\n                pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "52fb9ab94fc280352e1461c27615de39d28f9824a02fbfe4f0e41f3476198a39"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/Tutor.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 13,
                  "charOffset": 3072,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 84,
                  "startColumn": 1,
                  "charOffset": 2974,
                  "charLength": 179,
                  "snippet": {
                    "text": "            try:\n                await interaction.response.send_message(embed=embed)\n            except:\n                await interaction.channel.send(embed=embed)\n        else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "089b97fb9c127026e202fc854c11f5accb15564468b51a376aa89135c00cc99f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/Tutor.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 17,
                  "charOffset": 4445,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 115,
                  "startColumn": 1,
                  "charOffset": 4335,
                  "charLength": 199,
                  "snippet": {
                    "text": "                try:\n                    await interaction.response.send_message(embed=embed)\n                except:\n                    await interaction.channel.send(embed=embed)\n            else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fcee7a9160285d928e234f14e4d57c2e3fa85055d96e7fc4e3e3343db1dda79f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/Tutor.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 17,
                  "charOffset": 4895,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 125,
                  "startColumn": 1,
                  "charOffset": 4785,
                  "charLength": 182,
                  "snippet": {
                    "text": "                try:\n                    await interaction.response.send_message(embed=embed)\n                except:\n                    await interaction.channel.send(embed=embed)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f10a7970579c82894239e2ae8287b20120e9432d49d877487eb0b927c7633131"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/TutorLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 17,
                  "charOffset": 1948,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 53,
                  "startColumn": 1,
                  "charOffset": 1861,
                  "charLength": 213,
                  "snippet": {
                    "text": "                try:\n                    await tutor.send(embed=embed)\n                except:\n                    await botch.send(\n                        f\"Unable to send a reminder DM to you {tutor.mention}!\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8381a2f0075a6d90c70db3c61763e16ae8e5055da34f902fc1b9ae6c10fc6a2c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/TutorLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 17,
                  "charOffset": 2223,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 60,
                  "startColumn": 1,
                  "charOffset": 2134,
                  "charLength": 173,
                  "snippet": {
                    "text": "                try:\n                    await student.send(embed=embed)\n                except:\n                    print(f\"Unable to Send a Reminder DM to: {student.id}\")\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "440bf0f088b901404d7dd1c9e84a17c24dd31273f31c575ac0cf4f3b0380158e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 21,
                  "charOffset": 2791,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 87,
                  "startColumn": 1,
                  "charOffset": 2701,
                  "charLength": 236,
                  "snippet": {
                    "text": "                            ephemeral=True,\n                        )\n                    except:\n                        await interaction.channel.send(\n                            f\"{interaction.user.mention} An error occurred while \""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c26af6d8b09bfe2070e95e770169c937bf8daa466f53775e71a565d8dc054b60"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 180,
                  "startColumn": 21,
                  "charOffset": 6898,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 178,
                  "startColumn": 1,
                  "charOffset": 6782,
                  "charLength": 262,
                  "snippet": {
                    "text": "                            \"You have been verified!\", ephemeral=True\n                        )\n                    except:\n                        await VerificationChannel.send(\n                            f\"{interaction.user.mention} You have been verified!\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "81b0c4d7ebe12f9062c8ce8ee03c29ea31dd8eb3650c77d6a9f27071f100d285"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/!VerificationStaff.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 219,
                  "startColumn": 21,
                  "charOffset": 8663,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 217,
                  "startColumn": 1,
                  "charOffset": 8573,
                  "charLength": 268,
                  "snippet": {
                    "text": "                            ephemeral=True,\n                        )\n                    except:\n                        await VerificationChannel.send(\n                            f\"{interaction.user.mention} I didn't seem to find any roles to give you, please try \""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "be4d844c92e47c14585f2b6f60a9a9af170aa26e976489c097244cc888f4e0b0"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyBroadExceptionInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Too broad exception clause",
            "markdown": "Too broad exception clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 5,
                  "charOffset": 4521,
                  "charLength": 6,
                  "snippet": {
                    "text": "except"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 152,
                  "startColumn": 1,
                  "charOffset": 4455,
                  "charLength": 87,
                  "snippet": {
                    "text": "    try:\n        os.remove(f\"transcript-{channel.name}.html\")\n    except:\n        pass\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "42e0bd8e5da069fbb6294b53fa62b14e8787557f2fff2d01adabdf1d1412257a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyProtectedMemberInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Access to a protected member _meta of a class",
            "markdown": "Access to a protected member _meta of a class"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/database.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 27,
                  "charOffset": 2462,
                  "charLength": 21,
                  "snippet": {
                    "text": "model_dict[key]._meta"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 72,
                  "startColumn": 1,
                  "charOffset": 2379,
                  "charLength": 233,
                  "snippet": {
                    "text": "        else:\n            db.connect(reuse_if_open=True)\n            for column in model_dict[key]._meta.sorted_fields:\n                if not db.column_exists(key, column.name):\n                    db.create_column(key, column.name)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "68b85ae0402813efa65830ebffba173742ec6d3456fa8950bac9fd7851e37225"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyProtectedMemberInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Access to a protected member _prepare_once of a class",
            "markdown": "Access to a protected member _prepare_once of a class"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 15,
                  "charOffset": 6822,
                  "charLength": 25,
                  "snippet": {
                    "text": "self.source._prepare_once"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 191,
                  "startColumn": 1,
                  "charOffset": 6788,
                  "charLength": 162,
                  "snippet": {
                    "text": "            return\n\n        await self.source._prepare_once()\n        page = await self.source.get_page(0)\n        kwargs = await self._get_kwargs_from_page(page)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6fb59a5bb2acb445981d2ab0f21b50e20232993c083326a8c994e0eeebc1c192"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyProtectedMemberInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Access to a protected member _prepare_once of a class",
            "markdown": "Access to a protected member _prepare_once of a class"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/help.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 493,
                  "startColumn": 15,
                  "charOffset": 17102,
                  "charLength": 25,
                  "snippet": {
                    "text": "self.source._prepare_once"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 491,
                  "startColumn": 1,
                  "charOffset": 17057,
                  "charLength": 173,
                  "snippet": {
                    "text": "        self.current_page = 0\n\n        await self.source._prepare_once()\n        page = await self.source.get_page(0)\n        kwargs = await self._get_kwargs_from_page(page)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "13f7206b7825c54fca0d0652e415328c6ed81c2ea7c13c01be7bcbc76323dd32"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'collections.Iterable', got 'Type[Blacklist]' instead",
            "markdown": "Expected type 'collections.Iterable', got 'Type\\[Blacklist\\]' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/special_methods.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 529,
                  "startColumn": 14,
                  "charOffset": 19394,
                  "charLength": 12,
                  "snippet": {
                    "text": "db_blacklist"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 527,
                  "startColumn": 1,
                  "charOffset": 19294,
                  "charLength": 160,
                  "snippet": {
                    "text": "    blacklisted_users = []\n    db_blacklist: collections.Iterable = database.Blacklist\n    for p in db_blacklist:\n        blacklisted_users.append(p.discordID)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "050813472c60c9004abe07cf9aaa01af733cb6990ea6bf8dc1a3122ba02f08e8"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'collections.Iterable', got 'Type[WhitelistedPrefix]' instead",
            "markdown": "Expected type 'collections.Iterable', got 'Type\\[WhitelistedPrefix\\]' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/ModBot/cogs/CommandsOnly.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 22,
                  "charOffset": 677,
                  "charLength": 26,
                  "snippet": {
                    "text": "database.WhitelistedPrefix"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 20,
                  "startColumn": 1,
                  "charOffset": 548,
                  "charLength": 197,
                  "snippet": {
                    "text": "        if message.channel.id == MainID.ch_mod_commands and not message.author.bot:\n            prefix = []\n            for p in database.WhitelistedPrefix:\n                prefix.append(p.prefix)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7ced4086b081019e2fa71a11bf08958118922d5781b7a2cae7d1ff1f86909f1d"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'collections.Iterable', got 'Type[Blacklist]' instead",
            "markdown": "Expected type 'collections.Iterable', got 'Type\\[Blacklist\\]' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/Blacklist.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 18,
                  "charOffset": 2495,
                  "charLength": 18,
                  "snippet": {
                    "text": "database.Blacklist"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 81,
                  "startColumn": 1,
                  "charOffset": 2398,
                  "charLength": 191,
                  "snippet": {
                    "text": "        await interaction.response.defer(thinking=True)\n        empty_list = []\n        for p in database.Blacklist:\n            user = self.bot.get_user(p.discordID)\n            if not user:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a56e151761a09f58029aacac37dd6653f5409fcb34f2e37098a557cb191ed23b"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'collections.Iterable', got 'Type[WhitelistedPrefix]' instead",
            "markdown": "Expected type 'collections.Iterable', got 'Type\\[WhitelistedPrefix\\]' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 22,
                  "charOffset": 4507,
                  "charLength": 8,
                  "snippet": {
                    "text": "PrefixDB"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 146,
                  "startColumn": 1,
                  "charOffset": 4463,
                  "charLength": 91,
                  "snippet": {
                    "text": "        response = []\n\n        for entry in PrefixDB:\n\n            if entry.status is True:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a1331dc9d6b6f1a07a7335174f3b1d0bd881a40fe343b921904ae1773158bc09"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'collections.Iterable', got 'Type[StudyVCDB]' instead",
            "markdown": "Expected type 'collections.Iterable', got 'Type\\[StudyVCDB\\]' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudyBot/cogs/StudyVoiceModule.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 212,
                  "startColumn": 18,
                  "charOffset": 7124,
                  "charLength": 18,
                  "snippet": {
                    "text": "database.StudyVCDB"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 210,
                  "startColumn": 1,
                  "charOffset": 7029,
                  "charLength": 195,
                  "snippet": {
                    "text": "        StudyVCConsoleObj = StudyVCGuildObj.get_channel(self.StudyVCConsole)\n\n        for q in database.StudyVCDB:\n            dateObj = pytz.timezone(\"America/New_York\").localize(q.RenewalTime)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6056bdb3a53a318c19ed78b984039e4760f20e9cd6fd2f4a1fc217b34a4b2cca"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'collections.Iterable', got 'TutorBot_Sessions' instead",
            "markdown": "Expected type 'collections.Iterable', got 'TutorBot_Sessions' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/Tutor.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 30,
                  "charOffset": 1924,
                  "charLength": 5,
                  "snippet": {
                    "text": "query"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 62,
                  "startColumn": 1,
                  "charOffset": 1843,
                  "charLength": 220,
                  "snippet": {
                    "text": "                list_ten = []\n                i = 0\n                for entry in query:\n                    if not isinstance(entry.Date, datetime):\n                        entry.Date = datetime.fromisoformat(entry.Date)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c44198ba2b5eba154fd5834c1a4ccb1f7595becc6777030b6aa2a11c937663e8"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'collections.Iterable', got 'TutorBot_Sessions' instead",
            "markdown": "Expected type 'collections.Iterable', got 'TutorBot_Sessions' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/Tutor.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 26,
                  "charOffset": 5848,
                  "charLength": 5,
                  "snippet": {
                    "text": "query"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 152,
                  "startColumn": 1,
                  "charOffset": 5779,
                  "charLength": 133,
                  "snippet": {
                    "text": "            list_ten = []\n            i = 0\n            for entry in query:\n\n                if not isinstance(entry.Date, datetime):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2a1bc47b02c816b967a0edd096716d7c6787930b6f030bb42408af3892fce9c4"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'collections.Iterable', got 'Type[TutorBot_Sessions]' instead",
            "markdown": "Expected type 'collections.Iterable', got 'Type\\[TutorBot_Sessions\\]' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/TutorLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 22,
                  "charOffset": 585,
                  "charLength": 26,
                  "snippet": {
                    "text": "database.TutorBot_Sessions"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 22,
                  "startColumn": 1,
                  "charOffset": 493,
                  "charLength": 261,
                  "snippet": {
                    "text": "    async def tutorsession(self):\n        now = datetime.now(self.est)\n        for entry in database.TutorBot_Sessions:\n            TutorSession = pytz.timezone(\"America/New_York\").localize(entry.Date)\n            val = int((TutorSession - now).total_seconds())"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "90bf0529eacf8b64a86f51b78749d4339faa900bc019d45440297788702ff9a3"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'collections.Iterable', got 'Type[TutorSession_GracePeriod]' instead",
            "markdown": "Expected type 'collections.Iterable', got 'Type\\[TutorSession_GracePeriod\\]' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/TutorBot/cogs/TutorLoop.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 22,
                  "charOffset": 4369,
                  "charLength": 33,
                  "snippet": {
                    "text": "database.TutorSession_GracePeriod"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 121,
                  "startColumn": 1,
                  "charOffset": 4265,
                  "charLength": 283,
                  "snippet": {
                    "text": "    async def tutorsession_graceperiod(self):\n        now = datetime.now(self.est)\n        for entry in database.TutorSession_GracePeriod:\n            TutorSession = pytz.timezone(\"America/New_York\").localize(entry.GP_DATE)\n            val = int((TutorSession - now).total_seconds())"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6db66d243536927f2f87a3935a8c2ca4c39f0511e7f25ef2884b323e7893d6fa"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'collections.Iterable', got 'Type[ResponseSpamBlacklist]' instead",
            "markdown": "Expected type 'collections.Iterable', got 'Type\\[ResponseSpamBlacklist\\]' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudentEngadgement/cogs/set.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 18,
                  "charOffset": 881,
                  "charLength": 30,
                  "snippet": {
                    "text": "database.ResponseSpamBlacklist"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 41,
                  "startColumn": 1,
                  "charOffset": 818,
                  "charLength": 137,
                  "snippet": {
                    "text": "def reload_blacklist():\n    blacklist.clear()\n    for entry in database.ResponseSpamBlacklist:\n        blacklist.append(entry.discordID)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9d36fc6f62378f5429baf9f686de5a95f7f7f3cc9a024e83f7db1ef823d977ef"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'collections.Iterable', got 'Type[ResponseSpamBlacklist]' instead",
            "markdown": "Expected type 'collections.Iterable', got 'Type\\[ResponseSpamBlacklist\\]' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/bots/StudentEngadgement/cogs/set.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 403,
                  "startColumn": 21,
                  "charOffset": 14559,
                  "charLength": 30,
                  "snippet": {
                    "text": "database.ResponseSpamBlacklist"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 401,
                  "startColumn": 1,
                  "charOffset": 14500,
                  "charLength": 136,
                  "snippet": {
                    "text": "\n    async def cog_load(self) -> None:\n        for item in database.ResponseSpamBlacklist:\n            blacklist.append(item.discordID)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5851d66973dd71f9486289c71965c964661ff67fd1d9a44e0f99d42e43a66e27"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type '{__ne__}', got 'None' instead",
            "markdown": "Expected type '{__ne__}', got 'None' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 975,
                  "startColumn": 64,
                  "charOffset": 36329,
                  "charLength": 4,
                  "snippet": {
                    "text": "None"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 973,
                  "startColumn": 1,
                  "charOffset": 36169,
                  "charLength": 189,
                  "snippet": {
                    "text": "            async with channel.typing():\n                msg, file, S3_URL = await TicketExport(\n                    self, channel, ResponseLogChannel, author, None, True\n                )\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f10e86f505fc61559713abef2a2906bb7be5b7f80a2e96b0b6bba397b222b3f7"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'collections.Iterable', got 'Type[TicketInfo]' instead",
            "markdown": "Expected type 'collections.Iterable', got 'Type\\[TicketInfo\\]' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/events/TicketDropdown.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1154,
                  "startColumn": 22,
                  "charOffset": 43967,
                  "charLength": 12,
                  "snippet": {
                    "text": "TicketInfoTB"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 1152,
                  "startColumn": 1,
                  "charOffset": 43853,
                  "charLength": 240,
                  "snippet": {
                    "text": "        TicketInfoTB = database.TicketInfo\n        guild = self.bot.get_guild(MainID.g_main)\n        for entry in TicketInfoTB:\n            channel: discord.TextChannel = self.bot.get_channel(entry.ChannelID)\n            if channel is None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a6827d772fb6f273cfb197b460240d8386b811c73b91fb83355ab5a5c6f3e4d1"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'collections.Iterable', got 'Type[Blacklist]' instead",
            "markdown": "Expected type 'collections.Iterable', got 'Type\\[Blacklist\\]' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "main.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 51,
                  "charOffset": 1411,
                  "charLength": 18,
                  "snippet": {
                    "text": "database.Blacklist"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 50,
                  "startColumn": 1,
                  "charOffset": 1276,
                  "charLength": 309,
                  "snippet": {
                    "text": "\n    async def interaction_check(self, interaction: discord.Interaction, /) -> bool:\n        blacklisted_users = [p.discordID for p in database.Blacklist]\n        if interaction.user.id in blacklisted_users:\n            await interaction.response.send_message(\"You have been blacklisted from using commands!\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "67aa30e462707afa7b241d609f6a3dbfe0f61b072ced8b90ff0760972c2afac0"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        }
      ],
      "automationDetails": {
        "id": "project/qodana/2022-05-03",
        "guid": "3b6923d3-117c-4f08-a93b-dfcdae7a7d29"
      },
      "newlineSequences": [
        "\r\n",
        "\n"
      ],
      "properties": {
        "qodana.sanity.results": [
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "core/checks.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 3327,
                    "snippet": {
                      "text": "\"\"\" SETUP: If you require a specific command to be protected, you can use the @is_botAdmin check or ..."
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 125,
                    "snippet": {
                      "text": "\"\"\"\nSETUP:\nIf you require a specific command to be protected, you can use the @is_botAdmin check or create your own one here!"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "42b924e3ec5d7e2d6ec85747324af2dd51f4fc64072311cc04f664b7c111184d"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "core/common.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 67763,
                    "snippet": {
                      "text": "from __future__ import annotations import asyncio import io import json import os import random imp..."
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 50,
                    "snippet": {
                      "text": "from __future__ import annotations\n\nimport asyncio"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "9690622913451be27ccc8dd33e88c75e4f4257793beb664b3581ceda1c3b5c95"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "core/docsapi.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 3827,
                    "snippet": {
                      "text": "from __future__ import print_function from google.cloud import speech_v1p1beta1 as speech from goog..."
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 90,
                    "snippet": {
                      "text": "from __future__ import print_function\n\nfrom google.cloud import speech_v1p1beta1 as speech"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "d8458b2496ab060fdc33e079c7e67d36391ae64d06888dd4348585a3f43f182d"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "core/database.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 17740,
                    "snippet": {
                      "text": "import os from datetime import datetime from distutils.util import strtobool from typing import Lite..."
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 76,
                    "snippet": {
                      "text": "import os\nfrom datetime import datetime\nfrom distutils.util import strtobool"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "9bae3bb67aa9a6bd784bd4e222ae44adbcc3a3ab5b1471d8530e83934753ebe4"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "core/gh_modals.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 8848,
                    "snippet": {
                      "text": "from __future__ import annotations import os from typing import Dict, Literal, TYPE_CHECKING, Union..."
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 45,
                    "snippet": {
                      "text": "from __future__ import annotations\n\nimport os"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "a4e7cd61ea10446d5f977698c1276b4b2254079eb052baa8901c31817dde8679"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "core/redirect_sdk.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 6248,
                    "snippet": {
                      "text": "import pprint import typing from datetime import datetime from typing import List from urllib.parse ..."
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 57,
                    "snippet": {
                      "text": "import pprint\nimport typing\nfrom datetime import datetime"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "4effbe5bb73c6e7944476543cbeaa37430463b6c1bb58c3aafeb571dd678e15b"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "core/special_methods.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 22700,
                    "snippet": {
                      "text": "from __future__ import annotations import collections import json import os import subprocess impor..."
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 54,
                    "snippet": {
                      "text": "from __future__ import annotations\n\nimport collections"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "bdd0faa83b5397ea30a3c2efc4695b9f732a0c96d8df2d156f149413367f8a68"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "utils/bots/ModBot/cogs/mod.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 8353,
                    "snippet": {
                      "text": "import math import discord import peewee from discord.ext import commands from core import common,..."
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 27,
                    "snippet": {
                      "text": "import math\n\nimport discord"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "7ed6935d17b71e95acda926b3bebe689557d21d1c5240096a5cb6a1ef5ccc237"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "utils/bots/ModBot/cogs/BanLogger.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 4018,
                    "snippet": {
                      "text": "import asyncio import json import os import re from datetime import datetime import discord import ..."
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 36,
                    "snippet": {
                      "text": "import asyncio\nimport json\nimport os"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "036ce929be4f67d9af6a9b22c6a843994bbdbbb965f0bd2a6803f7d1edb514d6"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "utils/bots/ModBot/cogs/CommandsOnly.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 1596,
                    "snippet": {
                      "text": "import discord from discord.ext import commands from core import database from core.common import M..."
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 48,
                    "snippet": {
                      "text": "import discord\nfrom discord.ext import commands\n"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "bfd900fe6f3a0cdab67a0ac49dd750808c46f5fcb2f1825336e5cb6989f00aa3"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "utils/bots/CoreBot/cogs/help.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 29647,
                    "snippet": {
                      "text": "# Copyright (c) 2015-2021 Rapptz # Copyright (c) 2022-present School Simplified from __future__ impo..."
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 114,
                    "snippet": {
                      "text": "# Copyright (c) 2015-2021 Rapptz\n# Copyright (c) 2022-present School Simplified\nfrom __future__ import annotations"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "79dfe3115c2199dc7546f592e3a83283892e7e12262d1ac9a409222e1eac9c04"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "utils/bots/CoreBot/cogs/voting.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 28756,
                    "snippet": {
                      "text": "import ast import asyncio import datetime import json import os import pytz import random import str..."
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 41,
                    "snippet": {
                      "text": "import ast\nimport asyncio\nimport datetime"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "37768398dbeaee958c11283d3cc1e1164882a468716d55b1168f580eda9035db"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "utils/bots/CoreBot/cogs/Blacklist.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 3047,
                    "snippet": {
                      "text": "from __future__ import annotations from typing import TYPE_CHECKING import discord from discord.ap..."
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 68,
                    "snippet": {
                      "text": "from __future__ import annotations\n\nfrom typing import TYPE_CHECKING"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "566ca60d8de613ca7e3946af05e1b0e819c5a85ddba2097eb73cbfef453908a1"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "utils/bots/CoreBot/cogs/MiscCommands.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 25435,
                    "snippet": {
                      "text": "import asyncio import sys import time from datetime import timedelta from typing import List, Litera..."
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 37,
                    "snippet": {
                      "text": "import asyncio\nimport sys\nimport time"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "32816314e266d3132b7d4137c1302ecd80ee52f9c1bbb0153b1a6dfea8df2be7"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "utils/bots/CoreBot/cogs/todocommands.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 3218,
                    "snippet": {
                      "text": "import discord from discord.ext import commands from core import database from core.common import C..."
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 48,
                    "snippet": {
                      "text": "import discord\nfrom discord.ext import commands\n"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "b5d2e5378951b761bf7a3075c0f797134a739925e5fc48097160c34fd28c7047"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "utils/bots/CoreBot/cogs/CoreBotConfig.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 18543,
                    "snippet": {
                      "text": "import subprocess import sys from pathlib import Path from threading import Thread from typing impor..."
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 53,
                    "snippet": {
                      "text": "import subprocess\nimport sys\nfrom pathlib import Path"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "beaa991edb6ebddad8159e601a4c9cc2c08fa57f1247dd5a9bc09ae7c924f6cf"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "utils/bots/CoreBot/cogs/GSuiteCreation.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 7484,
                    "snippet": {
                      "text": "from __future__ import print_function import random import string from typing import Literal impor..."
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 52,
                    "snippet": {
                      "text": "from __future__ import print_function\n\nimport random"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "48b29a66cc46b25ef16785a30954f392d8485669eeac719d90c225004fa173c4"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "utils/bots/CoreBot/cogs/RedirectService.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 1895,
                    "snippet": {
                      "text": "import os import discord from discord.ext import commands from dotenv import load_dotenv from core..."
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 25,
                    "snippet": {
                      "text": "import os\n\nimport discord"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "f469620825abe830c095500f35b5865e25030400635eb2ae03dd2e7950513080"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "utils/bots/CoreBot/cogs/github_commands.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 7813,
                    "snippet": {
                      "text": "from __future__ import annotations import os from typing import Dict, List, Literal, TYPE_CHECKING,..."
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 45,
                    "snippet": {
                      "text": "from __future__ import annotations\n\nimport os"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "ae1f44f04f5618a32b454ece93400f03d3d2ca465ebc1d31e8862f3ff1bd3c05"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "utils/bots/CoreBot/cogs/techCommissions.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 9690,
                    "snippet": {
                      "text": "from typing import Literal import discord from discord import ui, app_commands from discord.ext imp..."
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 42,
                    "snippet": {
                      "text": "from typing import Literal\n\nimport discord"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "23d8a8c7de338e35502ccbc8857d527a743f0cc1f298e6182d2a851670f05a9c"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "utils/bots/CoreBot/cogs/commands_manager.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 3452,
                    "snippet": {
                      "text": "from typing import Union, Literal import discord from discord import ui, ButtonStyle from discord.e..."
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 49,
                    "snippet": {
                      "text": "from typing import Union, Literal\n\nimport discord"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "24bdbc3d15064491444b87989bd476380183b2be0a90457c0afc6ed801bc41de"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "utils/bots/TutorVC/cogs/vcCommands.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 69762,
                    "snippet": {
                      "text": "import datetime from datetime import datetime, timedelta import discord import pytz from discord.ex..."
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 57,
                    "snippet": {
                      "text": "import datetime\nfrom datetime import datetime, timedelta\n"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "da2f668aa4637cc6559a6c54de6e5714c8a5473abbe06be5b82a21e667610454"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "utils/bots/TutorVC/cogs/vcUpdateNEW.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 30121,
                    "snippet": {
                      "text": "import asyncio import datetime from datetime import datetime, timedelta import discord import pytz ..."
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 71,
                    "snippet": {
                      "text": "import asyncio\nimport datetime\nfrom datetime import datetime, timedelta"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "2842ca8a3e8b1cfd5fe13f2cf435a244d56376b4d5c657ca3cdd76ab92506c4c"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "utils/bots/StudyBot/cogs/StudyLoop.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 1490,
                    "snippet": {
                      "text": "import datetime import pytz from dateutil import parser from discord.ext import tasks, commands fr..."
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 28,
                    "snippet": {
                      "text": "import datetime\n\nimport pytz"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "d07309254ba4eb3cbaecbe5895c601fb46ce4b8262b1637d00d40a291fbf77b2"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          }
        ],
        "deviceId": "200820300000000-e0d5-f6bb-7322-854909536002",
        "tags": [
          "qodana.sanity.results",
          "deviceId"
        ]
      }
    }
  ]
}