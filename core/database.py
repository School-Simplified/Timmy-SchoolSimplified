import os
from datetime import datetime
from typing import Text

from discord.enums import ExpireBehavior
from dotenv import load_dotenv
from flask import Flask
from peewee import *
from playhouse.shortcuts import (  # these can be used to convert an item to or from json http://docs.peewee-orm.com/en/latest/peewee/playhouse.html#model_to_dict
    ReconnectMixin, dict_to_model, model_to_dict)
from playhouse.sqlite_ext import RowIDField

load_dotenv()

'''
Change to a SqliteDatabase if you don't have any MySQL Credentials.
If you do switch, comment/remove the MySQLDatabase variable and uncomment/remove the # from the SqliteDatabase instance. 
'''

db = MySQLDatabase(os.getenv("DatabaseName"), user=os.getenv("Username"), password=os.getenv("Password"),host= os.getenv("IP"), port = int(os.getenv("PORT")))
#db = SqliteDatabase("data.db")

def iter_table(model_dict):
    """Iterates through a dictionary of tables, confirming they exist and creating them if necessary."""
    for key in model_dict:
        if not db.table_exists(key):
            db.connect(reuse_if_open=True)
            db.create_tables([model_dict[key]])
            db.close()

class BaseModel(Model):
    """Base Model class used for creating new tables."""
    class Meta:
        database = db


class VCChannelInfo(BaseModel):
    id = AutoField()
    ChannelID = TextField()
    name = TextField()
    authorID = TextField()
    datetimeObj = DateTimeField()
    used = BooleanField()
    lockStatus = TextField()

class IgnoreThis(BaseModel):
    id = AutoField()
    channelID = TextField()
    authorID = TextField()

class HelperTally(BaseModel):
    id = PrimaryKeyField()
    userID = TextField()
    CS = IntegerField(default = 0)
    English = IntegerField(default = 0)
    Language = IntegerField(default = 0)
    Math = IntegerField(default = 0)
    Science = IntegerField(default = 0)
    SocialStudies = IntegerField(default = 0)
    Algebra = IntegerField(default = 0)
    Geometry = IntegerField(default = 0)
    Precalc = IntegerField(default = 0)
    Calc = IntegerField(default = 0)
    Statistics = IntegerField(default = 0)
    EnglishLang = IntegerField(default = 0)
    EnglishLit = IntegerField(default = 0)
    Research = IntegerField(default = 0)
    Seminar = IntegerField(default = 0)
    Bio = IntegerField(default = 0)
    Chem = IntegerField(default = 0)
    Physics = IntegerField(default = 0)
    ASL = IntegerField(default = 0)
    Chinese = IntegerField(default = 0)
    French = IntegerField(default = 0)
    German = IntegerField(default = 0)
    Italian = IntegerField(default = 0)
    Latin = IntegerField(default = 0)
    Korean = IntegerField(default = 0)
    Russian = IntegerField(default = 0)
    Spanish = IntegerField(default = 0)
    Econ = IntegerField(default = 0)
    Euro = IntegerField(default = 0)
    Psych = IntegerField(default = 0)
    USGov = IntegerField(default = 0)
    USHistory = IntegerField(default = 0)
    WorldHistory = IntegerField(default = 0)


class QuestionTimestamp(BaseModel):
    id = PrimaryKeyField()
    userID = TextField()
    date = TextField()
    subject = TextField()
    question = TextField()


class Response(BaseModel):
    id = AutoField()
    CommunityService = TextField(default="NONE")
    Recommendation = TextField(default="NONE")
    AcademicHour = TextField(default="NONE")
    Design = TextField(default="NONE")
    PR = TextField(default="NONE")
    Marketing = TextField(default="NONE")
    Analytics = TextField(default="NONE")
    Tech = TextField(default="NONE")
    BreakApproval = TextField(default="NONE")

class ExtraResponse(BaseModel):
    id = AutoField()
    topic = TextField()
    field1 = TextField()
    field2 = TextField(default="NONE")
    field3 = TextField(default="NONE")
    field4= TextField(default="NONE")
    field4= TextField(default="NONE")

class EmailsVersion2(BaseModel):
    id = AutoField()
    supervisorID = TextField()
    supervisorEmail = TextField()

class ChannelInfo(BaseModel):
    id = AutoField()
    ChannelID = TextField()
    topic = TextField()
    authorID = TextField()
    status = TextField()

class Tag(BaseModel):
    """Stores our tags accessed by the tag command."""
    id = AutoField()
    tag_name = TextField(unique=True)
    #embed_title = TextField()
    text = TextField()

class Administrators(BaseModel):
    id = AutoField()
    discordID = BigIntegerField(unique = True)

    TierLevel = IntegerField(default=1)
    '''
    TIER LEVEL

    1 - Bot Manager
    2 - Admin
    3 - Sudo Admin

    '''

app = Flask(__name__)

# This hook ensures that a connection is opened to handle any queries
# generated by the request.
@app.before_request
def _db_connect():
    db.connect()

# This hook ensures that the connection is closed when we've finished
# processing the request.
@app.teardown_request
def _db_close(exc):
    if not db.is_closed():
        db.close()

tables = {"VoiceChannelInfo" : VCChannelInfo, "IgnoreThis": IgnoreThis, "helpertally": HelperTally, "questiontimestamp": QuestionTimestamp, "tag": Tag, "ChannelInfo" : ChannelInfo, "Response": Response, "ExtraResponse": ExtraResponse, "EmailsVersion2": EmailsVersion2, "Administrators": Administrators}
iter_table(tables)
